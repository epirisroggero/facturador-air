<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:s="library://ns.adobe.com/flex/spark" xmlns:ui="biz.fulltime.ui.*" applicationComplete="windowedapplication1_applicationCompleteHandler(event)"
					   creationComplete="application1_creationCompleteHandler(event)" initialize="initializeThemeData()" minWidth="1024"
					   minHeight="720" width="1360" height="780" title="{version}" closing="windowedapplication1_closingHandler(event)">

	<fx:Style source="facturador.css" />

	<fx:Script>
		<![CDATA[
			import air.update.ApplicationUpdaterUI;
			import air.update.events.DownloadErrorEvent;
			import air.update.events.StatusFileUpdateEvent;
			
			import biz.fulltime.conf.GeneralOptions;
			import biz.fulltime.conf.ServerConfig;
			import biz.fulltime.dto.EFacturaResult;
			import biz.fulltime.event.ExportToCSVEvent;
			import biz.fulltime.event.ExportToExcelEvent;
			import biz.fulltime.event.ExportToPDFEvent;
			import biz.fulltime.model.Usuario;
			import biz.fulltime.ui.forms.FrmCotizaciones;
			
			import flash.system.fscommand;
			
			import mx.controls.Alert;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.PopUpManager;
			import mx.rpc.remoting.RemoteObject;
			
			import org.alivepdf.pdf.PDF;
			import org.alivepdf.saving.Method;
			
			import spark.components.TitleWindow;
			
			import util.CatalogoFactory;
			import util.ErrorPanel;

			private var helpWindow:TitleWindow;

			private var stream:FileStream;
			
			[Embed(source="assets/alerts/Info.png")] 
			[Bindable]
			public var iconSymbol:Class; 
			
			[Embed(source="assets/alerts/Exclamation.png")]
			[Bindable]
			private var exclamationIcon:Class;
			
			[Bindable]
			public var version:String = "FullTime - Facturador v1.7.100";
			
			private function initializeThemeData():void {
				Font.registerFont(MyriadProTLF);
				Font.registerFont(MyriadProBoldTLF);

				Font.registerFont(MyriadProNonTLF);
				Font.registerFont(MyriadProBoldNonTLF);
			}
			
			private function myKeyListener(event:KeyboardEvent):void  {
			}

			protected function application1_creationCompleteHandler(event:FlexEvent):void {
				pnlLogin.addEventListener(LoginPnl.LOGED_OK, loggedHandler);
				
				Alert.buttonHeight = 25;
				Alert.buttonWidth = 80;

				loadOpciones();
			}
			
			private function onError(event:ErrorEvent):void {
				Alert.show(event.toString(), "Error");	
			}
			
			private function updaterStatus(event:StatusFileUpdateEvent):void  {
				Alert.show("Status available:: " + event.available);	
			}
			
			private function loadOpciones():void {
				var file:File = File.applicationStorageDirectory.resolvePath("FullTime/Opciones.xml");
				if (file.exists) {
					stream = new FileStream();
					stream.open(file, FileMode.READ);
					var str:String = stream.readUTFBytes(stream.bytesAvailable);
					stream.close();
					str = str.replace(File.lineEnding, "\n");
					
					GeneralOptions.getInstance().opciones = new XML(str);
				} else {
					var fileOpts:File = File.applicationStorageDirectory.resolvePath("FullTime/Opciones.xml");
					
					var newXMLStr:String = "<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n" + GeneralOptions.getInstance().opciones.toXMLString();
					var fs:FileStream = new FileStream();
					fs.open(fileOpts, FileMode.WRITE);
					fs.writeUTFBytes(newXMLStr);
					fs.close();
				}

			}

			private function loggedHandler(event:Event):void {
				currentState = 'logged';
				
				var permiso:String = "";
				
				var loggedUser:Usuario = GeneralOptions.getInstance().loggedUser;
				if (loggedUser.usuTipo == "S") {
					this.title = version + " [Tipo de Usuario: Supervisor][Nombre: " + GeneralOptions.getInstance().loggedUser.nombre + "]";
				
				} else {
					if (loggedUser.permisoId == Usuario.USUARIO_SUPERVISOR) {
						permiso = "Supervisor";
					} else if (loggedUser.permisoId == Usuario.USUARIO_FACTURACION) {
						permiso = "Facturación";
					} else if (loggedUser.permisoId == Usuario.USUARIO_ADMINISTRADOR) {
						permiso = "Administrador";
					} else if (loggedUser.permisoId == Usuario.USUARIO_TITO) {
						permiso = "Taller y Mantenimiento";
					} else if (loggedUser.permisoId == Usuario.USUARIO_VENDEDOR_SENIOR) {
						permiso = "Vendedor Senior";
					} else if (loggedUser.permisoId == Usuario.USUARIO_VENDEDOR_DISTRIBUIDOR) {
						permiso = "Vendedor Distribuidor";
					} else if (loggedUser.permisoId == Usuario.USUARIO_VENDEDOR_JUNIOR) {
						permiso = "Vendedor Junior";
					} else if (loggedUser.permisoId == Usuario.USUARIO_ALIADOS_COMERCIALES) {
						permiso = "Aliado Comercial";
					}	

					this.title = version + " [Tipo de Usuario: General]" + "[Permiso: " + permiso + "] [Nombre: " + GeneralOptions.getInstance().loggedUser.nombre + "]";
					
				}				
				
				helpWindow = new TitleWindow();
				helpWindow.styleName = "cotizacionSkin";
				helpWindow.x = 0;
				helpWindow.y = 580;

				var frmCotizaciones:FrmCotizaciones = new FrmCotizaciones();

				PopUpManager.addPopUp(helpWindow, this, false);

				helpWindow.addElement(frmCotizaciones);
				
				CatalogoFactory.getInstance().loadAllCatalogs();
				
				if (pnlMain.mainMenuBar) {
					pnlMain.mainMenuBar.updatePermissions();
				}

				// Hide the close button.
				helpWindow.closeButton.visible = false;
			}

			protected function pnlMain_creationCompleteHandler(event:FlexEvent):void {
				pnlMain.addEventListener("_logout", logout);
				
				pnlMain.addEventListener(ExportToCSVEvent.EXPORT_TO_CSV, exportToCSV);
				pnlMain.addEventListener(ExportToExcelEvent.EXPORT_TO_EXCEL, exportToExcel);
				pnlMain.addEventListener(ExportToPDFEvent.EXPORT_TO_PDF, exportToPDF);
				pnlMain.addEventListener(ExportToPDFEvent.CREATE_EFACTURA, createEFactura);
				
				GeneralOptions.getInstance().cargarArticulosServicio();
			}

			private function logout(event:Event):void {
				// Realizar el logout ...
				currentState = 'login';
				
				callLater(function():void {
					pnlLogin.logout();
					
					pnlLogin.tiPwd.text = "";
					pnlLogin.tiPwd.setFocus();
				});
				
				this.title = version;
			}
			
			protected function windowedapplication1_closingHandler(e:Event):void {      
				e.preventDefault();
				
				var alert:Alert = Alert.show("¿Esta seguro de cerrar el Facturador?", "Salir", Alert.YES + Alert.NO, null, myCloseHandler, iconSymbol);
				alert.width = 400;
				alert.height = 200;
			}
						
			private function myCloseHandler(evt:CloseEvent):void {
				if (evt.detail == Alert.YES) {
					NativeApplication.nativeApplication.exit();
					
					fscommand("quit");
				}
			}
			
			private function exportToExcel(event:ExportToExcelEvent):void {
				var bytes:ByteArray = event.xls;
				
				var docsDir:File = File.desktopDirectory;
				docsDir.addEventListener(Event.COMPLETE, function():void {
					try {
						docsDir.openWithDefaultApplication();
					} catch (error:Error) {
						trace(error.toString());
					}
					
				});
				docsDir.addEventListener(IOErrorEvent.IO_ERROR, function(event:*):void {
					var helpWindow:TitleWindow = new TitleWindow();
					helpWindow.title = "Error";
					helpWindow.width = 420;
					
					var errorPnl:ErrorPanel = new ErrorPanel();
					errorPnl.type = 0;
					errorPnl.errorText = "No se pudo guardar el archivo.\nCierre el archivo e intentelo nuevamente.";
					errorPnl.detailsText = event.toString();
					
					PopUpManager.addPopUp(helpWindow, this, true);
					PopUpManager.centerPopUp(helpWindow);
					
					helpWindow.y = 120;
					helpWindow.addElement(errorPnl);
					
					helpWindow.addEventListener(CloseEvent.CLOSE, function():void {
						PopUpManager.removePopUp(helpWindow as IFlexDisplayObject);
					});					
					errorPnl.addEventListener(CloseEvent.CLOSE, function():void {
						PopUpManager.removePopUp(helpWindow as IFlexDisplayObject);
					});
				});
				
				try {
					docsDir.save(bytes, event.fileName);
				} catch (error:Error) {
					trace(error.toString());
				}				
				
			}
			
			private function exportToCSV(event:ExportToCSVEvent):void {
				var fechaHoy:Date = new Date();
				
				var filename:String = "Reportes/" + event.fileName;
				var f:FileStream = new FileStream();
				
				try {
					var file:File = File.documentsDirectory.resolvePath(filename);
					f.open(file, FileMode.WRITE);
					var bytes:ByteArray = event.byteArray;
					f.writeBytes(bytes);
					f.close();
					
					file.openWithDefaultApplication();
				} catch (e:Error) {
					trace(e.message);
					trace("Problemas con el archivo a abrir.");
				}				
				
			}
			
			private function createEFactura(event:ExportToPDFEvent):void {
				var efactura:EFacturaResult = event.eFactura;
				
				var filename:String = "eFactura/" + efactura.fileName;
				
				if (efactura.filePDFData != null) {					
					var f:FileStream = new FileStream();
					try {
						var file:File = File.documentsDirectory.resolvePath(filename + ".pdf");
						f.open(file, FileMode.WRITE);
						
						var bytes:ByteArray = efactura.filePDFData;
						f.writeBytes(bytes);
						f.close();
						
						if (event.openPDF) {
							file.openWithDefaultApplication();
						}
						
					} catch (e:Error) {
						trace(e.message);
						trace("Problemas con el archivo a abrir.");
					}				
				}
				
				
			}
			
			private function exportToPDF(event:ExportToPDFEvent):void {
				var myPDF:PDF = event.pdf;
		
				var fechaHoy:Date = new Date();
				
				var dateFormatter:DateFormatter = new DateFormatter();
				dateFormatter.formatString = "DD-MM-YYYY_JJ-NN-SS";
				
				var filename:String = "ReportesStockPrecio/ProductosStockPrecio_" + dateFormatter.format(fechaHoy) + ".pdf";
				var f:FileStream = new FileStream();
				
				// 7 días para atras de la fecha de hoy
				var fecha:Date = new Date();
				fecha["date"] -= 7;
				
				if (File.documentsDirectory.resolvePath("ReportesStockPrecios").exists) {
					var files:Array = File.documentsDirectory.resolvePath("ReportesStockPrecio").getDirectoryListing();
					for each (var _file:File in files) {
						var _creationDate:Date = _file.modificationDate;
						if (compare(_creationDate, fecha) == -1) { // Si el archivo tiene mas de 10 dias de creado.
							_file.moveToTrash();
						}
					}
				}
				
				try {
					var file:File = File.documentsDirectory.resolvePath(filename);
					f.open(file, FileMode.WRITE);
					var bytes:ByteArray = myPDF.save(Method.LOCAL);
					f.writeBytes(bytes);
					f.close();
					
					file.openWithDefaultApplication();
				} catch (e:Error) {
					trace("Problemas con el archivo a abrir.");
				}
			}
			
			public function compare(date1:Date, date2:Date):Number {
				var date1Timestamp:Number = date1.getTime();
				var date2Timestamp:Number = date2.getTime();
				
				var result:Number = -1;
				
				if (date1Timestamp == date2Timestamp) {
					result = 0;
				} else if (date1Timestamp > date2Timestamp) {
					result = 1;
				}
				return result;
			}
			
			public var appUpdater:ApplicationUpdaterUI;
			
			protected function windowedapplication1_applicationCompleteHandler(event:FlexEvent):void {
				appUpdater = new ApplicationUpdaterUI(); 
		
				appUpdater.configurationFile = new File("app:/updateConfig.xml");
				appUpdater.addEventListener(ErrorEvent.ERROR, onError);
				appUpdater.addEventListener(DownloadErrorEvent.DOWNLOAD_ERROR, onDownloadError);
				appUpdater.initialize();
			}
			
			
			private function onDownloadError(evt:DownloadErrorEvent):void {
				//Alert.show(evt.toString());
			}

			
			protected function pnlLogin_creationCompleteHandler(event:FlexEvent):void {
				pnlLogin.addEventListener("checkUpdates", function(event:Event):void {
					appUpdater.checkNow();	
				});
				
			}
			
		]]>
	</fx:Script>

	<s:states>
		<s:State name="login" />
		<s:State name="logged" />
	</s:states>

	<ui:LoginPnl id="pnlLogin" width="100%" height="100%" includeIn="login" creationComplete="pnlLogin_creationCompleteHandler(event)"/>
	<ui:MainApp id="pnlMain" width="100%" height="100%" creationComplete="pnlMain_creationCompleteHandler(event)" includeIn="logged" />
</s:WindowedApplication>
