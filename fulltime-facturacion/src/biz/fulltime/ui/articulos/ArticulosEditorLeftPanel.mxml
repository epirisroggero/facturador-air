<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:components="biz.fulltime.ui.components.*" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:personas="biz.fulltime.ui.articulos.*"
		  xmlns:s="library://ns.adobe.com/flex/spark" xmlns:viewStackEffects="org.efflex.mx.viewStackEffects.*"
		  width="100%" height="100%" creationComplete="creationCompleteHandler(event)" gap="0">
	<fx:Script>
		<![CDATA[
			import biz.fulltime.conf.GeneralOptions;
			import biz.fulltime.conf.ServerConfig;
			import biz.fulltime.dto.ArticuloDTO;
			import biz.fulltime.dto.ArticuloQuery;
			import biz.fulltime.event.ArticuloEvent;
			import biz.fulltime.model.Contacto;
			import biz.fulltime.model.FamiliaArticulos;
			import biz.fulltime.model.Usuario;
			
			import com.hillelcoren.components.AutoComplete;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			
			import util.CatalogoFactory;

			[Bindable]
			public var hasPermSupervisor:Boolean = false;

			[Bindable]
			public var capitulos:ArrayCollection = new ArrayCollection();

			[Bindable]
			public var subtitulos:ArrayCollection = new ArrayCollection();

			[Bindable]
			public var subfamilia:ArrayCollection = new ArrayCollection();

			[Bindable]
			public var familias:ArrayCollection = new ArrayCollection();

			[Bindable]
			public var proveedores:ArrayCollection = new ArrayCollection();

			[Bindable]
			private var articulos:ArrayCollection = new ArrayCollection();

			private var articulo:ArticuloDTO;




			protected function creationCompleteHandler(event:FlexEvent):void {
				var user:Usuario = GeneralOptions.getInstance().loggedUser;
				hasPermSupervisor = user.esSupervisor();

				for each (var f:FamiliaArticulos in CatalogoFactory.getInstance().familias) {
					var familia:Object = new Object();
					familia.codigo = Number(f.codigo);
					familia.nombre = f.nombre;

					if (Number(f.codigo) < 100) {
						capitulos.addItem(familia);
					} else if (Number(f.codigo) < 10000) {
						subtitulos.addItem(familia);
					} else if (Number(f.codigo) < 1000000) {
						subfamilia.addItem(familia);
					} else {
						familias.addItem(familia);
					}
				}

				for each (var contacto:Contacto in CatalogoFactory.getInstance().contactos) {
					if (contacto.ctoProveedor == "S" && contacto.ctoActivo == "S") {
						trace(contacto.nombre + " : " + contacto.ctoProveedor )
						
						var proveedor:Object = new Object();
						proveedor.codigo = Number(contacto.codigo);
						proveedor.nombre = contacto.nombre;

						proveedores.addItem(proveedor);

					}
				}


				articulos = CatalogoFactory.getInstance().articulos;

			}


			protected function txtCapitulos_changeHandler(event:Event):void {
				if (familias) {
					familias.filterFunction = null;
					familias.refresh();
				}
				subtitulos.removeAll();
				subfamilia.removeAll();

				for each (var o:Object in familias) {
					o.selected = false;
				}

				if (txtCapitulos.selectedItem) {
					for each (var f:FamiliaArticulos in CatalogoFactory.getInstance().familias) {
						var familia:Object = new Object();
						familia.codigo = Number(f.codigo);
						familia.nombre = f.nombre;

						if (Number(f.codigo) >= 100 && Number(f.codigo) < 10000) {
							if (f.codigo.toString().match(new RegExp("^" + txtCapitulos.selectedItem.codigo, 'i'))) {
								subtitulos.addItem(familia);
							}
						}
					}
					familias.filterFunction = filterCapitulo;
					familias.refresh();
				} else {
					familias.filterFunction = null;
					familias.refresh();
				}
				updateFamilias();

			}

			private function updateFamilias():void {
				txtFamilia.clear();
				var ac:ArrayCollection = new ArrayCollection();
				for each (var o:Object in familias) {
					ac.addItem(o);
				}
				txtFamilia.dataProvider = ac;

			}

			protected function txtSubtitulo_changeHandler(event:Event):void {
				if (familias) {
					familias.filterFunction = null;
					familias.refresh();
				}
				subfamilia.removeAll();

				for each (var o:Object in familias) {
					o.selected = false;
				}
				if (txtSubtitulo.selectedItem) {
					for each (var f:FamiliaArticulos in CatalogoFactory.getInstance().familias) {
						var familia:Object = new Object();
						familia.codigo = Number(f.codigo);
						familia.nombre = f.nombre;

						if (Number(f.codigo) >= 10000 && Number(f.codigo) < 100000) {
							if (f.codigo.toString().match(new RegExp("^" + txtSubtitulo.selectedItem.codigo, 'i'))) {
								subfamilia.addItem(familia);
							}
						}
					}
					familias.filterFunction = filterSubTitulo;
					familias.refresh();

				} else {
					txtCapitulos_changeHandler(event);
				}
				updateFamilias();

			}

			protected function txtSubfamilia_changeHandler(event:Event):void {
				if (familias) {
					familias.filterFunction = null;
					familias.refresh();
				}
				for each (var o:Object in familias) {
					o.selected = false;
				}
				if (txtSubfamilia.selectedItem) {
					familias.filterFunction = filterSubFamilia;
					familias.refresh();
				} else {
					txtSubtitulo_changeHandler(event);
				}

				updateFamilias();
			}


			private function filterCapitulo(item:Object):Boolean {
				var _filter:String = txtCapitulos.selectedItem ? txtCapitulos.selectedItem.codigo : null;
				if (item["codigo"] && _filter) {
					return item.codigo.toString().match(new RegExp("^" + _filter, 'i'));
				}
				return false;

			}

			private function filterSubTitulo(item:Object):Boolean {
				var _filter:String = txtSubtitulo.selectedItem ? txtSubtitulo.selectedItem.codigo : null;
				if (item["codigo"] && _filter) {
					return item.codigo.toString().match(new RegExp("^" + _filter, 'i'));
				}
				return false;
			}

			private function filterSubFamilia(item:Object):Boolean {
				var _filter:String = txtSubfamilia.selectedItem ? txtSubfamilia.selectedItem.codigo : null;
				if (item["codigo"] && _filter) {
					return item.codigo.toString().match(new RegExp("^" + _filter, 'i'));
				}
				return false;
			}


			public function codigoNombreLabelFunction(item:Object):String {
				var label:String = "";

				if (item && item.hasOwnProperty("codigo")) {
					label = item.codigo;
				}
				if (item && item.hasOwnProperty("nombre")) {
					label += "-" + item.nombre;
				}
				return label;
			}

			private function showButton(evt:Event):void {
				btnCloseSearch.visible = filter.text.length > 0;
			}

			protected function filter_creationCompleteHandler(event:FlexEvent):void {
				filter.addEventListener(KeyboardEvent.KEY_UP, keyHandler);
			}



			private function keyHandler(event:KeyboardEvent):void {
				if (event.keyCode == Keyboard.ENTER) {
					filterElements();
				} else if (filter.text == null || filter.text == "") {
					if (articulos != null) {
						articulos.filterFunction = null;
						articulos.refresh();
					}
				}
			}

			private function filterElements():void {
				if (articulos) {
					if (filter.text == null || filter.text == "") {
						articulos.filterFunction = null;
						articulos.refresh();
					} else {
						articulos.filterFunction = filtrarArticulos;
						articulos.refresh();
					}
				}
			}

			private function filtrarArticulos(item:Object):Boolean {
				var _articuloLabel:String = item.codigo + ' ' + item.nombre + ' ' + item.codigoOrigen;
				return sinAcentos(_articuloLabel).match(new RegExp(sinAcentos(filter.text), 'i')) != null;
			}
			
			private function quitarAcentos(texto:String, letraSplit:String, letraCambio:String):String {
				var letras:Array = texto.split(letraSplit);
				var nuevoTexto:String = new String();
				for (var i:int = 0; i < letras.length; i++) {
					nuevoTexto += letras[i];
					nuevoTexto += letraCambio;
				}
				nuevoTexto = nuevoTexto.substring(0, nuevoTexto.length - 1);
				return nuevoTexto;
			}

			private function sinAcentos(textoConAcentos:String):String {
				var texto1:String = textoConAcentos as String;
				texto1 = textoConAcentos.toLowerCase();

				var acentos:Array = new Array("á", "é", "í", "ó", "ú");
				var sinAcentos:Array = new Array("a", "e", "i", "o", "u");

				for (var i:int = 0; i < acentos.length; i++) {
					texto1 = quitarAcentos(texto1, acentos[i], sinAcentos[i]);
				}
				return texto1;
			}


			protected function resetSearch(event:MouseEvent):void {
				btnCloseSearch.visible = false;
				if (articulos == null) {
					return;
				}
				articulos.filterFunction = null;
				articulos.refresh();

				if (articulos.length > 0) {
					listaArticulos.invalidateList();
				}
				filter.text = '';
				filter.setFocus();
			}

			protected function listaArticulos_changeHandler(event:mx.events.ListEvent):void {
				var articuloDTO:ArticuloDTO = listaArticulos.selectedItem as ArticuloDTO;

				dispatchEvent(new ArticuloEvent(ArticuloEvent.ARTICULO_SELECCIONADO, null, articuloDTO));
			}

			protected function listaArticulos_creationCompleteHandler(event:FlexEvent):void {
				refrescarArticulos();
				listaArticulos.addEventListener(ArticuloEvent.BORRAR_ARTICULO, borrarArticulo);
			}

			private function borrarArticulo(event:ArticuloEvent):void {
				articulo = event.articuloDTO;

				var articuloRemObj:RemoteObject = new RemoteObject();
				articuloRemObj.destination = "CreatingRpc";
				articuloRemObj.channelSet = ServerConfig.getInstance().channelSet;
				articuloRemObj.addEventListener(ResultEvent.RESULT, function(event:ResultEvent):void {
						var selectedIndex:int = listaArticulos.selectedIndex;
						var selected:ArticuloDTO = null;

						if (selectedIndex == 0) {
							selected = ArrayCollection(listaArticulos.dataProvider).getItemAt(selectedIndex - 0) as ArticuloDTO;
						} else {
							selected = ArrayCollection(listaArticulos.dataProvider).getItemAt(selectedIndex - 1) as ArticuloDTO;
						}
						refrescarArticulos(null, selected);
					});
				articuloRemObj.addEventListener(FaultEvent.FAULT, handleFault);
				articuloRemObj.showBusyCursor = true;
				articuloRemObj.borrarArticulo(articulo.codigo);
			}

			public function refrescarArticulos(event:Event = null, select:ArticuloDTO = null):void {
				filter.text = "";
				articulos = new ArrayCollection();

				var articuloRemObj:RemoteObject = new RemoteObject();
				articuloRemObj.destination = "CreatingRpc";
				articuloRemObj.channelSet = ServerConfig.getInstance().channelSet;
				articuloRemObj.addEventListener(ResultEvent.RESULT, function(event:ResultEvent):void {
						articulos = event.result as ArrayCollection;
						listaArticulos.dataProvider = sort(articulos, false);

						if (articulos.length > 0) {
							var index:Number = 0;
							if (select) {
								for each (var art:ArticuloDTO in listaArticulos.dataProvider) {
									if (art.codigo == select.codigo) {
										break;
									}
									index++
								}
							}
							listaArticulos.selectedIndex = index;
							callLater(function():void {
									listaArticulos.scrollToIndex(index);
								});
							var articuloDTO:ArticuloDTO = ArrayCollection(listaArticulos.dataProvider).getItemAt(index) as ArticuloDTO;
							dispatchEvent(new ArticuloEvent(ArticuloEvent.ARTICULO_SELECCIONADO, null, articuloDTO));
						}
					});

				articuloRemObj.addEventListener(FaultEvent.FAULT, handleFault);
				articuloRemObj.showBusyCursor = true;

				var codigosFamilias:String = "";
				for each (var familia:Object in familias) {
					codigosFamilias += familia.codigo + ",";
				}
				if (codigosFamilias.length > 0 && txtCapitulos.selectedItem != null) {
					codigosFamilias = codigosFamilias.substring(0, codigosFamilias.length - 1);
				} else {
					codigosFamilias = null;
				}

				if (txtFamilia.selectedItem != null) {
					var f:Object = txtFamilia.selectedItem;
					codigosFamilias = f.codigo;
				}

				var proveedor:String = null;
				if (txtProveedor.selectedItem != null) {
					proveedor = txtProveedor.selectedItem.codigo;
				}

				var query:ArticuloQuery = new ArticuloQuery();
				query.activo = chbActivos.selected;
				query.proveedor = proveedor;
				query.familias = codigosFamilias;

				articuloRemObj.queryArticulos(query);

			}

			private function sort(arrColl:ArrayCollection, isNumeric:Boolean = true):ArrayCollection {
				/* Create the SortField object for the "data" field in the ArrayCollection object, and make sure we do a numeric sort. */
				var dataSortField:SortField = new SortField();
				dataSortField.name = "nombre";
				dataSortField.numeric = isNumeric;

				/* Create the Sort object and add the SortField object created earlier to the array of fields to sort on. */
				var numericDataSort:Sort = new Sort();
				numericDataSort.fields = [dataSortField];

				/* Set the ArrayCollection object's sort property to our custom sort, and refresh the ArrayCollection. */
				arrColl.sort = numericDataSort;
				arrColl.refresh();

				return arrColl;
			}

			private function handleFault(event:FaultEvent):void {
				var message:String = event.fault && event.fault.rootCause && event.fault.rootCause.localizedMessage ? event.fault.rootCause.localizedMessage : null;
				if (!message) {
					message = event.message.toString();
				}				
				Alert.show(message, "Error", 4, null, null, StyleManager.getStyleManager(null).getStyleDeclaration('.icons32').getStyle('ErrorIcon'));
			}

			protected function cmdFiltrar_clickHandler(event:MouseEvent):void {
				refrescarArticulos();

			}

			protected function cmdLimpiar_clickHandler(event:MouseEvent):void {
				txtCapitulos.clear();
				txtFamilia.clear();
				txtSubfamilia.clear();
				txtSubtitulo.clear();
				txtProveedor.clear();

				refrescarArticulos();
			}

			protected function btnSearch_clickHandler(event:MouseEvent):void {
				filterElements();
			}

			public function esVendDist():Boolean {
				var user:Usuario = GeneralOptions.getInstance().loggedUser;
				if (user.permisoId == Usuario.USUARIO_VENDEDOR_DISTRIBUIDOR) {
					return true;
				}
				return false;
			}
		]]>
	</fx:Script>

	<s:Panel width="100%" title="Filtros" dropShadowVisible="false">
		<s:layout>
			<s:VerticalLayout paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" gap="1" />
		</s:layout>

		<s:Panel width="100%" height="100%" title="Familias" styleName="pnlForm" dropShadowVisible="false">
			<s:BorderContainer width="100%" backgroundAlpha=".06" backgroundColor="#6E87B5" borderAlpha="0">
				<s:layout>
					<s:VerticalLayout paddingLeft="5" paddingRight="5" paddingTop="5" />
				</s:layout>
				<s:VGroup width="100%" paddingBottom="10">
					<s:HGroup width="100%" verticalAlign="middle">
						<s:Label width="70" text="Capítulo" />
						<components:MyAutoComplete id="txtCapitulos" width="240" change="txtCapitulos_changeHandler(event)" dataProvider="{ capitulos }" matchType="anyPart" contentBackgroundAlpha="1"
												   prompt="Todos" selectedItemStyleName="{AutoComplete.STYLE_MAC_MAIL}" allowMultipleSelection="false" labelField="nombre"
												   labelFunction="codigoNombreLabelFunction" backspaceAction="remove" allowNewValues="false" dropDownRowCount="10" />
					</s:HGroup>
					<s:HGroup width="100%" verticalAlign="middle">
						<s:Label width="70" text="Subtítulo" />
						<components:MyAutoComplete id="txtSubtitulo" width="240" change="txtSubtitulo_changeHandler(event)" dataProvider="{ subtitulos }" matchType="anyPart" contentBackgroundAlpha="1"
												   prompt="Todos" selectedItemStyleName="{AutoComplete.STYLE_MAC_MAIL}" allowMultipleSelection="false" labelField="nombre"
												   labelFunction="codigoNombreLabelFunction" backspaceAction="remove" allowNewValues="false" dropDownRowCount="10" enabled="{txtCapitulos.selectedItem}" />
					</s:HGroup>
					<s:HGroup width="100%" verticalAlign="middle">
						<s:Label width="70" text="Subfamilia" />
						<components:MyAutoComplete id="txtSubfamilia" width="240" change="txtSubfamilia_changeHandler(event)" dataProvider="{ subfamilia }" matchType="anyPart"
												   contentBackgroundAlpha="1" prompt="Todos" selectedItemStyleName="{AutoComplete.STYLE_MAC_MAIL}" allowMultipleSelection="false" labelField="nombre"
												   labelFunction="codigoNombreLabelFunction" backspaceAction="remove" allowNewValues="false" dropDownRowCount="10" enabled="{txtSubtitulo.selectedItem}" />
					</s:HGroup>
					<s:HGroup width="100%" verticalAlign="middle">
						<s:Label width="70" text="Familia" />
						<components:MyAutoComplete id="txtFamilia" width="240" dataProvider="{ familias }" matchType="anyPart" contentBackgroundAlpha="1" prompt="Todos"
												   selectedItemStyleName="{AutoComplete.STYLE_MAC_MAIL}" allowMultipleSelection="false" labelField="nombre" labelFunction="codigoNombreLabelFunction"
												   backspaceAction="remove" allowNewValues="false" dropDownRowCount="10" />
					</s:HGroup>
				</s:VGroup>
			</s:BorderContainer>
		</s:Panel>
		<s:Panel width="100%" title="Proveedores" styleName="pnlForm" dropShadowVisible="false" minHeight="0" visible="{!esVendDist()}" includeInLayout="{!esVendDist()}">
			<s:BorderContainer width="100%" backgroundAlpha=".06" backgroundColor="#6E87B5" borderAlpha="0" minHeight="0">
				<s:layout>
					<s:VerticalLayout paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5" />
				</s:layout>
				<s:HGroup width="100%" verticalAlign="middle">
					<s:Label width="70" text="Proveedor" />
					<components:MyAutoComplete id="txtProveedor" width="240" backgroundAlpha="1" dataProvider="{ proveedores }" matchType="anyPart" prompt="Todos"
											   selectedItemStyleName="{AutoComplete.STYLE_MAC_MAIL}" allowMultipleSelection="false" labelField="nombre" labelFunction="codigoNombreLabelFunction"
											   backspaceAction="remove" allowNewValues="false" dropDownRowCount="10" />
				</s:HGroup>
			</s:BorderContainer>
		</s:Panel>
		<s:controlBarContent>
			<s:HGroup width="100%" horizontalAlign="right">
				<s:CheckBox id="chbActivos" label="Activos" selected="true" />
				<s:Spacer width="100%" />
				<s:Button id="cmdFiltrar" click="cmdFiltrar_clickHandler(event)" label="Filtrar" enabled="true" toolTip="Filtrar" styleName="filtrarButton" />
				<s:Button id="cmdLimpiar" click="cmdLimpiar_clickHandler(event)" label="Limpiar" toolTip="Limpiar Todos los Campos" styleName="clearButton16" />
			</s:HGroup>
		</s:controlBarContent>
	</s:Panel>
	<s:Panel width="100%" height="100%" backgroundColor="0xDADADA" title="Resultados" dropShadowVisible="false">
		<s:layout>
			<s:VerticalLayout paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5" />
		</s:layout>
		<s:HGroup width="100%" height="28" paddingBottom="0" paddingLeft="0" paddingRight="0" verticalAlign="middle" gap="5">
			<s:Label id="lblFilter" fontSize="12" left="5" text="Buscar " />
			<s:SkinnableContainer width="100%" styleName="filterTextInput">
				<s:layout>
					<s:HorizontalLayout horizontalAlign="center" paddingBottom="1" paddingLeft="2" paddingRight="5" paddingTop="1" verticalAlign="middle" />
				</s:layout>
				<s:TextInput id="filter" width="100%" change="showButton(event)" creationComplete="filter_creationCompleteHandler(event)" styleName="filter" prompt="Ver todos" />
				<s:Button id="btnCloseSearch" width="8" height="8" click="resetSearch(event)" styleName="buttonCloseSearch" visible="false" />
				<s:Button id="btnSearch" width="16" height="16" click="btnSearch_clickHandler(event)" styleName="buttonSearch" />
			</s:SkinnableContainer>
		</s:HGroup>
		<components:RoundedSelectionList id="listaArticulos" width="100%" height="100%" selectionColor="0xfdfdfd" change="listaArticulos_changeHandler(event)"
										 creationComplete="listaArticulos_creationCompleteHandler(event)" selectionDuration="600" useRollOver="false"
										 itemRenderer="biz.fulltime.ui.components.ArticuloLabel" />
	</s:Panel>

</s:VGroup>
