<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:components="components.*" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:util="biz.fulltime.util.*"
		 width="100%" height="100%" creationComplete="group1_creationCompleteHandler(event)" show="group1_showHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import biz.fulltime.event.ProveedorEvent;
			import biz.fulltime.model.Cliente;
			import biz.fulltime.model.Proveedor;
			import biz.fulltime.ui.proveedores.ProveedoresEditor;
			
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.gridClasses.CellPosition;
			
			import util.CatalogoFactory;
			
			[Bindable]
			private var _proveedores:ArrayCollection = CatalogoFactory.getInstance().proveedores;
			
			private var cellPos:CellPosition;
			
			private var dirty:Boolean = true;
			
			private function init():void {
			}
			
			protected override function commitProperties():void {
				super.commitProperties();
				
				if (dirty) {					
					dgProveedores.filterReset();					
					dirty = false;
				}
			}
			
			protected function dg_keyDownHandler(event:KeyboardEvent):void {
				cellPos = dgProveedores.selectedCell;				
				
				if (event.keyCode == Keyboard.F1 || (event.keyCode >= Keyboard.A && event.keyCode <= Keyboard.Z) || (event.keyCode >= Keyboard.NUMBER_0 && event.keyCode <= Keyboard.NUMBER_9) || (event.keyCode >= Keyboard.NUMPAD_0 && event.keyCode <= Keyboard.NUMPAD_9)) { // Se presiono la tecla 'F1' o A-Z o 1-9
					var hlpPanel:HelpPnl = new HelpPnl();
					hlpPanel.addEventListener(CloseEvent.CLOSE, closePnlHandler);
					
					if (cellPos != null) {
						hlpPanel.label = GridColumn(dgProveedores.columns.getItemAt(cellPos.columnIndex)).headerText;
					} else {
						hlpPanel.label = GridColumn(dgProveedores.columns.getItemAt(0)).headerText;
					}
					
					PopUpManager.addPopUp(hlpPanel, this, true);
					PopUpManager.centerPopUp(hlpPanel);
					
				} else if (event.keyCode == Keyboard.ESCAPE) { // Se presiono la tecla 'ESC'
					if (dgProveedores.hasFilter()) {
						dgProveedores.filterReset();
					} else {
						dispatchEvent(new CloseEvent(CloseEvent.CLOSE));	
					}
					
				} else if (event.keyCode == Keyboard.ENTER) { // Se presiono la tecla 'ENTER'
					if (cellPos != null) {
						var selectedItem:Proveedor = dgProveedores.dataProvider.getItemAt(cellPos.rowIndex) as Proveedor;
						dispatchEvent(new ProveedorEvent(ProveedorEvent.PROVEEDOR_SELECCIONADO, selectedItem));
					}
				}
			}
			
			
			private function closePnlHandler(event:CloseEvent):void {
				var helpPnl:HelpPnl = HelpPnl(event.target);
				var filter:String = helpPnl.getValue();
				var colName:String = dgProveedores.columns.getItemAt(cellPos.columnIndex).dataField;
				
				var posX:int = cellPos.columnIndex;
				
				dgProveedores.filter(colName, filter, true);
				
				event.target.removeEventListener(CloseEvent.CLOSE, closePnlHandler);
				PopUpManager.removePopUp(event.target as IFlexDisplayObject);
				
				callLater(function():void {
					dgProveedores.setFocus();
					if (dgProveedores.dataProviderLength > 0) {
						dgProveedores.selectedCell = new CellPosition(0, posX);
					}
					
				});
				
			}
			
			protected function cmdAceptar_clickHandler(event:MouseEvent):void {
				cellPos = dgProveedores.selectedCell;
				if (cellPos != null) {
					var selectedItem:Proveedor = dgProveedores.dataProvider.getItemAt(cellPos.rowIndex) as Proveedor;
					dispatchEvent(new ProveedorEvent(ProveedorEvent.PROVEEDOR_SELECCIONADO, selectedItem));
				}
			}
			
			protected function group1_showHandler(event:FlexEvent):void {
				dgProveedores.setFocus();
			}
			
			protected function group1_creationCompleteHandler(event:FlexEvent):void {
				callLater(function():void {
					dgProveedores.setFocus();
					if (dgProveedores.dataProviderLength > 0) {
						dgProveedores.setSelectedCell(0, 0);
					}
				});
				
			}
			
			private function queryClientes():void {
			}
			
			protected function dgProveedores_doubleClickHandler(event:MouseEvent):void	{
				cellPos = dgProveedores.selectedCell;
				if (cellPos != null) {
					var selectedItem:Proveedor = dgProveedores.dataProvider.getItemAt(cellPos.rowIndex) as Proveedor;
					dispatchEvent(new ProveedorEvent(ProveedorEvent.PROVEEDOR_SELECCIONADO, selectedItem));
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:ArrayList id="cols">
			<s:GridColumn width="70" dataField="codigo" headerText="Código" />
			<s:GridColumn width="160" dataField="nombre" headerText="Nombre" />
			<s:GridColumn width="160" dataField="contacto.ctoRSocial" headerText="Razón Social" />
			<s:GridColumn width="110" dataField="contacto.ctoRUT" headerText="RUT" />
			<s:GridColumn dataField="contacto.ctoDireccion" headerText="Dirección" />
		</s:ArrayList>
	</fx:Declarations>
	
	<s:BorderContainer width="100%" height="100%" backgroundAlpha=".16" backgroundColor="blue" borderAlpha="0">
		<s:Panel width="100%" height="100%" styleName="pntLineasVenta">
			<s:VGroup width="100%" height="100%" horizontalAlign="center">
				<util:FilteredDataGrid id="dgProveedores" width="100%" height="100%" keyDown="dg_keyDownHandler(event)" selectionMode="singleCell" dataProvider="{_proveedores}"
									   borderAlpha="0" columns="{cols}" doubleClickEnabled="true" doubleClick="dgProveedores_doubleClickHandler(event)" >
					
				</util:FilteredDataGrid>
			</s:VGroup>
			
			<s:controlBarContent>
				<s:HGroup width="100%" horizontalAlign="right" paddingBottom="0" paddingTop="0">
					<components:IconButton id="cmdAceptar" click="cmdAceptar_clickHandler(event)" label="Aceptar" styleName="aceptarButton" />
				</s:HGroup>
			</s:controlBarContent>
		</s:Panel>
	</s:BorderContainer>
	
</s:Group>
