<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:components="components.*" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:s="library://ns.adobe.com/flex/spark"
		 width="100%" height="100%" creationComplete="creationCompleteHandler(event)" xmlns:renderers="biz.fulltime.ui.renderers.*" xmlns:components1="biz.fulltime.ui.components.*">
	<fx:Script>
		<![CDATA[
			import biz.fulltime.conf.ServerConfig;
			import biz.fulltime.model.Usuario;
			import biz.fulltime.model.Vendedor;
			
			import com.hillelcoren.components.AutoComplete;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			
			import util.CatalogoFactory;
			import util.ErrorPanel;
			
			private var _usuarioActual:Usuario;
			
			private var error:ErrorPanel;
			
			private var _changeUsuario:Boolean;
			
			[Bindable]
			private var _permisoActual:Object;
						
			[Bindable]
			private var _vendedor:Vendedor;

			
			[Bindable]
			public var lstPermisos:ArrayCollection = new ArrayCollection([
				{value:"5", label:"Taller y mantenimiento"}, 
				{value:"A", label:"Administración"}, 
				{value:"F", label:"Facturación"}, 
				{value:"S", label:"Supervisor"}, 
				{value:"V", label:"Ventas junior"}, 
				{value:"V2", label:"Ventas distribuidor"}, 
				{value:"V3", label:"Ventas senior"},
				{value:"AC", label:"Aliados comerciales"}
			]);
			
			override protected function commitProperties():void {
				super.commitProperties();
				
				if (_changeUsuario) {
					_changeUsuario = false;
					
					_permisoActual = null;
					for each(var p:Object in lstPermisos) {
						if (usuarioActual.permisoId == p.value) {
							_permisoActual = p;	
						}
					}
					
					_vendedor = null;
					if (usuarioActual.venId) {
						for each(var v:Vendedor in CatalogoFactory.getInstance().vendedores) {
							if (usuarioActual.venId && usuarioActual.venId == v.codigo) {
								_vendedor = v;	
								break;
							}
						}						
					}
					if (cmbVendedor) {
						callLater(function():void {
							if (_vendedor) {
								cmbVendedor.selectedItem = _vendedor;
							} else {
								cmbVendedor.clear();	
							}
						});
					}

				}
			}

			
			
			[Bindable]
			public function get usuarioActual():Usuario {
				return _usuarioActual;
			}
			
			public function set usuarioActual(value:Usuario):void {
				_usuarioActual = value;				
				_changeUsuario = true;				
				invalidateProperties();
			}
			
			public function handleFault(event:FaultEvent):void {
				var message:String = event.fault && event.fault.rootCause && event.fault.rootCause.cause ? event.fault.rootCause.cause.localizedMessage : null;
				if (!message) {
					message = event.message.toString();
				}				
				Alert.show(message, "Error");
			}
			
			protected function lstTUsuarios_changeHandler(event:IndexChangeEvent):void {
				usuarioActual = lstTUsuario.selectedItem as Usuario;
			}
			
			protected function cmdCerrar_clickHandler(event:MouseEvent):void {
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
				
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				if (lstTUsuario.dataProvider.length > 0) {
					callLater(function():void {
						lstTUsuario.selectedIndex = 0;
						usuarioActual = lstTUsuario.dataProvider.getItemAt(0) as Usuario;
					});
				}
				
				CatalogoFactory.getInstance().addEventListener("changeUsuarios", function(evt:Event):void {
					lstTUsuario.dataProvider = CatalogoFactory.getInstance().usuarios;
					callLater(function():void {
						for each (var item:Usuario in CatalogoFactory.getInstance().usuarios) {
							if (item.codigo == _usuarioActual.codigo) {
								lstTUsuario.selectedItem = item;
							}
						}
					});
				});
				
				
			}
			
			protected function cmdAplicar_clickHandler(event:MouseEvent):void {
				var remObj:RemoteObject = new RemoteObject();
				remObj.destination = "CreatingRpc";
				remObj.channelSet = ServerConfig.getInstance().channelSet;
				remObj.addEventListener(ResultEvent.RESULT, resultGuardar);
				remObj.addEventListener(FaultEvent.FAULT, handleFault);
				
				remObj.showBusyCursor = true;
			
				_usuarioActual.nombre = txtNombre.text;
				_usuarioActual.usuEmail = txtEmail.text;
				_usuarioActual.usuNotas = txtNotas.text;				
				_usuarioActual.usuTipo = chbSupervisor.selected ? "S" : "N";
				_usuarioActual.permisoId = chbSupervisor.selected ? "S" : ddlPermiso.selectedItem.value;
				
				if (_permisoActual && (_permisoActual.value == 'AC' || _permisoActual.value == 'V' || _permisoActual.value == 'V2' || _permisoActual.value == 'V3')) {
					if (!cmbVendedor.selectedItem) {
						Alert.show("Para los usuarios vendedores es necesario ingresar un vendedor");
						return;
					}
				}				
				_usuarioActual.venId = cmbVendedor.selectedItem ? cmbVendedor.selectedItem.codigo : null;

				remObj.updateUsuario(_usuarioActual);
			}
			
			protected function cmdCancelar_clickHandler(event:MouseEvent):void {
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
				
			}
			
			private function resultGuardar(event:ResultEvent):void {
				msgLabel.text = "Usuario guardado con éxito."
				msgBox.visible = true;
				msgBox.includeInLayout = true;
				
				CatalogoFactory.getInstance().loadCatalogo("Usuario");
				
				setTimeout(function():void {
					msgBox.visible = false;
					msgBox.includeInLayout = false;
				}, 3000);
				
			}
			
			private function fixLabel(item_obj:Object):String {
				var label_str:String = item_obj.codigo + " - " + item_obj.nombre;
				return label_str;
			}
			
			protected function lstTUsuario_selectionChangeHandler(event:GridSelectionEvent):void {
				usuarioActual = lstTUsuario.selectedItem as Usuario;
			}
			
			public function codigoNombreLabelFunction(item:Object):String {
				var label:String;
				if (item && item.hasOwnProperty("codigo")) {
					label = item.codigo;
				}
				if (item && item.hasOwnProperty("nombre")) {
					label += " - " + item.nombre;
				}
				return label;
			}			
			
			protected function ddlPermiso_changeHandler(event:IndexChangeEvent):void {
				_permisoActual = ddlPermiso.selectedItem;
			}
						
			protected function chbSupervisor_changeHandler(event:Event):void {
				if (chbSupervisor.selected) {
					_permisoActual = lstPermisos.getItemAt(3); 	
				}
			}
			
		]]>
	</fx:Script>

	<fx:Declarations>
		<fx:Component id="dropDownItemRenderer">
			<renderers:CodigoNombreItemRenderer />
		</fx:Component>		
	</fx:Declarations>

	<s:Panel width="100%" height="100%" creationComplete="creationCompleteHandler(event)" styleName="pntLineasVenta">
		<s:HGroup width="100%" height="100%" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" gap="0">
			<s:Panel width="300" height="100%" backgroundAlpha=".5" borderColor="#B5A7A7"
					 borderVisible="true" dropShadowVisible="false" title="Usuarios">
				
				<s:BorderContainer width="100%" height="100%" backgroundAlpha=".16" backgroundColor="#6E87B5" borderAlpha="0">
					<s:layout>
						<s:VerticalLayout />
					</s:layout>
					
					<s:DataGrid id="lstTUsuario" width="100%" height="100%" selectionChange="lstTUsuario_selectionChangeHandler(event)" dataProvider="{CatalogoFactory.getInstance().usuarios}">
						<s:columns>
							<s:ArrayList>
								<s:GridColumn headerText="Código" width="55" dataField="codigo"/>
								<s:GridColumn headerText="Nombre" dataField="nombre"/>
							</s:ArrayList>
						</s:columns>
					</s:DataGrid>
				</s:BorderContainer>
				
			</s:Panel>
			
			<s:Panel width="100%" height="100%" backgroundAlpha=".5" borderColor="#CEBFBF"
					 borderVisible="true" dropShadowVisible="false" title="{usuarioActual.nombre}" >
				<s:BorderContainer width="100%" height="100%" backgroundAlpha=".06" backgroundColor="#6E87B5" borderAlpha="0">
					<s:layout>
						<s:VerticalLayout />
					</s:layout>
					<s:Form width="100%" height="100%">
						<s:layout>
							<s:FormLayout gap="-12" />
						</s:layout>
						<s:FormItem label="Código">
							<s:TextInput id="txtCodigo" width="100" textAlign="left" text="{usuarioActual.codigo}" enabled="false"/>
						</s:FormItem>
						<s:FormItem width="100%" label="Nombre">
							<s:TextInput id="txtNombre" width="100%" textAlign="left" text="{usuarioActual.nombre}" />
						</s:FormItem>
						<s:FormItem width="100%" label="Email">
							<s:TextInput id="txtEmail" width="100%" textAlign="left" text="{usuarioActual.usuEmail}" />
						</s:FormItem>
						<s:FormItem label="Activo">
							<s:CheckBox width="100" selected="{usuarioActual.usuActivo == 'S'}" enabled="false"/>
						</s:FormItem>
						<s:FormItem label="Supervisor">
							<s:CheckBox id="chbSupervisor" width="100" selected="{usuarioActual.usuTipo == 'S'}" change="chbSupervisor_changeHandler(event)"/>
						</s:FormItem>
						<s:FormItem label="Permiso" visible="{!chbSupervisor.selected}">
							<s:DropDownList id="ddlPermiso" width="100%" textAlign="left" labelField="label" dataProvider="{lstPermisos}" selectedItem="{_permisoActual}" change="ddlPermiso_changeHandler(event)" />
						</s:FormItem>
						<s:FormItem label="Vendedor">
							<components1:MyAutoComplete id="cmbVendedor" width="100%" textAlign="left"
													   dataProvider="{ CatalogoFactory.getInstance().vendedores }" labelField="nombre" matchType="anyPart" prompt="Seleccionar Vendedor"
													   allowNewValues="false" selectedItemStyleName="{ AutoComplete.STYLE_MAC_MAIL }" allowDuplicates="false"
													   allowMultipleSelection="false" labelFunction="codigoNombreLabelFunction"
													   backspaceAction="focus" next_focus="{txtNotas}" previous_focus="{ddlPermiso}" dropShadowVisible="true"
													   dropDownItemRenderer="{ dropDownItemRenderer }" selectedItem="{_vendedor}"/>
						</s:FormItem>
						
						<s:FormItem label="Notas">
							<s:TextArea id="txtNotas" width="100%" height="120" text="{usuarioActual.usuNotas}" />
						</s:FormItem>
					</s:Form>
					<s:Spacer height="100%" />
					
					<s:BorderContainer id="msgBox" width="100%" visible="false" includeInLayout="false" backgroundColor="0x333333">
						<s:layout>
							<s:HorizontalLayout paddingTop="10" paddingBottom="5" horizontalAlign="center"/>
						</s:layout>
						<s:Label id="msgLabel" text="" width="100%" color="white" maxDisplayedLines="1" fontSize="14" fontWeight="normal" textAlign="center" paddingBottom="5"/>
					</s:BorderContainer>
				</s:BorderContainer>
				<s:controlBarContent>
					<s:HGroup width="100%" horizontalAlign="right" verticalAlign="middle" paddingBottom="5" paddingRight="5" paddingTop="5">
						<mx:Image id="loader1" source="@Embed(source='assets/general/logo_oscuro.gif')" alpha=".5" scaleX=".20" scaleY=".20" />
						
						<s:Spacer width="100%" />
						<s:Button id="cmdAplicar" click="cmdAplicar_clickHandler(event)" label="Aplicar" styleName="aplicarButton16" />
						<s:Button id="cmdCancelar" click="cmdCancelar_clickHandler(event)" label="Cerrar" styleName="closeButton16"/>
					</s:HGroup>
				</s:controlBarContent>
			</s:Panel>
		</s:HGroup>
		
	</s:Panel>
	
</s:Group>
