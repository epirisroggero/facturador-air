<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:components="biz.fulltime.ui.components.*" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:renderers="biz.fulltime.ui.renderers.*"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  width="100%" height="100%" xmlns:components1="components.*">

	<fx:Script>
		<![CDATA[
			import biz.fulltime.conf.ServerConfig;
			import biz.fulltime.event.ReciboEvent;
			import biz.fulltime.model.Banco;
			import biz.fulltime.model.Caja;
			import biz.fulltime.model.Cliente;
			import biz.fulltime.model.Comprobante;
			import biz.fulltime.model.Documento;
			import biz.fulltime.model.Moneda;
			
			import com.hillelcoren.components.AutoComplete;
			
			import mx.collections.ArrayCollection;
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			
			import spark.events.IndexChangeEvent;
			
			import util.CatalogoFactory;
			import util.ErrorPanel;

			private var _banco:Banco;
			
			private var _cliente:Cliente;

			private var _recibo:Documento;
			
			private var _documento:Documento;
			
			private var _formaPagoTipo:Number;
			
			[Bindable]
			public var modeStr:String = "Cheques recibidos";

		
			[Bindable]
			public function get banco():Banco {
				return _banco;
			}

			public function set banco(value:Banco):void {
				_banco = value;
			}

			[Bindable]
			public function get recibo():Documento {
				return _recibo;
			}

			public function set recibo(value:Documento):void {
				_recibo = value;
			}

			public function codigoNombreLabelFunction(item:Object):String {
				var label:String = "";
				if (item && item.hasOwnProperty("codigo")) {
					label = item.codigo;
				}
				if (item && item.hasOwnProperty("nombre")) {
					label += " - " + item.nombre;
				}

				return label.toUpperCase();
			}

			[Bindable]
			public function get documento():Documento {
				return _documento;
			}
			
			public function set documento(value:Documento):void {
				_documento = value;
			}
			
			public function clienteLabelFunction(item:Object):String {
				var client:Cliente = item as Cliente;

				var label:String;
				if (item && item.hasOwnProperty("codigo")) {
					label = item.codigo;
				}
				if (item && item.hasOwnProperty("nombre")) {
					label += " - " + item.nombre;
				}
				if (client && client.razonSocial != client.nombre) {
					label += " [" + client.razonSocial + "] ";
				}

				return label;
			}

			public function monedaLabelFunction(item:Object):String {
				var moneda:Moneda = item as Moneda;
				
				var label:String;
				if (moneda) {
					label = moneda.codigo + " - " + moneda.simbolo;
				}
				
				return label;
			}

			protected function cmdAceptar_clickHandler(event:MouseEvent):void {
				documento.bancoIdDoc = banco.codigo;
				documento.cliente = cliente;
				documento.estado = "C";
					
				var remObj:RemoteObject = new RemoteObject();
				remObj.destination = "CreatingRpc";
				remObj.showBusyCursor = true;
				remObj.channelSet = ServerConfig.getInstance().channelSet;
				remObj.addEventListener(FaultEvent.FAULT, handleFault);
				remObj.addEventListener(ResultEvent.RESULT, function(event:ResultEvent):void {
					recibo = event.result as Documento;
					
					var reciboEvent:ReciboEvent = new ReciboEvent(ReciboEvent.RECIBO_MODIFICADO);
					reciboEvent.recibo = recibo;
					
					dispatchEvent(reciboEvent);
				});
				
				remObj.altaDocValores(documento, recibo.docId);
			}
			

			protected function cmdCancel_clickHandler(event:MouseEvent):void {
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}
			
			[Bindable]
			public function get cliente():Cliente {
				return _cliente;
			}

			public function set cliente(value:Cliente):void {
				for each (var c:Cliente in CatalogoFactory.getInstance().clientes)  {
					if (c.codigo == value.codigo) {
						_cliente = c;		
					}
				}
			}

			public function handleFault(event:FaultEvent):void {
				var message:String = (event.fault && event.fault.rootCause) 
					? (event.fault.rootCause.message ? event.fault.rootCause.message : "") 
					: null;
				if (!message) {
					message = event.message.toString();
				}				
				var errorPnl:ErrorPanel = new ErrorPanel();
				errorPnl.type = 0;
				errorPnl.showButtons = true;
				errorPnl.errorText = message;
				errorPnl.detailsText = event.fault.getStackTrace();
				
				var helpWindow:TitleWindow = new TitleWindow();
				helpWindow.title = "Error";
				helpWindow.width = 640;
				
				PopUpManager.addPopUp(helpWindow, this, true);
				PopUpManager.centerPopUp(helpWindow);
				
				helpWindow.y = 120;
				helpWindow.addElement(errorPnl);
				
				helpWindow.addEventListener(CloseEvent.CLOSE, function():void {
					PopUpManager.removePopUp(helpWindow as IFlexDisplayObject);
				});
				errorPnl.addEventListener(CloseEvent.CLOSE, function():void {
					PopUpManager.removePopUp(helpWindow as IFlexDisplayObject);
				});
			}
			
			protected function ddlCaja_changeHandler(event:IndexChangeEvent):void {
				var caja:Caja = ddlCaja.selectedItem as Caja;
				documento.cajaId = caja ? new Number(caja.codigo) : 1;
				
			}
			
		]]>
	</fx:Script>

	<fx:Declarations>
		<fx:Component id="dropDownItemRenderer">
			<renderers:CodigoNombreItemRenderer />
		</fx:Component>

	</fx:Declarations>
	<s:Panel width="100%" height="100%" title="{documento.comprobante.codigo}-{documento.comprobante.nombre}"
			 backgroundAlpha="0.85" backgroundColor="0xfafafa">
		<s:VGroup width="100%" height="100%" horizontalAlign="left" gap="0">
			<s:HGroup width="100%" paddingBottom="10" paddingLeft="20" paddingRight="20" paddingTop="10" gap="10">
				<s:VGroup width="80">
					<s:Label text="Serie" />
					<s:TextInput id="txtSerie" width="100%" text="@{documento.serie}"/>
				</s:VGroup>
				<s:VGroup width="140">
					<s:Label text="Número" />
					<components1:MyTextInput id="txtNumero" width="100%" text="@{documento.numero}"/>
				</s:VGroup>
				<s:VGroup width="100">
					<s:Label text="Vencimiento" />
					<mx:DateField id="dfVencimiento" width="100%" selectedDate="@{documento.fechaDoc}" />
				</s:VGroup>
				<s:VGroup width="100">
					<s:Label text="Emisión" />
					<mx:DateField id="dfEmision" width="100%" selectedDate="@{documento.fechaEmision}"/>
				</s:VGroup>
				<s:VGroup width="100%">
					<s:Label text="Moneda" />
					<components:MyAutoComplete id="cmbMoney" width="100%" height="24" fontSize="14" textAlign="left" dataProvider="{ CatalogoFactory.getInstance().monedas }" labelField="nombre"
											   matchType="anyPart" allowNewValues="false" selectedItemStyleName="{ AutoComplete.STYLE_MAC_MAIL }" allowDuplicates="false" allowMultipleSelection="false"
											   allowEditingNewValues="false" dropDownItemRenderer="{ dropDownItemRenderer }" labelFunction="monedaLabelFunction" backspaceAction="focus"
											   dropDownRowCount="{CatalogoFactory.getInstance().monedas.length}" selectedItem="@{documento.moneda}" next_focus="{txtConcepto}" previous_focus="{dfEmision}" />
					
				</s:VGroup>
			</s:HGroup>
			<s:Form width="100%" height="100%">
				<s:layout>
					<s:FormLayout gap="-12" />
				</s:layout>
				<s:FormItem label="Concepto" width="100%">
					<s:TextInput id="txtConcepto" width="100%" text="@{documento.concepto}"/>
				</s:FormItem>
				<s:FormItem label="Banco" width="100%">
					<components:MyAutoComplete id="cmbBanco" width="100%" height="24" fontSize="14" textAlign="left" dataProvider="{ CatalogoFactory.getInstance().bancos }" labelField="nombre"
											   matchType="anyPart" allowNewValues="false" selectedItemStyleName="{ AutoComplete.STYLE_MAC_MAIL }" allowDuplicates="false" allowMultipleSelection="false"
											   allowEditingNewValues="false" dropDownItemRenderer="{ dropDownItemRenderer }" labelFunction="codigoNombreLabelFunction" backspaceAction="focus"
											   dropDownRowCount="{CatalogoFactory.getInstance().bancos.length}" selectedItem="@{banco}" next_focus="{cmbCliente}" previous_focus="{txtConcepto}" />
				</s:FormItem>
				<s:FormItem label="Cliente" width="100%">
					<components:MyAutoComplete id="cmbCliente" width="100%" textAlign="left" dataProvider="{ CatalogoFactory.getInstance().clientes }" labelField="nombre" matchType="anyPart"
											   prompt="Ingrese cliente" allowNewValues="false" selectedItemStyleName="{ AutoComplete.STYLE_MAC_MAIL }" allowDuplicates="false" allowMultipleSelection="false"
											   allowEditingNewValues="false" dropDownItemRenderer="{ dropDownItemRenderer }" labelFunction="clienteLabelFunction" backspaceAction="focus"
											   next_focus="{txtTitular}" dropDownWidth="480" dropDownRowCount="10" selectedItem="@{cliente}" />
					
				</s:FormItem>
				<s:FormItem label="Titular" width="100%">
					<s:TextInput id="txtTitular" width="100%" text="@{documento.titular}"/>
				</s:FormItem>
				<s:FormItem label="Caja">
					<s:DropDownList id="ddlCaja" dataProvider="{CatalogoFactory.getInstance().cajas}" labelField="nombre" width="100%" selectedIndex="0" change="ddlCaja_changeHandler(event)"/>
				</s:FormItem>
				<s:FormItem label="Total">
					<components1:MyTextInput id="txtTotal" text="@{documento.total}" width="240" textAlign="right" permitirNegativos="false" />
				</s:FormItem>
			</s:Form>
		</s:VGroup>
		

		<s:controlBarContent>
			<s:HGroup width="100%" horizontalAlign="right" paddingBottom="0" paddingTop="0">
				<mx:Image id="loader1" source="@Embed(source='assets/general/logo_oscuro.gif')" alpha=".5" scaleX=".25" scaleY=".25" />
				<s:Spacer width="100%" />
				<s:Button id="cmdAceptar" width="110" click="cmdAceptar_clickHandler(event)" styleName="aceptarButton" label="Confirmar" focusEnabled="true" toolTip="Confirmar"/>
				<s:Button id="cmdCancel" width="110" click="cmdCancel_clickHandler(event)" styleName="cancelarButton" label="Cerrar" focusEnabled="true" toolTip="Cerrar" />
				
			</s:HGroup>
		</s:controlBarContent>
	</s:Panel>


</s:VGroup>
