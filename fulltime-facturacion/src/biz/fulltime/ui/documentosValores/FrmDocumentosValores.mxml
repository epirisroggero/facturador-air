<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:s="library://ns.adobe.com/flex/spark"
		 width="100%" height="100%" xmlns:components="biz.fulltime.ui.components.*" xmlns:forms="biz.fulltime.ui.forms.*" xmlns:components1="components.*">

	<fx:Script>
		<![CDATA[
			import biz.fulltime.conf.GeneralOptions;
			import biz.fulltime.model.Documento;
			import biz.fulltime.model.DocumentoFormaPago;
			import biz.fulltime.model.FormaPago;
			import biz.fulltime.model.Moneda;
			import biz.fulltime.model.Usuario;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.managers.ISystemManager;
			import mx.managers.PopUpManager;
			
			import spark.collections.Sort;
			import spark.collections.SortField;
			import spark.components.TitleWindow;
			
			import util.CatalogoFactory;

			private var _documentosValores:ArrayCollection;
			
			[Bindable]
			private var _documentosValoresAux:ArrayCollection= new ArrayCollection();

			private var _recibo:Documento;
			
			[Bindable]
			private var importeTotal:BigDecimal = BigDecimal.ZERO;
			
			[Bindable]
			private var netoComprobante:BigDecimal = BigDecimal.ZERO;
			
			private var _cotizacion:BigDecimal = BigDecimal.ZERO;

			
			[Bindable]
			public function get cotizacion():BigDecimal {
				return _cotizacion;
			}

			public function set cotizacion(value:BigDecimal):void {
				_cotizacion = value;
			}

			public function set documentosValores(value:ArrayCollection):void {
				_documentosValores = sort(value, true);
				
				_documentosValoresAux = new ArrayCollection();
				for each (var e:DocumentoFormaPago in _documentosValores) {
					_documentosValoresAux.addItem(e);
					e.numero = _documentosValoresAux.length;
				}
				
			}

			protected function cmdCancel_clickHandler(event:MouseEvent):void {
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
				
			}
			
			protected function dgDocumentosValores_doubleClickHandler(event:MouseEvent):void {
				// TODO Auto-generated method stub
				
			}
			
			protected function dgDocumentosValores_keyDownHandler(event:KeyboardEvent):void {
				// TODO Auto-generated method stub
				
			}

			[Bindable]
			public function get recibo():Documento {
				return _recibo;
			}

			public function set recibo(value:Documento):void {
				_recibo = value;
				
				if (!_recibo.pagos) {
					_recibo.pagos = new ArrayCollection();
				}
				
				importeTotal = BigDecimal.ZERO;
				netoComprobante = _recibo.getDocRecNeto();
				
				documentosValores = _recibo.pagos;
				
				//_documento.facturasVinculadas
				
				calcularTotales();
			}
			
			public function calcularTotales():void {
				importeTotal = BigDecimal.ZERO;
				for each (var formaPago:DocumentoFormaPago in _documentosValoresAux) {
					if (!formaPago.selected) {
						importeTotal = importeTotal.add(new BigDecimal(formaPago.total ? formaPago.total : BigDecimal.ZERO));
					}
				}
				
			}
			
			
			protected function cmdCheques_clickHandler(event:MouseEvent):void {
				var window:TitleWindow = new TitleWindow();
				window.title = "Cheques recibidos";
				window.width = 900;
				window.height = 500;

				window.addEventListener(CloseEvent.CLOSE, function closeHandler(event:Event):void {
					PopUpManager.removePopUp(window as IFlexDisplayObject);
					window = null;
				});
				
				var lstDocumentosValores:ListDocumentosValores = new ListDocumentosValores();
				lstDocumentosValores.formaPagoTipo = 43; // Cheque recibido
				lstDocumentosValores.recibo = recibo;
				lstDocumentosValores.cliente = recibo.cliente;
				
				window.addElement(lstDocumentosValores);
				
				lstDocumentosValores.addEventListener(CloseEvent.CLOSE, function closeHandler(event:Event):void {
					PopUpManager.removePopUp(window as IFlexDisplayObject);
					window = null;
				});
			
				
				PopUpManager.addPopUp(window, DisplayObject(FlexGlobals.topLevelApplication), true);
				PopUpManager.centerPopUp(window);
								
				window.closeButton.visible = true;
				
			}
			
			protected function cmdTarjetas_clickHandler(event:MouseEvent):void {
				var window:TitleWindow = new TitleWindow();
				window.title = "Tarjetas recibidas";
				window.width = 900;
				window.height = 500;

				window.addEventListener(CloseEvent.CLOSE, function closeHandler(event:Event):void {
					PopUpManager.removePopUp(window as IFlexDisplayObject);
					window = null;
				});
				
				var lstDocumentosValores:ListTarjetasRecibidas = new ListTarjetasRecibidas();
				lstDocumentosValores.formaPagoTipo = 44; // Tarjeta
				lstDocumentosValores.recibo = recibo;
				lstDocumentosValores.cliente = recibo.cliente;
				
				window.addElement(lstDocumentosValores);
		
				PopUpManager.addPopUp(window, DisplayObject(FlexGlobals.topLevelApplication), true);
				PopUpManager.centerPopUp(window);
				
				
				window.closeButton.visible = true;
			}
			
			protected function cmdDocumentos_clickHandler(event:MouseEvent):void {
				var window:TitleWindow = new TitleWindow();
				window.title = "Documentos recibidos";
				window.width = 900;
				window.height = 500;
				
				window.addEventListener(CloseEvent.CLOSE, function closeHandler(event:Event):void {
					PopUpManager.removePopUp(window as IFlexDisplayObject);
					window = null;
				});
				
				var lstDocumentosValores:ListDocumentosValores = new ListDocumentosValores();
				lstDocumentosValores.formaPagoTipo = 45; // Cheque recibido
				lstDocumentosValores.recibo = recibo;
				lstDocumentosValores.cliente = recibo.cliente;
				
				window.addElement(lstDocumentosValores);
				
				PopUpManager.addPopUp(window, parent, true);
				PopUpManager.centerPopUp(window);
				
				window.closeButton.visible = true;
			}
			
			protected function cmdBanco_clickHandler(event:MouseEvent):void {
				var window:TitleWindow = new TitleWindow();
				window.title = "Ingresos bancarios";
				window.width = 900;
				window.height = 500;

				window.addEventListener(CloseEvent.CLOSE, function closeHandler(event:Event):void {
					PopUpManager.removePopUp(window as IFlexDisplayObject);
					window = null;
				});
				
				var lstDocumentosValores:ListDocumentosValores = new ListDocumentosValores();
				lstDocumentosValores.formaPagoTipo = 51; // Cheque recibido
				lstDocumentosValores.recibo = recibo;
				lstDocumentosValores.cliente = recibo.cliente;
				
				window.addElement(lstDocumentosValores);
				
				lstDocumentosValores.addEventListener(CloseEvent.CLOSE, function closeHandler(event:Event):void {
					PopUpManager.removePopUp(window as IFlexDisplayObject);
					window = null;
				});
				
				
				PopUpManager.addPopUp(window, parent, true);
				PopUpManager.centerPopUp(window);
				
				window.closeButton.visible = true;
			}
						
				
			protected function cmdNuevo_clickHandler(event:MouseEvent):void {
				var docFormaPago:DocumentoFormaPago = new DocumentoFormaPago(_recibo, false);
				docFormaPago.formaPago =  CatalogoFactory.getInstance().formasPago.getItemAt(0) as FormaPago;
				
				for each (var moneda:Moneda in CatalogoFactory.getInstance().monedas) {
					if (moneda.codigo == _recibo.moneda.codigo) {
						docFormaPago.moneda = _recibo.moneda;
						break;
					}
				}
				_documentosValoresAux.addItem(docFormaPago);
				
				docFormaPago.numero = _documentosValoresAux.length;
				_documentosValoresAux = sort(_documentosValoresAux, true);
			}
			
			protected function cmdAceptar_clickHandler(event:MouseEvent):void {
				_documentosValores.removeAll();
				for each (var formaPago:DocumentoFormaPago in _documentosValoresAux) {
					if (!formaPago.selected) {
						_documentosValores.addItem(formaPago);
						formaPago.numero = _documentosValores.length;
					}
				}
				
				_documentosValoresAux.removeAll();
				for each (var fPago:DocumentoFormaPago in _documentosValores) {
					_documentosValoresAux.addItem(fPago);
				}
				
				_documentosValoresAux = sort(_documentosValoresAux, true);
				
				if (importeTotal.compareTo(netoComprobante) != 0) {
					Alert.show("Los totales no suman lo mismo que el total del comprobante. (" + importeTotal + " != " + netoComprobante + ")", "InformaciÃ³n"); 
				}
				
				dispatchEvent(new Event("save_documentos_y_valores"));
			}
			
			private function sort(arrColl:ArrayCollection, isNumeric:Boolean = true):ArrayCollection {
				/* Create the SortField object for the "data" field in the ArrayCollection object, and make sure we do a numeric sort. */
				var dataSortField:SortField = new SortField();
				dataSortField.name = "numero";
				dataSortField.numeric = isNumeric;
				
				/* Create the Sort object and add the SortField object created earlier to the array of fields to sort on. */
				var numericDataSort:Sort = new Sort();
				numericDataSort.fields = [dataSortField];
				
				/* Set the ArrayCollection object's sort property to our custom sort, and refresh the ArrayCollection. */
				arrColl.sort = numericDataSort;
				arrColl.refresh();
				
				return arrColl;
			}
			
			protected function hasPerm():Boolean {
				if (GeneralOptions.getInstance().loggedUser.esSupervisor() 
					|| GeneralOptions.getInstance().loggedUser.permisoId == Usuario.USUARIO_ADMINISTRADOR
					|| GeneralOptions.getInstance().loggedUser.permisoId == Usuario.USUARIO_FACTURACION) {
					
					return true;
				}
				
				return false;
			}

			
			
						
		]]>
	</fx:Script>

	<fx:Declarations>
		<s:ArrayList id="cols">
			<s:GridColumn width="40" dataField="selected" headerText="" rendererIsEditable="true">
				<s:itemRenderer>
					<fx:Component>
						<s:GridItemRenderer>
							<fx:Script>
								<![CDATA[
									import biz.fulltime.model.DocumentoFormaPago;

									protected function checkBox_changeHandler(event:Event):void {
										DocumentoFormaPago(data).selected = checkBox.selected;
										
										outerDocument.calcularTotales();
									}
								]]>
							</fx:Script>

							<s:VGroup width="100%" height="100%" horizontalAlign="center" paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2" verticalAlign="middle">
								<s:CheckBox id="checkBox" x="5" y="5" verticalCenter="0" change="checkBox_changeHandler(event)" selected="{DocumentoFormaPago(data).selected}" />
							</s:VGroup>
						</s:GridItemRenderer>

					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>

			<s:GridColumn dataField="formaPago" headerText="Documento" rendererIsEditable="true">
				<s:itemRenderer>
					<fx:Component>
						<s:GridItemRenderer>
							<fx:Script>
								<![CDATA[
									import biz.fulltime.model.DocumentoFormaPago;
									import biz.fulltime.model.FormaPago;
									
									import spark.events.IndexChangeEvent;
									
									import util.CatalogoFactory;
									
									public function codigoNombreLabelFunction(item:Object):String {
										var label:String = "";
										
										if (item && item.hasOwnProperty("codigo")) {
											label = item.codigo;
										}
										if (item && item.hasOwnProperty("nombre")) {
											label += " - " + item.nombre;
										}
										return label;
									}
									
									public override function set data(value:Object):void {
										super.data = value;
										
										if (!value) {
											return;
										}
										
										if (DocumentoFormaPago(data).formaPago) {
											for each (var formaPago:FormaPago in CatalogoFactory.getInstance().formasPago) {
												if (formaPago.codigo == DocumentoFormaPago(data).formaPago.codigo) {
													ddlFormaPago.selectedItem = formaPago;
													break;
												}
											}
										}										
									}
									
									protected function ddlDocumento_changeHandler(event:IndexChangeEvent):void {
										var formaPago:FormaPago = ddlFormaPago.selectedItem as FormaPago;
										if (formaPago != null) {
											DocumentoFormaPago(data).formaPago = formaPago;
										} else {
											DocumentoFormaPago(data).formaPago = CatalogoFactory.getInstance().formasPago.getItemAt(0) as FormaPago;
										}
										
									}
									
								]]>
							</fx:Script>
							<s:HGroup width="100%" height="100%" paddingLeft="2" paddingRight="2" paddingTop="2" paddingBottom="2">
								<s:DropDownList id="ddlFormaPago" width="100%" height="100%" dataProvider="{CatalogoFactory.getInstance().formasPago}" textAlign="left" 
												labelFunction="codigoNombreLabelFunction" selectedItem="{DocumentoFormaPago(data).formaPago}" change="ddlDocumento_changeHandler(event)"/>
							</s:HGroup>

						</s:GridItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
			
			<s:GridColumn width="120" dataField="moneda" headerText="Moneda" rendererIsEditable="true">
				<s:itemRenderer>
					<fx:Component>
						<s:GridItemRenderer>
							<fx:Script>
								<![CDATA[
									import spark.events.IndexChangeEvent;
									import biz.fulltime.model.Articulo;
									import biz.fulltime.model.DocumentoFormaPago;
									import biz.fulltime.model.LineaDocumento;
									import biz.fulltime.model.Moneda;
									
									import com.hillelcoren.components.AutoComplete;
									
									import mx.events.FlexEvent;
									
									import spark.components.DataGrid;
									
									import util.CatalogoFactory;
																		
									public function codigoNombreLabelFunction(item:Object):String {
										var label:String = "";
										
										if (item && item.hasOwnProperty("codigo")) {
											label = item.codigo;
										}
										if (item && item.hasOwnProperty("simbolo")) {
											label += " - " + item.simbolo;
										}
										return label;
									}
									
									public override function set data(value:Object):void {
										super.data = value;
										
										if (!value) {
											return;
										}
										
										if (DocumentoFormaPago(data).moneda) {
											for each (var moneda:Moneda in CatalogoFactory.getInstance().monedas) {
												if (moneda.codigo == DocumentoFormaPago(data).moneda.codigo) {
													ddlMoneda.selectedItem = moneda;
													break;
												}
											}
										}										
									}

									protected function ddlMoneda_changeHandler(event:IndexChangeEvent):void {
										var moneda:Moneda = ddlMoneda.selectedItem as Moneda;
										if (moneda != null) {
											DocumentoFormaPago(data).moneda = moneda;
										} else {
											DocumentoFormaPago(data).moneda = CatalogoFactory.getInstance().monedas.getItemAt(0) as Moneda;
										}
										DocumentoFormaPago(data).updateTotal();
										
										outerDocument.calcularTotales();
										
									}
									
								]]>
							</fx:Script>
							<s:HGroup width="100%" height="100%" paddingLeft="2" paddingRight="2" paddingTop="2" paddingBottom="2">
								<s:DropDownList id="ddlMoneda" width="100%" height="100%"  dataProvider="{CatalogoFactory.getInstance().monedas}" textAlign="left" 
												labelFunction="codigoNombreLabelFunction" change="ddlMoneda_changeHandler(event)" />
								
								
							</s:HGroup>
						</s:GridItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>

			<s:GridColumn width="120" headerText="Monto" rendererIsEditable="true">
				<s:itemRenderer>
					<fx:Component>
						<s:GridItemRenderer>
							<fx:Script>
								<![CDATA[
									import biz.fulltime.model.DocumentoFormaPago;
									
									import spark.events.IndexChangeEvent;
									
									protected function ns_focusOutHandler(event:FocusEvent):void {
										DocumentoFormaPago(data).importe = ns.text;
										DocumentoFormaPago(data).updateTotal();
										outerDocument.calcularTotales();
									}
								]]>
							</fx:Script>
							
							<s:HGroup width="100%" height="100%" paddingLeft="2" paddingRight="2" paddingTop="2" paddingBottom="2">
								<components1:MyTextInput id="ns" width="100%" height="100%" permitirNegativos="false" text="{DocumentoFormaPago(data).importe}" focusOut="ns_focusOutHandler(event)" />
							</s:HGroup>
							
						</s:GridItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
			<s:GridColumn width="120" headerText="Importe {recibo.moneda.simbolo}" editable="false" >
				<s:itemRenderer>
					<fx:Component>
						<s:GridItemRenderer focusEnabled="false">
							<fx:Script>
								<![CDATA[
									import biz.fulltime.model.DocumentoFormaPago;
									
									import spark.events.IndexChangeEvent;
									
								]]>
							</fx:Script>
							
							<fx:Declarations>
								<s:NumberFormatter id="nf_Espanol_Espanol" fractionalDigits="2"  useGrouping="true" />
							</fx:Declarations>
							
							<s:HGroup width="100%" height="100%" paddingLeft="2" paddingRight="2" paddingTop="2" paddingBottom="2" horizontalAlign="right" verticalAlign="middle" focusEnabled="false">
								<s:Label text="{nf_Espanol_Espanol.format(DocumentoFormaPago(data).total)}" focusEnabled="false"/>
							</s:HGroup>
							
						</s:GridItemRenderer>
					</fx:Component>
				</s:itemRenderer>

			</s:GridColumn>
		</s:ArrayList>

		<s:NumberFormatter id="nf_Espanol_Espanol" locale="es_ES" decimalSeparator=","/>

		<s:NumberFormatter id="nf_Espanol_Espanol2" fractionalDigits="2" decimalSeparator="," locale="es_ES" />
	</fx:Declarations>


	<s:Panel width="100%" height="100%" title="{recibo.comprobante.nombre.toUpperCase()} NÂ° {recibo.serie + recibo.numero}" styleName="pnlForm">
		<s:VGroup width="100%" height="100%" horizontalAlign="left" gap="0">
			<s:VGroup width="100%" height="100%" gap="10" horizontalAlign="right">
				<s:HGroup paddingRight="10" paddingTop="5" horizontalAlign="right" verticalAlign="middle">
					<s:Label text="CotizaciÃ³n {recibo.moneda.simbolo}" />
					<s:TextInput width="110" text="{nf_Espanol_Espanol2.format(recibo.docTCF)}" textAlign="right" editable="false"/>
				</s:HGroup>

				<s:DataGrid id="dgDocumentosValores" width="100%" height="100%" doubleClick="dgDocumentosValores_doubleClickHandler(event)" keyDown="dgDocumentosValores_keyDownHandler(event)"
							sortableColumns="false" columns="{cols}" doubleClickEnabled="true" focusEnabled="true" dataProvider="{_documentosValoresAux}" editable="{hasPerm()}">
				</s:DataGrid>
				<s:HGroup paddingLeft="10" paddingRight="10" paddingTop="5" paddingBottom="0"  width="100%">
					<s:Button id="cmdAceptar" click="cmdAceptar_clickHandler(event)" width="120" styleName="aceptarButton" label="Confirmar" focusEnabled="true" toolTip="Confirmar" visible="{hasPerm()}"/>
					<s:Spacer width="100%" />
					<s:Button id="cmdNuevo" width="120" styleName="nuevoButton" label="Agregar" click="cmdNuevo_clickHandler(event)" toolTip="Agregar filas" visible="{hasPerm()}"/>
				</s:HGroup>

				<s:Line width="100%" height="2" left="0">
					<s:stroke>
						<s:SolidColorStroke id="lineStroke" color="#666" alpha="1" />
					</s:stroke>
				</s:Line>

			</s:VGroup>
			<s:HGroup paddingTop="15" paddingBottom="7" paddingLeft="5" width="100%" >
				<s:BorderContainer backgroundAlpha=".75" backgroundColor="0xFFCACA" cornerRadius="5" minWidth="0" minHeight="0" borderWeight="2" visible="true">
					<s:layout>
						<s:HorizontalLayout horizontalAlign="left" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" />
					</s:layout>
					<mx:LinkButton id="cmdCheques" height="32" click="cmdCheques_clickHandler(event)" label="Cheques" enabled="true" styleName="prueba1" />
					<mx:LinkButton id="cmdTarjetas" height="32" click="cmdTarjetas_clickHandler(event)" label="Tarjetas" enabled="true" styleName="prueba1" cornerRadius="0" />
					<mx:LinkButton id="cmdDocumentos" height="32" click="cmdDocumentos_clickHandler(event)" label="Documentos" enabled="false" styleName="prueba1" cornerRadius="0" />
					<mx:LinkButton id="cmdBanco" height="32" click="cmdBanco_clickHandler(event)" label="Banco" styleName="prueba1" enabled="false"/>
				</s:BorderContainer>
				<s:Spacer width="100%" />				
				<s:VGroup>
					<s:HGroup paddingRight="10" paddingTop="5" horizontalAlign="right">
						<s:Label width="160" text="Total importe {recibo.moneda.simbolo}" />
						<s:Label width="80" text="{nf_Espanol_Espanol2.format(importeTotal)}" textAlign="right"/>
					</s:HGroup>
					<s:HGroup paddingRight="10" paddingTop="5" paddingBottom="10" horizontalAlign="right">
						<s:Label width="160"  text="Neto comprobante {recibo.moneda.simbolo}" />
						<s:Label width="80" text="{nf_Espanol_Espanol2.format(netoComprobante)}" textAlign="right"/>
					</s:HGroup>
				</s:VGroup>

			</s:HGroup>
		</s:VGroup>
		
		<s:controlBarContent>
			<s:HGroup width="100%" horizontalAlign="right" paddingBottom="0" paddingTop="0">
				<mx:Image id="loader1" source="@Embed(source='assets/general/logo_oscuro.gif')" alpha=".5" scaleX=".25" scaleY=".25" />
				<s:Spacer width="100%" />
				<s:Button id="cmdCancel" click="cmdCancel_clickHandler(event)" width="110" styleName="closeButton16" label="Cerrar" focusEnabled="true" toolTip="Cerrar" />
			</s:HGroup>
		</s:controlBarContent>
	</s:Panel>


</s:Group>
