<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:components="biz.fulltime.ui.components.*" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:renderers="biz.fulltime.ui.renderers.*"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  width="100%" height="100%" preinitialize="init()">

	<fx:Script>
		<![CDATA[
			import biz.fulltime.conf.ServerConfig;
			import biz.fulltime.dto.DocumentoDTO;
			import biz.fulltime.dto.DocumentoQuery;
			import biz.fulltime.model.Cliente;
			import biz.fulltime.model.Documento;
			import biz.fulltime.model.Moneda;
			import biz.fulltime.model.VinculosFP;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			
			import spark.components.TitleWindow;
			
			import util.CatalogoFactory;

			private var _query:DocumentoQuery;

			private var _vinculosfp:ArrayCollection = new ArrayCollection();

			private var _cliente:Cliente;

			private var _recibo:Documento;
			
			private var _cheque:Documento;

			public var formaPagoTipo:Number;

			private var remObjQuery:RemoteObject;

			private var clientChanged:Boolean;

			public function init():void {
				remObjQuery = new RemoteObject();
				remObjQuery.destination = "CreatingRpc";
				remObjQuery.showBusyCursor = true;
				remObjQuery.channelSet = ServerConfig.getInstance().channelSet;
				remObjQuery.addEventListener(ResultEvent.RESULT, resultQuery);
				remObjQuery.addEventListener(FaultEvent.FAULT, onFault);
			}
			
			override protected function commitProperties():void {
				super.commitProperties();
				
				if (clientChanged && dgVinculos) {
					clientChanged = false;
					
					queryDocumentos();					
				}
			}


			private function queryDocumentos():void {
				_query = new DocumentoQuery();
				_query.start = 0;
				_query.limit = 10000;
				_query.esCheque = true;
				_query.cliente = cliente.codigo;
				
				remObjQuery.queryDocumentos(_query);
			}

			private function resultQuery(event:ResultEvent):void {
				vinculosfp = event.result as ArrayCollection;

				callLater(function():void {
						if (dgVinculos.dataProvider.length > 0) {
							dgVinculos.setFocus();
							dgVinculos.selectedIndex = 0;
						}
					});
				
			}

			public function codigoNombreLabelFunction(item:Object):String {
				var label:String = "";
				if (item && item.hasOwnProperty("codigo")) {
					label = item.codigo;
				}
				if (item && item.hasOwnProperty("nombre")) {
					label += " - " + item.nombre;
				}

				return label.toUpperCase();
			}


			public function clienteLabelFunction(item:Object):String {
				var client:Cliente = item as Cliente;

				var label:String;
				if (item && item.hasOwnProperty("codigo")) {
					label = item.codigo;
				}
				if (item && item.hasOwnProperty("nombre")) {
					label += " - " + item.nombre;
				}
				if (client && client.razonSocial != client.nombre) {
					label += " [" + client.razonSocial + "] ";
				}

				return label;
			}

			private function comprobante_cod_labelFunction(item:Object, column:GridColumn):String {
				return item.comprobante.nombre ? String(item.comprobante.nombre).toUpperCase() : "";
			}

			private function moneda_labelFunction(item:Object, column:GridColumn):String {
				var moneda:String = item.moneda.codigo;
				var simbolo:String = "";
				for each (var m:Moneda in CatalogoFactory.getInstance().monedas) {
					if (m.codigo == moneda) {
						simbolo = m.simbolo;
						break;
					}
				}
				return simbolo;
			}

			private function onFault(event:FaultEvent):void {
				Alert.show(event.fault.faultString, 'Error');
			}

			protected function cmdAgregar_clickHandler(event:MouseEvent):void {
				var window:TitleWindow = new TitleWindow();
				window.title = "Cheque recibido";
				window.width = 650;
				window.height = 600;

				window.addEventListener(CloseEvent.CLOSE, function closeHandler(event:Event):void {
						PopUpManager.removePopUp(window as IFlexDisplayObject);
						window = null;
					});

				var frmChequeRecibido:FrmDocumentoRecibido = new FrmDocumentoRecibido();
				frmChequeRecibido.cliente = cliente;
				window.addElement(frmChequeRecibido);

				frmChequeRecibido.addEventListener(CloseEvent.CLOSE, function closeHandler(event:Event):void {
						PopUpManager.removePopUp(window as IFlexDisplayObject);
						window = null;
					});


				PopUpManager.addPopUp(window, DisplayObject(FlexGlobals.topLevelApplication), true);
				PopUpManager.centerPopUp(window);

				window.closeButton.visible = true;

			}


			[Bindable]
			public function get vinculosfp():ArrayCollection {
				return _vinculosfp;
			}

			public function set vinculosfp(value:ArrayCollection):void {
				_vinculosfp = value;
			}

			protected function cmdAceptar_clickHandler(event:MouseEvent):void {
				for each (var vinculoFP:VinculosFP in vinculosfp) {
					if (!_recibo.vinculosfp.contains(vinculoFP)) {
						_recibo.vinculosfp.addItem(vinculoFP);
					}
				}

				// Guardar recibo
				for each (var vinculoFP:VinculosFP in _recibo.vinculosfp) {
					trace(vinculoFP.docIdFP1, vinculoFP.docIdFP2, vinculoFP.vinFPTipo, vinculoFP.vinIE);
				}
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}

			protected function cmdCancel_clickHandler(event:MouseEvent):void {
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}

			protected function cmdBorrarVinculo_clickHandler(event:MouseEvent):void {
				// TODO Auto-generated method stub
			}

			protected function cmdVincular_clickHandler(event:MouseEvent):void {
				var window:TitleWindow = new TitleWindow();
				window.title = "Vincular Cheques Recibidos";
				window.width = 400;
				window.height = 400;

				window.addEventListener(CloseEvent.CLOSE, function closeHandler(event:Event):void {
						PopUpManager.removePopUp(window as IFlexDisplayObject);
						window = null;
					});

				var frmChequeRecibido:FrmDocumentoRecibido = new FrmDocumentoRecibido();
				frmChequeRecibido.cliente = cliente;

				window.addElement(frmChequeRecibido);

				frmChequeRecibido.addEventListener(CloseEvent.CLOSE, function closeHandler(event:Event):void {
						PopUpManager.removePopUp(window as IFlexDisplayObject);
						window = null;
					});


				PopUpManager.addPopUp(window, DisplayObject(FlexGlobals.topLevelApplication), true);
				PopUpManager.centerPopUp(window);

				window.closeButton.visible = true;

			}

			protected function cmdVer_clickHandler(event:MouseEvent):void {
				var window:TitleWindow = new TitleWindow();
				window.title = "Ver cheque recibido";
				window.width = 650;
				window.height = 600;

				window.addEventListener(CloseEvent.CLOSE, function closeHandler(event:Event):void {
						PopUpManager.removePopUp(window as IFlexDisplayObject);
						window = null;
					});

				var frmChequeRecibido:FrmDocumentoRecibidoVer = new FrmDocumentoRecibidoVer();
				var cheque:Documento = dgVinculos.selectedItem as Documento;
				frmChequeRecibido.cheque = cheque;

				window.addElement(frmChequeRecibido);

				frmChequeRecibido.addEventListener(CloseEvent.CLOSE, function closeHandler(event:Event):void {
						PopUpManager.removePopUp(window as IFlexDisplayObject);
						window = null;
					});


				PopUpManager.addPopUp(window, DisplayObject(FlexGlobals.topLevelApplication), true);
				PopUpManager.centerPopUp(window);

				window.closeButton.visible = true;
			}

			private function fechaDoc_labelFunction(item:Object, column:GridColumn):String {
				var documento:DocumentoDTO = item as DocumentoDTO;

				if (documento) {
					var formatter:DateFormatter = new DateFormatter();
					formatter.formatString = "DD-MM-YYYY";
					return formatter.format(documento.fecha);
				}
				return "";
			}


			[Bindable]
			public function get cliente():Cliente {
				return _cliente;
			}
			
			public function set cliente(value:Cliente):void {
				_cliente = value;
				
				clientChanged = true;
				invalidateProperties();
			}
			
			[Bindable]
			public function get recibo():Documento {
				return _recibo;
			}
			
			public function set recibo(value:Documento):void {
				_recibo = value;
			}
			
			[Bindable]
			public function get cheque():Documento {
				return _cheque;
			}

			public function set cheque(value:Documento):void {
				_cheque = value;
			}

		]]>
	</fx:Script>

	<fx:Declarations>
		<fx:Component id="dropDownItemRenderer">
			<renderers:CodigoNombreItemRenderer />
		</fx:Component>

		<s:ArrayList id="cols">
			<s:GridColumn width="85" dataField="fecha" headerText="FECHA" />
			<s:GridColumn width="150" dataField="comprobante" headerText="COMPROBANTE" labelFunction="comprobante_cod_labelFunction" />
			<s:GridColumn width="90" dataField="numero" headerText="SERIE y N°">
				<s:itemRenderer>
					<fx:Component>
						<s:DefaultGridItemRenderer textAlign="right">
							<fx:Script>
								<![CDATA[
									import biz.fulltime.dto.DocumentoDTO;

									override public function prepare(hasBeenRecycled:Boolean):void {
										if (data) {
											var serie:String = DocumentoDTO(data).serie ? DocumentoDTO(data).serie : "";
											var numero:String = DocumentoDTO(data).numero ? DocumentoDTO(data).numero : "";

											label = serie + " " + numero;
										}

									}
								]]>
							</fx:Script>

						</s:DefaultGridItemRenderer>

					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
			<s:GridColumn width="60" dataField="bancoIdDoc" headerText="BANCO" />
			<s:GridColumn width="85" dataField="emision" headerText="EMISIÓN" />
			<s:GridColumn dataField="cliente" headerText="TITULAR">
				<s:itemRenderer>
					<fx:Component>
						<s:DefaultGridItemRenderer textAlign="left">
							<fx:Script>
								<![CDATA[
									import biz.fulltime.dto.CodigoNombre;
									import biz.fulltime.dto.DocumentoDTO;
									
									import util.CatalogoFactory;

									override public function prepare(hasBeenRecycled:Boolean):void {
										if (data) {
											var titular:String = DocumentoDTO(data).titular;
											var cliente:CodigoNombre = DocumentoDTO(data).cliente;

											if (titular) {
												label = titular;
											} else if (cliente && cliente.nombre) {
												label = cliente.nombre;
											} else {
												label = "";
											}
										}
									}
								]]>
							</fx:Script>
						</s:DefaultGridItemRenderer>
					</fx:Component>
				</s:itemRenderer>

			</s:GridColumn>
			<s:GridColumn width="60" dataField="moneda" headerText="MONEDA" labelFunction="moneda_labelFunction" />
			<s:GridColumn width="75" dataField="total" headerText="TOTAL">
				<s:itemRenderer>
					<fx:Component>
						<s:DefaultGridItemRenderer textAlign="right">
							<fx:Script>
								<![CDATA[
									import biz.fulltime.dto.DocumentoDTO;
									import biz.fulltime.model.Documento;
									
									import util.CatalogoFactory;

									override public function prepare(hasBeenRecycled:Boolean):void {
										if (data) {
											if (DocumentoDTO(data).total) {
												label = outerDocument.nf_Espanol_Espanol.format(DocumentoDTO(data).total);
											} else {
												label = outerDocument.nf_Espanol_Espanol.format(0);
											}
										}
									}
								]]>
							</fx:Script>

						</s:DefaultGridItemRenderer>

					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
		</s:ArrayList>

		<s:NumberFormatter id="nf_Espanol_Espanol" locale="es_ES" fractionalDigits="2" />

	</fx:Declarations>

	<s:Panel width="100%" height="100%" title="Lista cheques recibidos de {cliente.nombre}" styleName="pnlForm">
		<s:VGroup width="100%" height="100%" horizontalAlign="left" gap="0">
			<s:DataGrid id="dgVinculos" width="100%" height="100%" dataProvider="{vinculosfp}" sortableColumns="false" columns="{cols}" doubleClickEnabled="true" focusEnabled="true" />
		</s:VGroup>
		<s:controlBarContent>
			<s:HGroup width="100%" horizontalAlign="right" paddingBottom="0" paddingTop="0">
				<mx:Image id="loader1" source="@Embed(source='assets/general/logo_oscuro.gif')" alpha=".5" scaleX=".25" scaleY=".25" />
				<s:Spacer width="100%" />
				<s:Button id="cmdAceptar" width="110" click="cmdAceptar_clickHandler(event)" styleName="textButton" label="Confirmar" focusEnabled="true" toolTip="Aplicar" />
				<s:Button id="cmdCancel" width="110" click="cmdCancel_clickHandler(event)" styleName="textButton" label="Cerrar" focusEnabled="true" toolTip="Cerrar" />
			</s:HGroup>
		</s:controlBarContent>
	</s:Panel>


</s:VGroup>
