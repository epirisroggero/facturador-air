<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:components="biz.fulltime.ui.components.*" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:renderers="biz.fulltime.ui.renderers.*"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  width="100%" height="100%" preinitialize="init()" creationComplete="creationCompleteHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import biz.fulltime.conf.ServerConfig;
			import biz.fulltime.dto.DocumentoQuery;
			import biz.fulltime.model.Banco;
			import biz.fulltime.model.Cliente;
			import biz.fulltime.model.Comprobante;
			import biz.fulltime.model.Documento;
			import biz.fulltime.model.Moneda;
			
			import com.hillelcoren.components.AutoComplete;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			
			import spark.components.TitleWindow;
			
			import util.CatalogoFactory;
			
			private var _query:DocumentoQuery;
						
			private var _valores:ArrayCollection;
			
			private var _cliente:Cliente;
			
			private var remObjQuery:RemoteObject;
			
			
			public function init():void {
				remObjQuery = new RemoteObject();
				remObjQuery.destination = "CreatingRpc";
				remObjQuery.showBusyCursor = true;
				remObjQuery.channelSet = ServerConfig.getInstance().channelSet;
				remObjQuery.addEventListener(ResultEvent.RESULT, resultQuery);
				remObjQuery.addEventListener(FaultEvent.FAULT, onFault);
			}
			
			private function resultQuery(event:ResultEvent):void {
				valores = event.result as ArrayCollection;
				
				callLater(function():void {
					if (dgValores.dataProvider.length > 0) {
						dgValores.setFocus();
						dgValores.selectedIndex = 0;
					}
				});
			}
			
			[Bindable]
			public function get valores():ArrayCollection {
				return _valores;
			}

			public function set valores(value:ArrayCollection):void {
				_valores = value;
			}

			public function codigoNombreLabelFunction(item:Object):String {
				var label:String = "";
				if (item && item.hasOwnProperty("codigo")) {
					label = item.codigo;
				}
				if (item && item.hasOwnProperty("nombre")) {
					label += " - " + item.nombre;
				}
				
				return label.toUpperCase();
			}
			
			
			public function clienteLabelFunction(item:Object):String {
				var client:Cliente = item as Cliente;
				
				var label:String;
				if (item && item.hasOwnProperty("codigo")) {
					label = item.codigo;
				}
				if (item && item.hasOwnProperty("nombre")) {
					label += " - " + item.nombre;
				}
				if (client && client.razonSocial != client.nombre) {
					label += " [" + client.razonSocial + "] ";
				}
				
				return label;
			}
			
			private function comprobante_cod_labelFunction(item:Object, column:GridColumn):String {
				return item.comprobante.nombre ? String(item.comprobante.nombre).toUpperCase() : "";
			}
			
			private function moneda_labelFunction(item:Object, column:GridColumn):String {
				var moneda:String = item.moneda.codigo;
				var simbolo:String = "";
				for each (var m:Moneda in CatalogoFactory.getInstance().monedas) {
					if (m.codigo == moneda) {
						simbolo = m.simbolo;
						break;
					}
				}	
				return simbolo;
			}
			
			private function queryDocumentos():void {
				_query = new DocumentoQuery();
				_query.start = 0;
				_query.limit = 10000;
				_query.esCheque = true;
				_query.cliente = cliente.codigo;
				
				remObjQuery.queryDocumentos(_query);
			}

			private function onFault(event:FaultEvent):void {
				Alert.show(event.fault.faultString, 'Error');
			}

			protected function cmdCancel_clickHandler(event:MouseEvent):void {
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				// Obtener todos los cheques no vinculados
				queryDocumentos();
				
			}
			
			protected function cmdAgregar_clickHandler(event:MouseEvent):void {
				var window:TitleWindow = new TitleWindow();
				window.title = "Cheque recibido";
				window.width = 650;
				window.height = 600;
				
				window.addEventListener(CloseEvent.CLOSE, function closeHandler(event:Event):void {
					PopUpManager.removePopUp(window as IFlexDisplayObject);
					window = null;
				});

				var frmChequeRecibido:FrmChequeRecibido = new FrmChequeRecibido();
				frmChequeRecibido.cliente = cliente;
				window.addElement(frmChequeRecibido);
								
				frmChequeRecibido.addEventListener(CloseEvent.CLOSE, function closeHandler(event:Event):void {
					PopUpManager.removePopUp(window as IFlexDisplayObject);
					window = null;
				});
				
				
				PopUpManager.addPopUp(window, DisplayObject(FlexGlobals.topLevelApplication), true);
				PopUpManager.centerPopUp(window);
				
				window.closeButton.visible = true;

			}

			[Bindable]
			public function get cliente():Cliente {
				return _cliente;
			}

			public function set cliente(value:Cliente):void {
				_cliente = value;
			}

			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<fx:Component id="dropDownItemRenderer">
			<renderers:CodigoNombreItemRenderer />
		</fx:Component>
		
		<s:ArrayList id="cols">
			<s:GridColumn dataField="comprobante" headerText="COMPROBANTE" labelFunction="comprobante_cod_labelFunction" />
			<s:GridColumn width="90" dataField="numero" headerText="SERIE y N°">
				<s:itemRenderer>
					<fx:Component>
						<s:DefaultGridItemRenderer textAlign="right">
							<fx:Script>
								<![CDATA[
									import biz.fulltime.dto.DocumentoDTO;
									override public function prepare(hasBeenRecycled:Boolean):void {
										if (data) {	
											var serie:String = DocumentoDTO(data).serie ? DocumentoDTO(data).serie : "";
											var numero:String = DocumentoDTO(data).numero ? DocumentoDTO(data).numero : "";
											
											label = serie + " " +  numero;
										}
										
									}
								]]>
							</fx:Script>
							
						</s:DefaultGridItemRenderer>
						
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
			<s:GridColumn width="100" dataField="bancoIdDoc" headerText="BANCO" />
			<s:GridColumn width="85" dataField="fecha" headerText="FECHA" />
			<s:GridColumn width="60" dataField="emitido" headerText="EMISIÓN">
				<s:itemRenderer>
					<fx:Component>
						<s:GridItemRenderer clipAndEnableScrolling="true">
							<fx:Script>
								<![CDATA[
									import biz.fulltime.dto.DocumentoDTO;
																		
								]]>
							</fx:Script>
							<s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
								<s:CheckBox id="chbState" selected="{DocumentoDTO(data).emitido}" enabled="false"/>
							</s:HGroup>
						</s:GridItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
			<s:GridColumn width="85" dataField="titular" headerText="TITULAR" />
			<s:GridColumn width="65" dataField="estado" headerText="ESTADO" />
			<s:GridColumn width="60" dataField="moneda" headerText="MONEDA" labelFunction="moneda_labelFunction" />
			<s:GridColumn width="75" dataField="total" headerText="TOTAL">
				<s:itemRenderer>
					<fx:Component>
						<s:DefaultGridItemRenderer textAlign="right">
							<fx:Script>
								<![CDATA[
									import biz.fulltime.dto.DocumentoDTO;
									
									import util.CatalogoFactory;
									
									override public function prepare(hasBeenRecycled:Boolean):void {
										if (data) {											
											if (DocumentoDTO(data).total) {
												label = outerDocument.nf_Espanol_Espanol.format(DocumentoDTO(data).total);
											} else {
												label = outerDocument.nf_Espanol_Espanol.format(0);
											}
										}
									}
								]]>
							</fx:Script>
							
						</s:DefaultGridItemRenderer>
						
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
		</s:ArrayList>
		
		<s:NumberFormatter id="nf_Espanol_Espanol" locale="es_ES" fractionalDigits="2"/>
				
	</fx:Declarations>
	
	<s:Panel width="100%" height="100%" title="Cheques recibidos" >
		<s:VGroup width="100%" height="100%" horizontalAlign="left" gap="0">
			<s:DataGrid id="dgValores" width="100%" height="100%" dataProvider="{valores}" sortableColumns="false" columns="{cols}" doubleClickEnabled="true" focusEnabled="true" />
		</s:VGroup>
		
		<s:controlBarContent>
			<s:HGroup width="100%" horizontalAlign="right" paddingBottom="0" paddingTop="0">
				<mx:Image id="loader1" source="@Embed(source='assets/general/logo_oscuro.gif')" alpha=".5" scaleX=".25" scaleY=".25" />
				<s:Spacer width="100%" />
				<s:Button id="cmdAgregar" width="110" styleName="textButton" label="Agregar" click="cmdAgregar_clickHandler(event)" focusEnabled="true" toolTip="Agregar" />
				<s:Button id="cmdBorrarVinculo" width="110" styleName="textButton" label="Quitar vínculo" focusEnabled="true" toolTip="Quitar vínculo" />
				<s:Button id="cmdVincular" width="110" styleName="textButton" label="Vincular" focusEnabled="true" toolTip="Vincular" />
				<s:Button id="cmdVer" width="110" styleName="textButton" label="Ver" focusEnabled="true" toolTip="Ver" />
				<s:Spacer width="10" />
				<s:Button id="cmdCancel" width="110" click="cmdCancel_clickHandler(event)" styleName="textButton" label="Cerrar" focusEnabled="true" toolTip="Cerrar" />
			</s:HGroup>
		</s:controlBarContent>
	</s:Panel>
	
	
</s:VGroup>
