<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:components="biz.fulltime.ui.components.*"
		  xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:renderers="biz.fulltime.ui.renderers.*"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  width="100%" height="100%" creationComplete="creationCompleteHandler(event)"
		  preinitialize="init()">

	<fx:Script>
		<![CDATA[
			import biz.fulltime.dto.DocumentoQuery;
			import biz.fulltime.event.ReciboEvent;
			import biz.fulltime.model.Cliente;
			import biz.fulltime.model.Comprobante;
			import biz.fulltime.model.Documento;
			import biz.fulltime.model.Moneda;
			import biz.fulltime.model.VinculosFP;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.TitleWindow;
			import spark.events.GridSelectionEvent;
			
			import util.CatalogoFactory;

			private var _query:DocumentoQuery;

			private var _vinculosfp:ArrayCollection;

			private var _cliente:Cliente;

			private var _recibo:Documento;

			private var _formaPagoTipo:Number;

			[Bindable]
			public var modeStr:String;
			
			public function init():void {
			}

			private function resultQuery(event:ResultEvent):void {
			}


			public function codigoNombreLabelFunction(item:Object):String {
				var label:String = "";
				if (item && item.hasOwnProperty("codigo")) {
					label = item.codigo;
				}
				if (item && item.hasOwnProperty("nombre")) {
					label += " - " + item.nombre;
				}

				return label.toUpperCase();
			}


			public function clienteLabelFunction(item:Object):String {
				var client:Cliente = item as Cliente;

				var label:String;
				if (item && item.hasOwnProperty("codigo")) {
					label = item.codigo;
				}
				if (item && item.hasOwnProperty("nombre")) {
					label += " - " + item.nombre;
				}
				if (client && client.razonSocial != client.nombre) {
					label += " [" + client.razonSocial + "] ";
				}

				return label;
			}

			private function comprobante_cod_labelFunction(item:Object, column:GridColumn):String {
				return item.comprobante.nombre ? String(item.comprobante.nombre).toUpperCase() : "";
			}

			private function moneda_labelFunction(item:Object, column:GridColumn):String {
				var moneda:String = item.moneda.codigo;
				var simbolo:String = "";
				for each (var m:Moneda in CatalogoFactory.getInstance().monedas) {
					if (m.codigo == moneda) {
						simbolo = m.simbolo;
						break;
					}
				}
				return simbolo;
			}

			private function onFault(event:FaultEvent):void {
				Alert.show(event.fault.faultString, 'Error');
			}

			protected function creationCompleteHandler(event:FlexEvent):void {
			}

			protected function cmdAgregar_clickHandler(event:MouseEvent):void {
				var window:TitleWindow = new TitleWindow();
				window.title = formaPagoTipo == 43 ? "Cheque recibido" : (
								formaPagoTipo == 44 ? "Tarjeta recibida" : (
								 formaPagoTipo == 45 ? "Conforme recibido" : (
								  formaPagoTipo == 51 ? "Crédito bancario" : "")));
				
						
				window.width = 650;
				window.height = 600;
 
				window.addEventListener(CloseEvent.CLOSE, function closeHandler(event:Event):void {
						PopUpManager.removePopUp(window as IFlexDisplayObject);
						window = null;
					});
				
				var docRecibido:Documento = new Documento(new Comprobante("43", "Cheque Recibido"));
				docRecibido.numero = "0";
				docRecibido.moneda = _recibo.moneda;
				docRecibido.cliente = _recibo.cliente;
				docRecibido.fechaDoc = new Date();
				docRecibido.fechaEmision = new Date();
				docRecibido.concepto = _recibo.comprobante.nombre.toLocaleUpperCase() + " N° " + _recibo.serie + _recibo.numero;
				docRecibido.total = _recibo.total;
				
				var frmChequeRecibido:FrmDocumentoRecibido = new FrmDocumentoRecibido();
				frmChequeRecibido.cliente = cliente;
				frmChequeRecibido.documento = docRecibido;
				frmChequeRecibido.recibo = _recibo;
				
				window.addElement(frmChequeRecibido);
				
				frmChequeRecibido.addEventListener(CloseEvent.CLOSE, function closeHandler(event:Event):void {
					PopUpManager.removePopUp(window as IFlexDisplayObject);
					window = null;
				});
				frmChequeRecibido.addEventListener(ReciboEvent.RECIBO_MODIFICADO, function chequeGuardado(event:ReciboEvent):void {
					PopUpManager.removePopUp(window as IFlexDisplayObject);
					window = null;
					
					recibo = event.recibo;
				});

				PopUpManager.addPopUp(window, DisplayObject(FlexGlobals.topLevelApplication), true);
				PopUpManager.centerPopUp(window);

				window.closeButton.visible = true;

			}

			[Bindable]
			public function get cliente():Cliente {
				return _cliente;
			}

			public function set cliente(value:Cliente):void {
				_cliente = value;
			}

			[Bindable]
			public function get recibo():Documento {
				return _recibo;
			}

			public function set recibo(value:Documento):void {
				_recibo = value;

				if (_recibo && !_recibo.vinculosfp) {
					_recibo.vinculosfp = new ArrayCollection();
				}

				vinculosfp = new ArrayCollection();

				for each (var vinculoFP:VinculosFP in _recibo.vinculosfp) {
					if (vinculoFP.vinFPTipo == formaPagoTipo) {
						vinculosfp.addItem(vinculoFP.docFP2);
					}
				}
			}

			[Bindable]
			public function get vinculosfp():ArrayCollection {
				return _vinculosfp;
			}

			public function set vinculosfp(value:ArrayCollection):void {
				_vinculosfp = value;
			}

			protected function cmdAceptar_clickHandler(event:MouseEvent):void {
				for each (var vinculoFP:VinculosFP in vinculosfp) {
					if (!_recibo.vinculosfp.contains(vinculoFP)) {
						_recibo.vinculosfp.addItem(vinculoFP);
					}
				}
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}

			protected function cmdCancel_clickHandler(event:MouseEvent):void {
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}


			protected function cmdBorrarVinculo_clickHandler(event:MouseEvent):void {
				// TODO Auto-generated method stub
			}

			protected function cmdVincular_clickHandler(event:MouseEvent):void {
				var window:TitleWindow = new TitleWindow();
				window.title = "Vincular cheques recibidos";

				window.width = 900;
				window.height = 700;
				
				window.addEventListener(CloseEvent.CLOSE, function closeHandler(event:Event):void {
					PopUpManager.removePopUp(window as IFlexDisplayObject);
					window = null;
				});
				
				var frmVincularfp:FrmVincularfp = new FrmVincularfp();
				frmVincularfp.cliente = cliente;
				frmVincularfp.recibo = recibo;
				
				frmVincularfp.addEventListener(CloseEvent.CLOSE, function closeHandler(event:Event):void {
					PopUpManager.removePopUp(window as IFlexDisplayObject);
					window = null;
				});
				
				window.addElement(frmVincularfp);
				
				PopUpManager.addPopUp(window, DisplayObject(FlexGlobals.topLevelApplication), true);
				PopUpManager.centerPopUp(window);
				
				window.closeButton.visible = true;

			}

			protected function cmdVer_clickHandler(event:MouseEvent):void {
				var window:TitleWindow = new TitleWindow();
				window.title = "Ver cheque recibido";
				window.width = 650;
				window.height = 450;

				window.addEventListener(CloseEvent.CLOSE, function closeHandler(event:Event):void {
						PopUpManager.removePopUp(window as IFlexDisplayObject);
						window = null;
					});

				var frmChequeRecibido:FrmDocumentoRecibidoVer = new FrmDocumentoRecibidoVer();
				var cheque:Documento = dgVinculos.selectedItem as Documento; 
				frmChequeRecibido.cheque = cheque;
				
				window.addElement(frmChequeRecibido);

				frmChequeRecibido.addEventListener(CloseEvent.CLOSE, function closeHandler(event:Event):void {
						PopUpManager.removePopUp(window as IFlexDisplayObject);
						window = null;
					});


				PopUpManager.addPopUp(window, DisplayObject(FlexGlobals.topLevelApplication), true);
				PopUpManager.centerPopUp(window);

				window.closeButton.visible = true;
			}
			
			private function fechaDoc_labelFunction(item:Object, column:GridColumn):String {
				var documento:Documento = item as Documento;

				if (documento) {
					var formatter:DateFormatter = new DateFormatter();
					formatter.formatString = "DD-MM-YYYY";
					return formatter.format(documento.fechaDoc);
				}
				return "";
			}
			
			
			private function fechaEmision_labelFunction(item:Object, column:GridColumn):String {
				var documento:Documento = item as Documento;
				
				if (documento) {
					var formatter:DateFormatter = new DateFormatter();
					formatter.formatString = "DD-MM-YYYY";
					return formatter.format(documento.fechaEmision);
				}
				return "";
			}

			public function get formaPagoTipo():Number {
				return _formaPagoTipo;
			}

			public function set formaPagoTipo(value:Number):void {
				_formaPagoTipo = value;
				
				modeStr = formaPagoTipo == 43 ? "Cheques recibidos" : (
					formaPagoTipo == 44 ? "Tarjetas recibidas" : (
						formaPagoTipo == 45 ? "Conformes recibidos" : (
							formaPagoTipo == 51 ? "Créditos bancarios" : "")));

			}


			protected function dgVinculos_selectionChangeHandler(event:GridSelectionEvent):void {
				var vinculoFP:VinculosFP = dgVinculos.selectedItem as VinculosFP;
				cmdBorrarVinculo.enabled = vinculoFP != null;
				cmdVincular.enabled = vinculoFP != null;
				cmdVer.enabled = vinculoFP != null;
			}
			
		]]>
	</fx:Script>

	<fx:Declarations>
		<fx:Component id="dropDownItemRenderer">
			<renderers:CodigoNombreItemRenderer/>
		</fx:Component>

		<s:ArrayList id="cols">
			<s:GridColumn dataField="comprobante" headerText="COMPROBANTE"
						  labelFunction="comprobante_cod_labelFunction"/>
			<s:GridColumn width="90" dataField="numero" headerText="SERIE y N°">
				<s:itemRenderer>
					<fx:Component>
						<s:DefaultGridItemRenderer textAlign="right">
							<fx:Script>
								<![CDATA[
									import biz.fulltime.model.Documento;

									override public function prepare(hasBeenRecycled:Boolean):void {
										if (data) {
											var serie:String = Documento(data).serie ? Documento(data).serie : "";
											var numero:String = Documento(data).numero ? Documento(data).numero : "";

											label = serie + " " + numero;
										}

									}
								]]>
							</fx:Script>

						</s:DefaultGridItemRenderer>

					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
			<s:GridColumn width="85" dataField="titular" headerText="TITULAR"/>
			<s:GridColumn width="85" dataField="estado" headerText="ESTADO">
				<s:itemRenderer>
					<fx:Component>
						<s:DefaultGridItemRenderer textAlign="left">
							<fx:Script>
								<![CDATA[
									import biz.fulltime.model.Documento;
									
									import util.CatalogoFactory;
									
									override public function prepare(hasBeenRecycled:Boolean):void {
										if (data) {
											var docEstado:String = Documento(data).estado;
											if (docEstado == "C") {
												label = "Cartera";
											} else if (docEstado == "D") {
												label = "Depositado";
											} else if (docEstado == "E") {
												label = "Endosado";
											}
										}
									}
								]]>
							</fx:Script>
							
						</s:DefaultGridItemRenderer>
						
					</fx:Component>
				</s:itemRenderer>

			</s:GridColumn>
			<s:GridColumn width="60" dataField="moneda" headerText="MONEDA"
						  labelFunction="moneda_labelFunction"/>
			<s:GridColumn width="75" dataField="total" headerText="TOTAL">
				<s:itemRenderer>
					<fx:Component>
						<s:DefaultGridItemRenderer textAlign="right">
							<fx:Script>
								<![CDATA[
									import biz.fulltime.model.Documento;

									import util.CatalogoFactory;

									override public function prepare(hasBeenRecycled:Boolean):void {
										if (data) {
											if (Documento(data).total) {
												label = outerDocument.nf_Espanol_Espanol.format(Documento(data).total);
											} else {
												label = outerDocument.nf_Espanol_Espanol.format(0);
											}
										}
									}
								]]>
							</fx:Script>

						</s:DefaultGridItemRenderer>

					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
		</s:ArrayList>

		<s:NumberFormatter id="nf_Espanol_Espanol" fractionalDigits="2" locale="es_ES"/>

	</fx:Declarations>

	<s:Panel width="100%" height="100%" styleName="pnlForm" title="{modeStr}">
		<s:VGroup width="100%" height="100%" gap="0" horizontalAlign="left">
			<s:DataGrid id="dgVinculos" width="100%" height="100%" columns="{cols}"
						dataProvider="{vinculosfp}" doubleClickEnabled="true" focusEnabled="true"
						selectionChange="dgVinculos_selectionChangeHandler(event)"
						sortableColumns="false"/>
		</s:VGroup>
		<s:controlBarContent>
			<s:HGroup width="100%" horizontalAlign="right" paddingBottom="0" paddingTop="0">
				<mx:Image id="loader1" alpha=".5" scaleX=".25" scaleY=".25"
						  source="@Embed(source='assets/general/logo_oscuro.gif')"/>
				<s:Spacer width="100%"/>
				<s:Button id="cmdAgregar" width="110" label="Agregar"
						  click="cmdAgregar_clickHandler(event)" focusEnabled="true"
						  styleName="textButton" toolTip="Agregar"/>
				<s:Button id="cmdBorrarVinculo" width="110" label="Quitar vínculo"
						  click="cmdBorrarVinculo_clickHandler(event)"
						  enabled="{dgVinculos.selectedItem}" focusEnabled="true"
						  styleName="textButton" toolTip="Quitar vínculo"/>
				<s:Button id="cmdVincular" width="110" label="Vincular"
						  click="cmdVincular_clickHandler(event)" enabled="false"
						  focusEnabled="true" styleName="textButton" toolTip="Vincular"/>
				<s:Button id="cmdVer" width="110" label="Ver" click="cmdVer_clickHandler(event)"
						  enabled="{dgVinculos.selectedItem}" focusEnabled="true"
						  styleName="textButton" toolTip="Ver"/>
				<s:Spacer width="20"/>
				<s:Button id="cmdAceptar" width="110" label="Aplicar"
						  click="cmdAceptar_clickHandler(event)" focusEnabled="true"
						  styleName="aceptarButton" toolTip="Aplicar"/>
				<s:Button id="cmdCancel" width="110" label="Cerrar"
						  click="cmdCancel_clickHandler(event)" focusEnabled="true"
						  styleName="cancelarButton" toolTip="Cerrar"/>
				
			</s:HGroup>
		</s:controlBarContent>
	</s:Panel>


</s:VGroup>
