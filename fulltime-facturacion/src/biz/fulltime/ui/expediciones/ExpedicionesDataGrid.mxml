<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:components="biz.fulltime.ui.components.*" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:renderers="biz.fulltime.ui.renderers.*" xmlns:s="library://ns.adobe.com/flex/spark"
		  width="100%" height="100%" initialize="initializeHandler(event)" gap="0">

	<fx:Script>
		<![CDATA[
			import biz.fulltime.conf.ServerConfig;
			import biz.fulltime.dto.AgendaTareaDTO;
			import biz.fulltime.model.AgendaTarea;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.AdvancedDataGridEvent;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.formatters.DateFormatter;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			import mx.utils.ObjectUtil;
			
			import util.CatalogoFactory;

			public static const TURNO_MATUTINO:int = 0;

			public static const TURNO_VESPERTINO:int = 1;

			private var _tareas:ArrayCollection;

			[Bindable]
			public var catalogs:CatalogoFactory = CatalogoFactory.getInstance();

			[Bindable]
			private var _dataProvider:ArrayCollection;

			[Bindable]
			private var _mostrarPendientes:Boolean;

			private var _turno:int;

			private var _changeTareas:Boolean;

			private var _changeMode:Boolean;

			private var _showDateColumn:Boolean;

			private var _showStateColumn:Boolean = true;
			
			private var _showPendientesButton:Boolean = true; 
			
			private var _currentSelected:AgendaTarea; 
			
			[Bindable]
			public var modoVizualizacion:Boolean = false; 

			private var _editableC:Boolean = true;

			private var remObj:RemoteObject;
			
			[Bindable]
			public function get currentSelected():AgendaTarea {
				return _currentSelected;
			}

			public function set currentSelected(value:AgendaTarea):void {
				_currentSelected = value;
			}

			[Bindable]
			public function get editableC():Boolean {
				return _editableC;
			}

			public function set editableC(value:Boolean):void {
				_editableC = value;
			}

			[Bindable]
			public function get showStateColumn():Boolean {
				return _showStateColumn;
			}

			public function set showStateColumn(value:Boolean):void {
				_showStateColumn = value;
			}

			[Bindable]
			public function get showDateColumn():Boolean {
				return _showDateColumn;
			}

			public function set showDateColumn(value:Boolean):void {
				_showDateColumn = value;
			}

			public function get mostrarSoloPendientes():Boolean {
				return _mostrarPendientes;
			}

			public function set mostrarSoloPendientes(value:Boolean):void {
				_mostrarPendientes = value;

				_changeMode = true;

				invalidateProperties();
			}

			[Bindable]
			public function get turno():int {
				return _turno;
			}

			public function set turno(value:int):void {
				_turno = value;
			}

			[Bindable]
			public function get tareas():ArrayCollection {
				return _tareas;
			}

			public function set tareas(value:ArrayCollection):void {
				_tareas = value;
				_changeTareas = true;
				invalidateProperties();
			}

			override protected function commitProperties():void {
				super.commitProperties();

				if (_changeTareas) {
					actualizarTareas();
					_changeTareas = false;
				}
				if (_changeMode) {
					actualizarTareas();
					_changeMode = false;
				}
			}

			private function actualizarTareas():void {
				_dataProvider = new ArrayCollection();
				for each (var tarea:AgendaTareaDTO in _tareas) {
					if (_mostrarPendientes) {
						if (tarea.estado == "P") {
							_dataProvider.addItem(tarea);
						}
					} else {
						_dataProvider.addItem(tarea);
					}
				}
			}

			private function asignado_labelFunction(item:Object, column:AdvancedDataGridColumn):String {
				return item.usuarioAsignado ? item.usuarioAsignado.codigo + "-" + item.usuarioAsignado.nombre : "";
			}

			private function solicitante_labelFunction(item:Object, column:AdvancedDataGridColumn):String {
				return item.usuSolicitante ? item.usuSolicitante : "";
			}

			private function contacto_labelFunction(item:Object, column:AdvancedDataGridColumn):String {
				return item.contacto ? item.contacto.nombre : "";
			}

			private function fecha_labelFunction(item:Object, column:AdvancedDataGridColumn):String {
				var dateFormatter:DateFormatter = new DateFormatter();
				dateFormatter.formatString = "DD-MM-YYYY";

				return item.fechaHora ? dateFormatter.format(item.fechaHora) : "";
			}

			private function fechaInicio_labelFunction(item:Object, column:AdvancedDataGridColumn):String {
				var dateFormatter:DateFormatter = new DateFormatter();
				dateFormatter.formatString = "DD-MM-YYYY";

				return item.fechaInicio ? dateFormatter.format(item.fechaInicio) : dateFormatter.format(item.fechaHora);
			}

			private function tarea_labelFunction(item:Object, column:AdvancedDataGridColumn):String {
				return item.tarea ? item.tarea.codigo + "-" + item.tarea.nombre.toUpperCase() : "";
			}

			private function tarea_NroOrden(item:Object, column:AdvancedDataGridColumn):String {
				if (AgendaTareaDTO(item).nroOrden) {
					return String(item.nroOrden);
				}
				return "";
			}

			private function tarea_Orden(item:Object, column:AdvancedDataGridColumn):String {
				if (AgendaTareaDTO(item).orden) {
					return String(item.orden);
				}
				return "";
			}

			protected function grid_itemEditEndHandler(event:AdvancedDataGridEvent):void {
				var rowIndex:int = event.rowIndex;

				if (rowIndex < 0 || _dataProvider.length < rowIndex) {
					return;
				}
				var tarea:AgendaTareaDTO = _dataProvider.getItemAt(rowIndex) as AgendaTareaDTO;

				var remObj:RemoteObject = new RemoteObject();
				remObj.destination = "CreatingRpc";
				remObj.channelSet = ServerConfig.getInstance().channelSet;
				remObj.showBusyCursor = true;
				remObj.addEventListener(FaultEvent.FAULT, onFault);

				remObj.modificarTareaDTO(tarea);
			}


			public function columnSortCompareFunction(item1:Object, item2:Object):int {
				if (item1.hasOwnProperty("orden") && item2.hasOwnProperty("orden")) {
					var number1:Number = item1["orden"] != null ? Number(item1["orden"]) : Number.NaN;
					var number2:Number = item2["orden"] != null ? Number(item2["orden"]) : Number.NaN;
					
					if (isNaN(number1)) {
						return -1;
					}
					if (isNaN(number2)) {
						return 1;
					}					
					//comparison logic ex.
					return number1 > number2 ? 1 : (number1 < number2 ? -1 : 0);
				}
				return 0;
			}
			
			public function columnNroCompareFunction(item1:Object, item2:Object):int {
				if (item1.hasOwnProperty("nroOrden") && item2.hasOwnProperty("nroOrden")) {
					var number1:Number = item1["nroOrden"] != null ? Number(item1["nroOrden"]) : Number.NaN;
					var number2:Number = item2["nroOrden"] != null ? Number(item2["nroOrden"]) : Number.NaN;
					
					if (isNaN(number1)) {
						return -1;
					}
					if (isNaN(number2)) {
						return 1;
					}
					return number1 > number2 ? 1 : (number1 < number2 ? -1 : 0);
				}
				return 0;
			}

			public function columnSortPrioridadFunction(item1:Object, item2:Object):int {
				if (item1.hasOwnProperty("prioridad") && item2.hasOwnProperty("prioridad")) {
					var value1:String = item1["prioridad"] != null ? String(item1["prioridad"]) : "";
					var value2:String = item2["prioridad"] != null ? String(item2["prioridad"]) : "";

					var number1:Number = value1 == "A" ? 2 : (value1 == "M" ? 1 : 0);
					var number2:Number = value2 == "A" ? 2 : (value2 == "M" ? 1 : 0);

					return number1 > number2 ? 1 : (number1 < number2 ? -1 : 0);
				}
				return 0;
			}

			private function userSolicitante_sortCompareFunc(itemA:Object, itemB:Object):int {
				var solicitanteA:String = itemA.usuarioSolicitante ? itemA.usuarioSolicitante.nombre : "";
				var solicitanteB:String = itemB.usuarioSolicitante ? itemB.usuarioSolicitante.nombre : "";

				return ObjectUtil.stringCompare(solicitanteA, solicitanteB);
			}

			private function userAsignado_sortCompareFunc(itemA:Object, itemB:Object):int {
				var asignadoA:String = itemA.usuarioAsignado ? itemA.usuarioAsignado.nombre : "";
				var asignadoB:String = itemB.usuarioAsignado ? itemB.usuarioAsignado.nombre : "";

				return ObjectUtil.stringCompare(asignadoA, asignadoB);
			}

			private function estado_sortCompareFunc(itemA:Object, itemB:Object):int {
				var estadoA:String = itemA.estado;
				var estadoB:String = itemB.estado;

				return ObjectUtil.stringCompare(estadoA, estadoB);
			}

			/*private function contacto_sortCompareFunc(itemA:Object, itemB:Object):int {
				var contactoA:String = itemA.contacto ? itemA.contacto.nombre : "";
				var contactoB:String = itemB.contacto ? itemB.contacto.nombre : "";

				return ObjectUtil.stringCompare(contactoA, contactoB);
			}

			private function tarea_sortCompareFunc(itemA:Object, itemB:Object):int {
				var tareaA:String = itemA.tarea ? itemA.tarea.nombre : "";
				var tareaB:String = itemB.tarea ? itemB.tarea.nombre : "";

				return ObjectUtil.stringCompare(tareaA, tareaB);
			}*/

			private function onFault(event:FaultEvent):void {
				Alert.show(event.fault.faultString, 'Error');
			}

			// Callback function that hightlights in red 
			// all rows for the selected artist.
			private function styleCallback(data:Object, col:AdvancedDataGridColumn):Object {
				if (!data) {
					return null;
				}
				if (data["estado"] == "P") {
					return {color:0x880000, fontWeight:'bold', fontStyle:'normal'};
				}
				if (data["estado"] == "C") {
					return {color:0x006600, fontWeight:'bold', fontStyle:'normal'};
				}
				return null;
			}

			protected function grid_itemEditBeginningHandler(event:AdvancedDataGridEvent):void {
				var rowIndex:Number = event.rowIndex;
				var dg:AdvancedDataGrid = event.currentTarget as AdvancedDataGrid;

				var dp:ArrayCollection = dg.dataProvider as ArrayCollection;
				var agendaTarea:AgendaTareaDTO = dp.getItemAt(rowIndex) as AgendaTareaDTO;
				if (agendaTarea.estado == "C") {
					event.preventDefault();
				}
			}

			protected function chbPendientes_changeHandler(event:Event):void {
				mostrarSoloPendientes = chbPendientes.selected;
				actualizarTareas();
			}

			[Bindable]
			public function get showPendientesButton():Boolean {
				return _showPendientesButton;
			}

			public function set showPendientesButton(value:Boolean):void {
				_showPendientesButton = value;
			}

			
			protected function initializeHandler(event:FlexEvent):void {
				remObj = new RemoteObject();
				remObj.destination = "CreatingRpc";
				remObj.channelSet = ServerConfig.getInstance().channelSet;
				remObj.addEventListener(ResultEvent.RESULT, result);
				remObj.addEventListener(FaultEvent.FAULT, handleFault);
				remObj.showBusyCursor = true;
			}
			
			protected function grid_changeHandler(event:ListEvent):void {
				var selectedRow:AgendaTareaDTO = grid.selectedItem as AgendaTareaDTO;
				remObj.getAgendaTarea(selectedRow ? selectedRow.ageId : null);
			}

			private function result(event:ResultEvent):void {
				currentSelected = event.result as AgendaTarea;
			}
			
			public function handleFault(event:FaultEvent):void {				
				var message:String = event.fault && event.fault.rootCause && event.fault.rootCause.localizedMessage ? event.fault.rootCause.localizedMessage : null;
				if (!message) {
					message = event.message.toString();
				}				
				Alert.show(message, "Error", 4, null, null, StyleManager.getStyleManager(null).getStyleDeclaration('.icons32').getStyle('ErrorIcon'));
			}

			
		]]>
	</fx:Script>

	<fx:Declarations>
		<s:ArrayCollection id="arr" />
	</fx:Declarations>
	

	<mx:AdvancedDataGrid id="grid" width="100%" height="100%" fontSize="12" dataProvider="{_dataProvider}" borderAlpha="0.2" editable="true" verticalGridLines="false"
						 itemEditBeginning="grid_itemEditBeginningHandler(event)" itemEditEnd="grid_itemEditEndHandler(event)"
						 variableRowHeight="false" rowHeight="28" wordWrap="true" headerWordWrap="true" headerHeight="24" change="grid_changeHandler(event)" alternatingItemColors="[0xFFFFFF, 0xFFFFFF]">
		
		<mx:groupedColumns>
			<mx:AdvancedDataGridColumn id="colState" width="10" minWidth="10" sortable="false" headerText="" editable="false" dataField="state" resizable="false"/>
			<mx:AdvancedDataGridColumn id="colSelected" width="25" minWidth="28" sortable="false" headerText="Seleccionar" editable="false" dataField="selected" resizable="false"
									   visible="{showStateColumn &amp;&amp; !modoVizualizacion}" />
			<mx:AdvancedDataGridColumn id="colPrioridad" width="22" minWidth="22" dataField="prioridad" headerText="Prioridad" sortable="true" editable="false" showDataTips="true"
									   sortCompareFunction="columnSortPrioridadFunction" dataTipField="prioridad" resizable="false" visible="{!modoVizualizacion}"/>
			<mx:AdvancedDataGridColumn id="colFechaInicio" width="80" dataField="fechaInicio" headerText="F.Inicio" sortable="false" editable="false" resizable="false" visible="{showDateColumn}" labelFunction="fechaInicio_labelFunction" />
			<mx:AdvancedDataGridColumn id="colFecha" width="80" minWidth="70" sortable="false" headerText="Fecha" editable="false" dataField="fechaHora" resizable="false" visible="{showDateColumn}" labelFunction="fecha_labelFunction" />
			<mx:AdvancedDataGridColumn id="colOrden" width="40" dataField="orden" headerText="Orden" sortable="true" sortCompareFunction="columnSortCompareFunction"
									   editable="{editableC}" labelFunction="tarea_Orden" showDataTips="true" dataTipField="orden"
									   visible="{!showDateColumn &amp;&amp; showStateColumn}" />
			<mx:AdvancedDataGridColumn id="colNroOrden" width="70" dataField="nroOrden" headerText="NºOrden" sortable="true" sortCompareFunction="columnNroCompareFunction" editable="{editableC}" labelFunction="tarea_NroOrden"
									   showDataTips="true" dataTipField="nroOrden" resizable="false" visible="{showStateColumn &amp;&amp; !modoVizualizacion}" />
			<mx:AdvancedDataGridColumn id="colTarea" width="130" dataField="tarea" headerText="Tarea" editable="false" sortable="true" />
			<mx:AdvancedDataGridColumn id="colContacto" width="160" dataField="ctoNombre" headerText="Contacto" sortable="true" editable="false" visible="{!modoVizualizacion}"/>
			<mx:AdvancedDataGridColumn id="colDireccion" width="200" dataField="ctoDireccion" headerText="Dirección" editable="false" showDataTips="true" sortable="false" visible="{!modoVizualizacion}"/>
			<mx:AdvancedDataGridColumn id="colDescripcion" dataField="descripcion" headerText="Descripción" editable="{false}" showDataTips="true" dataTipField="descripcion" />
			<mx:AdvancedDataGridColumn id="colSolicitante" width="110" dataField="usuSolicitante" headerText="Solicitante" labelFunction="solicitante_labelFunction"
									   sortCompareFunction="userSolicitante_sortCompareFunc" editable="false" />
			<mx:AdvancedDataGridColumn id="colUsrAsig" width="130" dataField="usuAsignadoId" headerText="Asignado" sortCompareFunction="userAsignado_sortCompareFunc" editable="false"> 
				<mx:itemRenderer>
					<fx:Component>
						<s:MXAdvancedDataGridItemRenderer>
							<fx:Script>
								<![CDATA[
									import biz.fulltime.dto.AgendaTareaDTO;
									import biz.fulltime.model.Articulo;
									import biz.fulltime.model.Contacto;
									import biz.fulltime.model.Usuario;
									
									import com.hillelcoren.components.AutoComplete;
									
									import mx.events.FlexEvent;
									
									import spark.components.DataGrid;
									
									import util.CatalogoFactory;

									private var agendaTarea:AgendaTareaDTO;

									private var _changeData:Boolean;

									[Bindable]
									private var _colorBackground:uint = 0xFFFFFF;

									[Bindable]
									private var _colorForeground:uint = 0x000000;

									[Bindable]
									private var _alpha:Number = .45;

									protected function acUsuarioAsignado_creationCompleteHandler(event:FlexEvent):void {
										callLater(function():void {
											cmbUsuarioAsignado.textInput.setStyle("borderStyle", "none");
											cmbUsuarioAsignado.textInput.setStyle("borderAlpha", "0");
											cmbUsuarioAsignado.textInput.tabFocusEnabled = false;
										});

									}

									override protected function commitProperties():void {
										super.commitProperties();

										if (_changeData && cmbUsuarioAsignado != null) {
											_changeData = false;
											if (agendaTarea) {
												var usuarioAsignado:Usuario = null;
												if (agendaTarea.idUsuAsignado) {
													var temp:String = agendaTarea.idUsuAsignado;
													for each(var usuario:Usuario in CatalogoFactory.getInstance().usuarios) {
														if (usuario.codigo == temp) {
															usuarioAsignado = usuario;
															break;															
														}
													}													
												}
												if (agendaTarea.idUsuAsignado) {
													cmbUsuarioAsignado.selectedItem = usuarioAsignado;
												} else {
													cmbUsuarioAsignado.clear();
												}
												
												if (!outerDocument.showStateColumn) {
													if (agendaTarea.estado == "C") {
														if (agendaTarea.fechaHoraFin == null) {
															_colorBackground = 0xFFFF00;
															_colorForeground = 0x000000;
															_alpha = .24;
														} else {
															_colorBackground = 0x00FF00;
															_colorForeground = 0x000000;
															_alpha = .02;
														} 							
													} else if (agendaTarea.estado == "P") {
														var fechaInicio:Date = agendaTarea.fechaInicio;
														var fecha:Date = agendaTarea.fechaHora;
														
														if (fecha.date != fechaInicio.date || fecha.month != fechaInicio.month) {
															_colorBackground = 0xFF0000;
															_colorForeground = 0x000000;
															_alpha = .015;
														} else{
															_colorBackground = 0xDADADA;
															_colorForeground = 0x000000;
															_alpha = .24;
														}
														
													} else {
														_colorBackground = 0x000000;
														_colorForeground = 0x222222;
														_alpha = .84;						
													}
													cmbUsuarioAsignado.visible = false;
													cmbUsuarioAsignado.includeInLayout = false;
													
													lblUsuarioAsignado.visible = true;
													lblUsuarioAsignado.includeInLayout = true;
													
													if (usuarioAsignado && agendaTarea.idUsuAsignado) {
														lblUsuarioAsignado.text = usuarioAsignado.codigo + "-" + usuarioAsignado.nombre;
													} else {
														lblUsuarioAsignado.text = "";
													}
													
												} else if (agendaTarea.estado == "C") {
													if (!outerDocument.showStateColumn) {
														var fechaInicio:Date = agendaTarea.fechaInicio;
														var fecha:Date = agendaTarea.fechaHora;

														if (agendaTarea.fechaHoraFin == null) {
															_colorBackground = 0xFFFF00;
															_colorForeground = 0x000000;
															_alpha = .24;
														} else {
															_colorBackground = 0x00FF00;
															_colorForeground = 0x000000;
															_alpha = .02;
														} 							
													} else if (agendaTarea.fechaHoraFin == null) {
														_colorBackground = 0xFFFF00;
														_colorForeground = 0x000000;
														_alpha = .24;
													} else {
														_colorBackground = 0x00FF00;
														_colorForeground = 0x000000;
														_alpha = .02;
													}

													cmbUsuarioAsignado.visible = false;
													cmbUsuarioAsignado.includeInLayout = false;

													lblUsuarioAsignado.visible = true;
													lblUsuarioAsignado.includeInLayout = true;

													if (usuarioAsignado && agendaTarea.idUsuAsignado) {
														lblUsuarioAsignado.text = usuarioAsignado.codigo + "-" + usuarioAsignado.nombre;
													} else {
														lblUsuarioAsignado.text = "";
													}
												} else if (agendaTarea.estado == "P") {
													var fechaInicio:Date = agendaTarea.fechaInicio;
													var fechaHora:Date = agendaTarea.fechaHora;

													if (fechaHora.date != fechaInicio.date || fechaHora.month != fechaInicio.month) {
														_colorBackground = 0xFF0000;
														_colorForeground = 0x000000;
														_alpha = .015;
													} else {
														_colorBackground = 0x666666;
														_colorForeground = 0x000000;
														_alpha = .12;
													}
													cmbUsuarioAsignado.inlineButton.setStyle("borderStyle", "none");
													cmbUsuarioAsignado.textInput.setStyle("borderStyle", "none");
													cmbUsuarioAsignado.textInput.setStyle("borderAlpha", "0");
													cmbUsuarioAsignado.textInput.setStyle("borderVisible", "false");
													cmbUsuarioAsignado.textInput.tabFocusEnabled = false;

													cmbUsuarioAsignado.visible = true;
													cmbUsuarioAsignado.includeInLayout = true;

													lblUsuarioAsignado.visible = false;
													lblUsuarioAsignado.includeInLayout = false;
												} else {
													_colorBackground = 0x000000;
													_colorForeground = 0x222222;
													_alpha = .84;
												}
											} else {
												cmbUsuarioAsignado.clear();
											}

										}
									}

									override public function get data():Object {
										return agendaTarea;
									}

									override public function set data(newValue:Object):void {
										if (newValue) {
											agendaTarea = newValue as AgendaTareaDTO;
										} else {
											agendaTarea = null;
										}
										_changeData = true;
										invalidateProperties();
									}

									public function codigoNombreLabelFunction(item:Object):String {
										var label:String;
										if (item && item.hasOwnProperty("nombre")) {
											label = item.nombre;
										} else {
											label = "Ninguno";
										}
										return label;
									}

									/**
									*  @private
									*/
									override public function setFocus():void {
										cmbUsuarioAsignado.setFocus();
									}

									protected function cmbUsuarioAsignado_changeHandler(event:Event):void {
										if (cmbUsuarioAsignado.selectedItem) {
											agendaTarea.idUsuAsignado = cmbUsuarioAsignado.selectedItem.codigo;
											agendaTarea.guardarCambios();
										} 
									}
								]]>
							</fx:Script>
							<fx:Declarations>
								<fx:Component id="dropDownItemRenderer">
									<renderers:CodigoNombreItemRenderer />
								</fx:Component>
							</fx:Declarations>

							<s:Rect left="0" right="0" top="-2" bottom="-2">
								<s:fill>
									<s:LinearGradient rotation="90">
										<s:GradientEntry color="0xFFFFFF" alpha="{_alpha*4}" ratio=".00"/>
										<s:GradientEntry color="{_colorBackground}" alpha="{_alpha}" ratio=".09" />
										<s:GradientEntry color="{_colorBackground}" alpha="{_alpha}" ratio=".96"/>
										<s:GradientEntry color="{_colorBackground}" alpha="{_alpha*2}" ratio=".96"/>
									</s:LinearGradient>
								</s:fill>
							</s:Rect>	

							<components:MyAutoComplete id="cmbUsuarioAsignado" width="100%" height="100%" textAlign="left" change="cmbUsuarioAsignado_changeHandler(event)"
													   creationComplete="acUsuarioAsignado_creationCompleteHandler(event)" dataProvider="{ outerDocument.catalogs.usuarios }"
													   labelField="nombre" matchType="anyPart" prompt="Asignar Usuario" allowNewValues="false"
													   selectedItemStyleName="{ AutoComplete.STYLE_MAC_MAIL }" allowDuplicates="{ false }" allowMultipleSelection="{ false }"
													   allowEditingNewValues="{ false }" buttonMode="false" dropDownItemRenderer="{ dropDownItemRenderer }"
													   labelFunction="codigoNombreLabelFunction" backspaceAction="remove" dropDownWidth="240" dropDownRowCount="10"
													   toolTip="{cmbUsuarioAsignado.text}" alpha="1" />

							<s:Label id="lblUsuarioAsignado" width="100%" height="100%" left="10" fontSize="11" verticalAlign="middle" visible="false" includeInLayout="false"
									 maxDisplayedLines="1" />
						</s:MXAdvancedDataGridItemRenderer>
					</fx:Component>
				</mx:itemRenderer>

			</mx:AdvancedDataGridColumn>
			<mx:AdvancedDataGridColumn id="colEstado" width="70" minWidth="70" headerText="Estado" sortable="true" editable="false" resizable="false" sortCompareFunction="estado_sortCompareFunc"
									   visible="{showStateColumn}" />
		</mx:groupedColumns>

		<mx:rendererProviders>
			<mx:AdvancedDataGridRendererProvider renderer="biz.fulltime.ui.expediciones.renderers.StateRenderer" column="{colState}" />
			<mx:AdvancedDataGridRendererProvider renderer="biz.fulltime.ui.expediciones.renderers.DescriptionColumnRenderer" column="{colFecha}" />
			<mx:AdvancedDataGridRendererProvider renderer="biz.fulltime.ui.expediciones.renderers.CheckBoxRenderer" column="{colSelected}" />
			<mx:AdvancedDataGridRendererProvider renderer="biz.fulltime.ui.expediciones.renderers.DescriptionColumnRenderer" column="{colOrden}" />
			<mx:AdvancedDataGridRendererProvider renderer="biz.fulltime.ui.expediciones.renderers.EstadoRenderer" column="{colPrioridad}" />
			<mx:AdvancedDataGridRendererProvider renderer="biz.fulltime.ui.expediciones.renderers.DescriptionColumnRenderer" column="{colNroOrden}" />
			<mx:AdvancedDataGridRendererProvider renderer="biz.fulltime.ui.expediciones.renderers.DescriptionColumnRenderer" column="{colTarea}" />
			<mx:AdvancedDataGridRendererProvider renderer="biz.fulltime.ui.expediciones.renderers.DescriptionColumnRenderer" column="{colContacto}" />
			<mx:AdvancedDataGridRendererProvider renderer="biz.fulltime.ui.expediciones.renderers.DescriptionColumnRenderer" column="{colDireccion}" />
			<mx:AdvancedDataGridRendererProvider renderer="biz.fulltime.ui.expediciones.renderers.DescriptionColumnRenderer" column="{colDescripcion}" />
			<mx:AdvancedDataGridRendererProvider renderer="biz.fulltime.ui.expediciones.renderers.DescriptionColumnRenderer" column="{colSolicitante}" />
			<mx:AdvancedDataGridRendererProvider renderer="biz.fulltime.ui.expediciones.renderers.AgendaTareaCheckBoxRenderer" column="{colEstado}" />
			<mx:AdvancedDataGridRendererProvider renderer="biz.fulltime.ui.expediciones.renderers.DescriptionColumnRenderer" column="{colFechaInicio}" />
		</mx:rendererProviders>

	</mx:AdvancedDataGrid>

	<s:HGroup width="100%" height="32" paddingLeft="10" paddingRight="10" verticalAlign="middle" includeInLayout="{showDateColumn}" visible="{showDateColumn}">
		<s:Label text="Cantidad de registros: " alpha=".76" />
		<s:Label text="{_dataProvider.length}" />
		<s:Spacer width="100%" />
		<s:CheckBox id="chbPendientes" verticalCenter="0" change="chbPendientes_changeHandler(event)" label="Pendientes" selected="{_mostrarPendientes}" />
	</s:HGroup>

</s:VGroup>
