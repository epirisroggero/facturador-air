<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:components="components.*" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:util="biz.fulltime.util.*"
		 width="100%" height="100%" creationComplete="group1_creationCompleteHandler(event)">

	<fx:Script>
		<![CDATA[
			import biz.fulltime.conf.ServerConfig;
			import biz.fulltime.dto.StockActualDTO;
			import biz.fulltime.model.Articulo;
			import biz.fulltime.model.Documento;
			import biz.fulltime.model.ParametrosAdministracion;
			import biz.fulltime.model.StockActual;
			import biz.fulltime.ui.components.HelpPnl;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			
			import spark.components.Button;
			import spark.components.gridClasses.CellPosition;
			import spark.events.GridSelectionEvent;
			import spark.layouts.HorizontalLayout;
			
			import util.CatalogoFactory;

			private var _articulo:Articulo;
			
			private var _documento:Documento;

			private var _selectedName:String = "";

			private var _filter:String;

			private var cellPos:CellPosition;

			private var changeDocumento:Boolean = true;
			
			private var dirty:Boolean = true;
			
			private var _articulos:ArrayCollection;
			
			private var _articulosCuponera:ArrayCollection;
			
			private var map:Dictionary = new Dictionary();
			
			private var map_stock:Dictionary = new Dictionary();
			
			private var keys:ArrayCollection = new ArrayCollection();
			
			private var stock_articulos:ArrayCollection = new ArrayCollection();

			[Bindable]
			public function get articulos():ArrayCollection {
				return _articulos;
			}

			public function set articulos(value:ArrayCollection):void {
				_articulos = value;
			}

			public function get articulo():Articulo {
				return _articulo;
			}

			public function set articulo(value:Articulo):void {
				_articulo = value;
			}
			
			protected override function commitProperties():void {
				super.commitProperties();
				
				if (dirty) {					
					dgArticulos.filterReset();					
					dirty = false;
				}
			}

			protected function dgArticulos_keyDownHandler(event:KeyboardEvent):void {
				cellPos = dgArticulos.selectedCell;

				if (event.keyCode == Keyboard.F1 || (event.keyCode >= Keyboard.A && event.keyCode <= Keyboard.Z) || (event.keyCode >= Keyboard.NUMBER_0 && event.keyCode <= Keyboard.NUMBER_9) || (event.keyCode >= Keyboard.NUMPAD_0 && event.keyCode <= Keyboard.NUMPAD_9)) { // Se presiono la tecla 'F1' o A-Z o 1-9
					var hlpPanel:HelpPnl = new HelpPnl();
					hlpPanel.addEventListener(CloseEvent.CLOSE, closePnlHandler);
					
					if (cellPos != null) {
						hlpPanel.label = GridColumn(dgArticulos.columns.getItemAt(cellPos.columnIndex)).headerText;
					} else {
						hlpPanel.label = GridColumn(dgArticulos.columns.getItemAt(0)).headerText;
					}

					if (hlpPanel.label == "STOCK") {
						return;
					}
					
					PopUpManager.addPopUp(hlpPanel, this, true);
					PopUpManager.centerPopUp(hlpPanel);

				} else if (event.keyCode == Keyboard.ESCAPE) { // Se presiono la tecla 'ESC'
					if (dgArticulos.hasFilter()) {
						dgArticulos.filterReset();
					} else {
						cancelHandler();
					}

				} else if (event.keyCode == Keyboard.ENTER) {
					var rowIndex:int = dgArticulos.selectedCell.rowIndex;
					_articulo = dgArticulos.dataProvider.getItemAt(rowIndex) as Articulo;
					dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
				}
			}

			//
			// Grid Filter. Tratar de sacar para un componente Genérico
			// 
			private function closePnlHandler(event:CloseEvent):void {
				var helpPnl:HelpPnl = HelpPnl(event.target);
				var filter:String = helpPnl.getValue();
				
				var colName:String = dgArticulos.columns.getItemAt(cellPos.columnIndex).dataField;

				if (filter != null && filter.length > 0) {
					map[colName] = filter;
					if (!keys.contains(colName)) {
						keys.addItem(colName);
					}					
				} else {
					map[colName] = "";
					if (keys.contains(colName)) {
						var index:int = keys.getItemIndex(colName);
						keys.removeItemAt(index);
					}
				}
				
				dgArticulos.filterM(map, keys);
				
				if (dgArticulos.dataProviderLength < 1) {
					map[colName] = "";
					if (keys.contains(colName)) {
						keys.removeItemAt(keys.getItemIndex(colName));
					}
					
					dgArticulos.filterM(map, keys);
				}

				hlFilters.removeAllElements();
				hlFilters.setVisible(keys.length > 0);

				var text:String = "Filtros aplicados: " + (keys.length == 0 ? "Ninguno." : "");
				for each (var i:String in keys) {
					var cmdRemove:Button = new Button();
					cmdRemove.label = "" + getName(i) + ": " + map[i];
					cmdRemove.id = i;
					cmdRemove.addEventListener(MouseEvent.CLICK, cmdButton_clickHandler);
					cmdRemove.styleName = "cerrarButton";
					
					hlFilters.addElement(cmdRemove);
				}
				lblFilters.text = text;
				
				var posX:int = cellPos.columnIndex;

				event.target.removeEventListener(CloseEvent.CLOSE, closePnlHandler);
				PopUpManager.removePopUp(event.target as IFlexDisplayObject);

				callLater(function():void {
					dgArticulos.setFocus();
					if (dgArticulos.dataProviderLength > 0) {
						dgArticulos.selectedCell = new CellPosition(0, posX);
					}
				});

			}
			
			protected function cmdButton_clickHandler(event:MouseEvent):void {
				var colName:String = event.target.id;

				var index:int = keys.getItemIndex(colName);
				keys.removeItemAt(index);

				dgArticulos.filterM(map, keys);
								
				hlFilters.removeAllElements();
				hlFilters.setVisible(keys.length > 0);
				
				var text:String = "Filtros aplicados: " + (keys.length == 0 ? "Ninguno" : "");
				for each (var i:String in keys) {
					var cmdRemove:Button = new Button();
					cmdRemove.label = getName(i) + ": " + map[i];
					cmdRemove.id = i;
					cmdRemove.addEventListener(MouseEvent.CLICK, cmdButton_clickHandler);
					cmdRemove.styleName = "cerrarButton";
					
					hlFilters.addElement(cmdRemove);
				}
				lblFilters.text = text;
				
				var posX:int = cellPos.columnIndex;
				
				event.target.removeEventListener(CloseEvent.CLOSE, closePnlHandler);
				PopUpManager.removePopUp(event.target as IFlexDisplayObject);
				
				callLater(function():void {
					dgArticulos.setFocus();
					if (dgArticulos.dataProviderLength > 0) {
						dgArticulos.selectedCell = new CellPosition(0, posX);
					}
				});
				
			}

			private function getName(field:String):String {
				switch(field) {
					case "codigo":
						return "Código";
					case "codigoOrigen":
						return "Cod. origen";
					case "familia":
						return "Familia";
					case "marca":
						return "Marca";
					case "proveedor":
						return "Proveedor";
					case "nombre":
						return "Descripción"
						
					default:
						return "";
				}
			}

			protected function cmdAceptar_clickHandler(event:MouseEvent):void {
				if (dgArticulos.selectedCell != null) {
					var rowIndex:int = dgArticulos.selectedCell.rowIndex;
					_articulo = dgArticulos.dataProvider.getItemAt(rowIndex) as Articulo;
				} 
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}

			protected function cancelHandler():void {
				_articulo = null;
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}

			protected function group1_creationCompleteHandler(event:FlexEvent):void {
				var remObjStock:RemoteObject = new RemoteObject();
				remObjStock.destination = "CreatingRpc";
				remObjStock.channelSet = ServerConfig.getInstance().channelSet;
				remObjStock.addEventListener(ResultEvent.RESULT, function(evt:ResultEvent):void {
					stock_articulos = evt.result as ArrayCollection;
					for each (var sa:StockActualDTO in stock_articulos) {
						map_stock[sa.articuloId] = sa.cantidad;	
					}
					dgArticulos.dataProvider = articulos;
					
					callLater(function():void {
						dgArticulos.setFocus();
						dgArticulos.selectedCell = new CellPosition(0, 0);
					});
					
				});
				remObjStock.addEventListener(FaultEvent.FAULT, handleFault);
				remObjStock.showBusyCursor = false;
				
				var deposito:String = "1";
				if (documento.comprobante.codigo == "10" || documento.comprobante.codigo == "80" || documento.comprobante.codigo == "90") {
					var param:ParametrosAdministracion = CatalogoFactory.getInstance().parametrosAdministracion;
					deposito = param.depIdParAdm.toString();			
					if (!deposito) {
						deposito = "1";
					}
				}			
				
				// Obtener stock en deposito principal
				remObjStock.getStockEnDeposito(deposito);

			}
			
			public function handleFault(event:FaultEvent):void {
				var message:String = (event.fault && event.fault.rootCause) ? event.fault.rootCause.toString() : null;
				if (!message) {
					message = event.message.toString();
				}				
								
				Alert.show(message, "Error", 4, null, null, StyleManager.getStyleManager(null).getStyleDeclaration('.icons32').getStyle('ErrorIcon'));
			
				dgArticulos.dataProvider = articulos;
			}

			protected function dgArticulos_doubleClickHandler(event:MouseEvent):void {
				var rowIndex:int = dgArticulos.selectedCell.rowIndex;
				_articulo = dgArticulos.dataProvider.getItemAt(rowIndex) as Articulo;
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));

			}
			
			private function codigoNombreLabelFunction(item:Object, column:GridColumn):String {
				var label:String;
				if (item[column.dataField]) {
					return item[column.dataField].nombre;
				} 
				return "";
			}
			
			private function stockLabelFunction(item:Object, column:GridColumn):String {
				var label:String;
				if (item[column.dataField]) {
					var code:String = item[column.dataField];
					var cantidad:String = map_stock[code];
					return cantidad != null ? cantidad : "";
				} 
				return "";
			}


			public function get articulosCuponera():ArrayCollection {
				return _articulosCuponera;
			}

			public function set articulosCuponera(values:ArrayCollection):void {
				_articulosCuponera = new ArrayCollection();
				
				for each (var artId:Articulo in values) {
					for each (var art:Articulo in articulos) {
						if (art.codigo == artId.codigo) {
							_articulosCuponera.addItem(art);
						}
					}
				}				
			}

			public function get documento():Documento {
				return _documento;
			}

			public function set documento(value:Documento):void {
				_documento = value;
			}

			
		]]>
	</fx:Script>

	<fx:Declarations>
		<s:ArrayList id="cols">
			<s:GridColumn width="130" dataField="codigo" headerText="CÓDIGO" />
			<s:GridColumn width="130" dataField="codigoOrigen" headerText="COD. ORIGEN" />
			<s:GridColumn width="190" dataField="familia" headerText="FAMILIA" labelFunction="codigoNombreLabelFunction" />
			<s:GridColumn width="100" dataField="marca" headerText="MARCA" labelFunction="codigoNombreLabelFunction" />
			<s:GridColumn width="125" dataField="proveedor" headerText="PROVEEDOR" labelFunction="codigoNombreLabelFunction" />
			<s:GridColumn dataField="nombre" headerText="NOMBRE" />
			<s:GridColumn width="90" dataField="codigo" headerText="STOCK" labelFunction="stockLabelFunction" >
				<s:itemRenderer>
					<fx:Component>
						<s:DefaultGridItemRenderer textAlign="right">
						</s:DefaultGridItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
		</s:ArrayList>
	</fx:Declarations>

	<s:Panel width="100%" height="100%" styleName="pntLineasVenta">
		<s:VGroup width="100%" height="100%" gap="10" paddingTop="10">
			<s:HGroup width="100%" height="42" paddingBottom="5" paddingTop="10" paddingLeft="5" verticalAlign="middle">
				<s:Label id="lblFilters" fontSize="14" text="Filtros aplicados: Ninguno." />
				<s:HGroup id="hlFilters" />
			</s:HGroup>
			<util:FilteredDataGrid id="dgArticulos" width="100%" height="100%" doubleClick="dgArticulos_doubleClickHandler(event)" keyDown="dgArticulos_keyDownHandler(event)"
								   doubleClickEnabled="true" editable="false" selectionMode="singleCell" columns="{cols}">
			</util:FilteredDataGrid>
		</s:VGroup>
		<s:controlBarContent>
			<s:HGroup width="100%" horizontalAlign="right" paddingBottom="5" paddingTop="5">
				<components:IconButton id="cmdAceptar" click="cmdAceptar_clickHandler(event)" label="Aceptar" styleName="aceptarButton" />
			</s:HGroup>
		</s:controlBarContent>
	</s:Panel>
</s:Group>
