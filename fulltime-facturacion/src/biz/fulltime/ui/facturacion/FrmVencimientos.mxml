<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:components="components.*" xmlns:components1="com.hillelcoren.components.*" xmlns:components2="biz.fulltime.ui.components.*" xmlns:editor="biz.fulltime.ui.editor.*"
		  xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:s="library://ns.adobe.com/flex/spark"
		  width="100%" height="100%" creationComplete="vgroup1_creationCompleteHandler(event)" show="vgroup1_showHandler(event)">
	<fx:Script>
		<![CDATA[
			import biz.fulltime.model.ComisionesDocumento;
			import biz.fulltime.model.CuotaDocumento;
			import biz.fulltime.model.Documento;
			import biz.fulltime.model.ParticipacionVendedor;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.formatters.DateFormatter;
			
			import spark.components.TitleWindow;
			import spark.components.gridClasses.CellPosition;
			import spark.events.GridItemEditorEvent;
			
			import util.CatalogoFactory;

			private var helpWindow:TitleWindow;

			private var _documento:Documento;
			
			public var tieneCambios:Boolean = false;

			[Bindable]
			public var _cuotasDocumento:ArrayCollection = new ArrayCollection();

			public function set cuotasDocumento(values:ArrayCollection):void {
				_cuotasDocumento.removeAll();
				
				for each (var cuota:CuotaDocumento in values) {
					// Clonar las cuotas del documento
					var c:CuotaDocumento = new CuotaDocumento();
					c.documento = cuota.documento;
					c.fecha = cuota.fecha;
					c.importe = cuota.importe;
					c.numero = cuota.numero;

					_cuotasDocumento.addItem(c);
				}
				if (_cuotasDocumento.length == 0) {
					var _nueva:CuotaDocumento = new CuotaDocumento();
					_nueva.fecha = new Date();
					_nueva.importe = "0";

					_cuotasDocumento.addItem(_nueva);
				}
			}

			[Bindable]
			public function get documento():Documento {
				return _documento;
			}

			public function set documento(value:Documento):void {
				_documento = value;
			}

			protected function dg_keyDownHandler(event:KeyboardEvent):void {
				var cellPos:CellPosition = dgVencimientos.selectedCell;

				if ((event.keyCode >= Keyboard.A && event.keyCode <= Keyboard.Z) || (event.keyCode >= Keyboard.NUMBER_0 && event.keyCode <= Keyboard.NUMBER_9) || (event.keyCode >= Keyboard.NUMPAD_0 && event.keyCode <= Keyboard.NUMPAD_9)) { // Se presiono la tecla 'F1' o A-Z o 1-9
					dgVencimientos.startItemEditorSession(cellPos.rowIndex, cellPos.columnIndex);

				} else if (event.keyCode == Keyboard.INSERT) { // Se presiono la tecla 'INSERT'
					agregarVencimiento();
				} else if (event.keyCode == Keyboard.DELETE) { // Se presiono la tecla 'DELETE'
					if (_cuotasDocumento.length > 1) {
						Alert.show("¿Esta usted seguro?", "Borrar Vencimiento", Alert.YES + Alert.NO, null, myCloseHandler2);
					} else {
						Alert.show("Debe tener por lo menos una linea en vencimientos.", "Advertencia");
					}
					

				} else if (event.keyCode == Keyboard.ESCAPE) { // Se presiono la tecla 'ESC'
					cmdAceptar_clickHandler(null);
				} else if (event.keyCode == Keyboard.ENTER) {
					var maxCol:int = dgVencimientos.columnsLength - 2;
					var maxRow:int = dgVencimientos.dataProvider.length - 1;

					var colIndex:int;
					var rowIndex:int;
					if (cellPos == null) {
						colIndex = dgVencimientos.editorColumnIndex;
						rowIndex = dgVencimientos.editorRowIndex;

						callLater(function():void {
							dgVencimientos.setSelectedCell(rowIndex, colIndex);
						});
						return;
					} else {
						colIndex = cellPos.columnIndex + 1;
						rowIndex = cellPos.rowIndex;
					}

					if (colIndex > maxCol) {
						colIndex = 0;
						if (rowIndex == maxRow) {
							agregarVencimiento();
						}
						rowIndex += 1;

					}
					dgVencimientos.setSelectedCell(rowIndex, colIndex);
				}

			}

			private function myCloseHandler2(evt:CloseEvent):void {
				if (evt.detail == Alert.YES) {
					borrarVencimiento();
				}
			}

			protected function cmdAceptar_clickHandler(event:MouseEvent):void {
				if (validate()) {
					_documento.cuotasDocumento.cuotas = _cuotasDocumento;
					dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
				} else {
					Alert.show("El total de cuotas (" + getSumaCuotas().setScale(2, MathContext.ROUND_HALF_UP).toString() + ") es diferente al importe de la factura (" + _documento.total + ").");
				}
			}

			public function validate():Boolean {
				if (getSumaCuotas().compareTo(new BigDecimal(documento.total)) != 0) {
					return false;
				}
				return true;
			}

			public function getSumaCuotas():BigDecimal {
				if (_cuotasDocumento == null) {
					return BigDecimal.ZERO;
				}
				var sum:BigDecimal = BigDecimal.ZERO;
				for each (var cuota:CuotaDocumento in _cuotasDocumento) {
					sum = sum.add(new BigDecimal(cuota.importe));
				}
				return sum;
			}

			protected function cmdCancel_clickHandler(event:MouseEvent):void {
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}

			protected function vgroup1_creationCompleteHandler(event:FlexEvent):void {
				callLater(function():void {
					dgVencimientos.setFocus();
					if (dgVencimientos.dataProviderLength > 0) {
						dgVencimientos.setSelectedCell(0, 0);
					}
				});
			}

			protected function vgroup1_showHandler(event:FlexEvent):void {
				dgVencimientos.setFocus();
			}

			protected function dgVencimientos_gridItemEditorSessionSaveHandler(event:GridItemEditorEvent):void {
				var maxCol:int = dgVencimientos.columnsLength - 1;
				var maxRow:int = dgVencimientos.dataProvider.length - 1;

				var colIndex:int = event.columnIndex + 1;
				var rowIndex:int = event.rowIndex;

				if (colIndex > maxCol) {
					colIndex = 0;
					if (rowIndex == maxRow) {
						agregarVencimiento();
					} else {
						rowIndex += 1;
					}
				}
				dgVencimientos.setSelectedCell(rowIndex, colIndex);
			}

			private function agregarVencimiento():void {
				var total:BigDecimal = getSumaCuotas();


				var cuota:CuotaDocumento = new CuotaDocumento();
				cuota.fecha = new Date();
				cuota.importe = total.compareTo(BigDecimal.ZERO) ? (new BigDecimal(documento.total).subtract(total).toString()) : "0.00";
				cuota.numero = dgVencimientos.dataProvider.length + 1;

				_cuotasDocumento.addItem(cuota);
				
				tieneCambios = true;

			}

			public function borrarVencimiento():void {
				if (_cuotasDocumento.length == 1) {
					Alert.show("Debe tener por lo menos una cuota.", "Advertencia");
					return;
				}
				var rowIndex:int = dgVencimientos.selectedCell.rowIndex;
				var maxIndex:int = dgVencimientos.dataProvider.length - 1;

				_cuotasDocumento.removeItemAt(rowIndex);

				dgVencimientos.invalidateDisplayList();

				callLater(function():void {
					if (rowIndex == 0) {
						dgVencimientos.setSelectedCell(rowIndex, 0);
					} else if (rowIndex < maxIndex - 1) {
						dgVencimientos.setSelectedCell(rowIndex, 0);
					} else {
						dgVencimientos.setSelectedCell(maxIndex - 1, 0);
					}
					dgVencimientos.setSelectedCell(0, 0);
				});
				
				tieneCambios = true;
			}

			private function monto_labelFunction(item:Object, column:GridColumn):String {
				return nf_Espanol_Espanol.format(item);
			}

			private function fecha_labelFunction(item:Object, column:GridColumn):String {
				var dateFormatter:DateFormatter = new DateFormatter();
				dateFormatter.formatString = "DD-MM-YYYY";

				return dateFormatter.format(item.fecha);
			}

			protected function cmdCancelar_clickHandler(event:MouseEvent):void {
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}
			
			protected function cmdRecalcular_clickHandler(event:MouseEvent):void{
				_documento.cuotasDocumento.inicializarCuotas();
				
				cuotasDocumento = _documento.cuotasDocumento.cuotas;
				
				tieneCambios = true;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:NumberFormatter id="nf_Espanol_Espanol" locale="es_ES" fractionalDigits="2"/>
	</fx:Declarations>


	<s:Panel width="100%" height="100%" styleName="pntLineasVenta">
		<s:HGroup width="100%" height="100%" gap="0">

			<s:DataGrid id="dgVencimientos" width="100%" height="100%" keyDown="dg_keyDownHandler(event)" 
						dataProvider="{_cuotasDocumento}" editable="{documento.emitido}" gridItemEditorSessionSave="dgVencimientos_gridItemEditorSessionSaveHandler(event)"
						selectionMode="singleCell">
				<s:columns>
					<s:ArrayList>
						<s:GridColumn width="110" dataField="fecha" editable="true" headerText="Fecha" rendererIsEditable="true">
							<s:itemRenderer>
								<fx:Component>
									<s:GridItemRenderer>
										<mx:DateField width="90%" horizontalCenter="0" verticalCenter="0" selectedDate="@{data.fecha}" formatString="DD/MM/YYYY" locale="es" fontFamily="Helvetica"/>
									</s:GridItemRenderer>
								</fx:Component>
							</s:itemRenderer>
						</s:GridColumn>
						<s:GridColumn dataField="importe" editable="true" headerText="Monto"  >
							<s:itemRenderer>
								<fx:Component>
									<s:DefaultGridItemRenderer textAlign="right">
										<fx:Script>
											<![CDATA[
												import biz.fulltime.model.CuotaDocumento;
												
												override public function prepare(hasBeenRecycled:Boolean):void {
													label = CuotaDocumento(data).documento.moneda.simbolo + " " +  outerDocument.nf_Espanol_Espanol.format(CuotaDocumento(data).importe);
												}
											]]>
										</fx:Script>
									</s:DefaultGridItemRenderer>
								</fx:Component>
							</s:itemRenderer>

						</s:GridColumn>
						<s:GridColumn width="34" headerText="" rendererIsEditable="true">
							<s:itemRenderer>
								<fx:Component>
									<s:GridItemRenderer>
										<fx:Script>
											<![CDATA[
												import mx.controls.Alert;
												import mx.events.CloseEvent;

												protected function cmdRemove_clickHandler(event:MouseEvent):void {
													Alert.show("¿Esta usted seguro?", "Borrar Vencimiento", Alert.YES + Alert.NO, null, myCloseHandler);
												}

												private function myCloseHandler(evt:CloseEvent):void {
													if (evt.detail == Alert.YES) {
														outerDocument.borrarVencimiento();
													}
												}
											]]>
										</fx:Script>

										<s:VGroup width="100%" height="100%" horizontalAlign="center" paddingBottom="2" paddingLeft="2" paddingTop="2" verticalAlign="middle"
												  creationComplete="cmdRemove.setFocus()">
											<s:Button id="cmdRemove" width="100%" height="100%" icon="@Embed('/assets/general/trash.png')" click="cmdRemove_clickHandler(event)" />
										</s:VGroup>
									</s:GridItemRenderer>
								</fx:Component>
							</s:itemRenderer>
						</s:GridColumn>

					</s:ArrayList>
				</s:columns>
			</s:DataGrid>
		</s:HGroup>

		<s:controlBarContent>
			<s:HGroup width="100%" horizontalAlign="right" paddingBottom="0" paddingTop="0">
				<components:IconButton id="cmdRecalcular" click="cmdRecalcular_clickHandler(event)" label="Recalcular" styleName="textButton" />
				<s:Spacer width="100%"/>
				<components:IconButton id="cmdAceptar" click="cmdAceptar_clickHandler(event)" width="100" label="Cerrar" styleName="textButton" />
				<!-- components:IconButton id="cmdCancelar" click="cmdCancelar_clickHandler(event)" label="Cancelar" styleName="textButton" /-->
			</s:HGroup>
		</s:controlBarContent>
	</s:Panel>

</s:HGroup>
