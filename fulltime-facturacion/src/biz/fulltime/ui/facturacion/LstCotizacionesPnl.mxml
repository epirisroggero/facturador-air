<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:components="components.*" xmlns:facturacion="biz.fulltime.ui.facturacion.*" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  width="100%" height="100%" preinitialize="init()">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			
			import biz.fulltime.conf.ServerConfig;
			import biz.fulltime.dto.DocumentoDTO;
			import biz.fulltime.dto.DocumentoQuery;
			import biz.fulltime.event.AbrirFacturaEvent;
			import biz.fulltime.event.FilterEvent;
			import biz.fulltime.model.Documento;
			
			private static const DOCUMENTOS_POR_PAGINA:int = 20;
			
			private var facturasGuardadas:ArrayCollection;
			
			[Bindable]
			private var _documento:Documento;
			
			[Bindable]
			private var _pages:int = 0;
			
			[Bindable]
			private var _current:int = 1;
			
			private var _query:DocumentoQuery;
			
			private var remObjQuery:RemoteObject;
			
			private var remObjCount:RemoteObject;
			
			private var _cotizaciones:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			public function get cotizaciones():ArrayCollection {
				return _cotizaciones;
			}
			
			public function set cotizaciones(value:ArrayCollection):void {
				_cotizaciones = value;
			}

			
			public function init():void {				
				remObjQuery = new RemoteObject();
				remObjQuery.destination = "CreatingRpc";
				remObjQuery.showBusyCursor = true;
				remObjQuery.channelSet = ServerConfig.getInstance().channelSet;
				remObjQuery.addEventListener(ResultEvent.RESULT, resultQuery);
				remObjQuery.addEventListener(FaultEvent.FAULT, onFault);
				
				remObjCount = new RemoteObject();
				remObjCount.destination = "CreatingRpc";
				remObjCount.showBusyCursor = true;
				remObjCount.channelSet = ServerConfig.getInstance().channelSet;
				remObjCount.addEventListener(ResultEvent.RESULT, resultCount);
				remObjCount.addEventListener(FaultEvent.FAULT, onFault);
				
				_query = new DocumentoQuery();
				
				queryDocumentos();
				countDocumentos();
			}
			
			
			
			private function closeHandler(event:Event):void {
				event.target.removeEventListener("close", closeHandler);
				PopUpManager.removePopUp(event.target as IFlexDisplayObject);
			}
			
			protected function cmdCancel_clickHandler(event:MouseEvent):void {
				dispatchEvent(new Event("_close_documento"));
			}
			
			
			/**
			 *  Al dar enter hacer lo mismo que al precionar el boton editar
			 */
			protected function dgCotizaciones_keyDownHandler(event:KeyboardEvent):void {
				// Editar una factura existente
				if (event.keyCode == Keyboard.ENTER) {
					// cargarFactura();
				} else if (event.keyCode == Keyboard.TAB) {
					event.preventDefault();
				}
			}		
			
			private function queryDocumentos():void {
				_query.start = DOCUMENTOS_POR_PAGINA * (_current - 1);
				_query.limit = DOCUMENTOS_POR_PAGINA;
				_query.comprobantes = "1";
				
				remObjQuery.queryDocumentos(_query);
			}
			
			private function resultQuery(event:ResultEvent):void {
				cotizaciones = event.result as ArrayCollection;
				
				callLater(function():void {
					if (cotizaciones.length > 0) {
						dgCotizaciones.setFocus();
						dgCotizaciones.selectedIndex = 0;
					}
				});
				
			}
			
			private function countDocumentos():void {
				_query.start = 0;
				_query.limit = DOCUMENTOS_POR_PAGINA;
				_query.comprobantes = "1";
					
				remObjCount.countDocumentos(_query);
			}
			
			private function resultCount(event:ResultEvent):void {
				var count:Number = event.result as Number;
				_pages = count / DOCUMENTOS_POR_PAGINA;
				if (count % DOCUMENTOS_POR_PAGINA != 0) {
					_pages += 1;
				}
			}
			
			private function date_labelFunction(item:Object, column:GridColumn):String {
				var dateFormatter:DateFormatter = new DateFormatter();
				dateFormatter.formatString = "DD-MM-YYYY";
				
				return dateFormatter.format(item.fecha);
			}
			
			private function cliente_labelFunction(item:Object, column:GridColumn):String {
				return item.cliente.codigo + " - " + item.cliente.nombre;
			}
			
			private function moneda_labelFunction(item:Object, column:GridColumn):String {
				return item.moneda.codigo + " - " + item.moneda.nombre;
			}
			
			private function comprobante_labelFunction(item:Object, column:GridColumn):String {
				return item.comprobante.nombre;
			}
			
			private function comprobante_cod_labelFunction(item:Object, column:GridColumn):String {
				return item.comprobante.codigo + " - " + item.comprobante.nombre;
			}
			
			private function emitido_labelFunction(item:Object, column:GridColumn):String {
				if (item.tipoComprobante != "32") {
					if (item.emitido) {
						return "SI";
					} else {
						return "NO";
					}
				}
				return "";
			}
			
			private function pendiente_labelFunction(item:Object, column:GridColumn):String {
				if (item.tipoComprobante == "32") {
					if (item.pendiente) {
						return "SI";
					} else {
						return "NO";
					}
				}
				return "";
			}
			
			
			public function refrescar():void {
				if (remObjQuery) {
					_current = 1;
					queryDocumentos();
				}
				if (remObjCount) {
					_pages = 0;
					countDocumentos();
				}
			}
			
			protected function onAddedToStageHandler(event:Event):void {
				refrescar();
			}
			
			private function onFault(event:FaultEvent):void {
				Alert.show(event.fault.faultString, 'Error');
			}
			
			
			protected function pnlFilters_creationCompleteHandler(event:FlexEvent):void {
				pnlFilters.addEventListener(FilterEvent.FILTRAR_DOCUMENTOS, filtrarDocumentos);
				pnlFilters.addEventListener(FilterEvent.BORRAR_FILTROS, borrarFiltros);
			}
			
			private function filtrarDocumentos(event:FilterEvent):void {
				_query = event.docQuery as DocumentoQuery;
				
				_current = 1;
				
				_query.start = 0;
				_query.limit = DOCUMENTOS_POR_PAGINA;
				_query.comprobantes = "1";
				
				remObjCount.countDocumentos(_query);
				remObjQuery.queryDocumentos(_query);
			}
			
			private function borrarFiltros(event:FilterEvent):void {
				_query = new DocumentoQuery();
				_query.start = 0;
				_query.limit = DOCUMENTOS_POR_PAGINA;
				
				_query.comprobantes = "1";
				
				_current = 1;
				
				remObjCount.countDocumentos(_query);
				remObjQuery.queryDocumentos(_query);
			}
			
						
			
			//--------------------------------------------------------------------------
			//
			//  Overridden methods: UIComponent
			//
			//--------------------------------------------------------------------------
			
			/**
			 *  @private
			 */
			override protected function commitProperties():void {
				super.commitProperties();
				
			}
			
			protected function cmdSelectAll_clickHandler(event:MouseEvent):void {
				for each (var cotizacion:DocumentoDTO in cotizaciones) {
					cotizacion.selected = true;
				}
				
			}
			
			protected function cmdUnselectAll_clickHandler(event:MouseEvent):void {
				for each (var cotizacion:DocumentoDTO in cotizaciones) {
					cotizacion.selected = false;
				}
			}
			
			protected function cmdRemove_clickHandler(event:MouseEvent):void {
				//Alert.buttonWidth = 60;
				
				var alert:Alert = Alert.show("¿Esta seguro de borrar las cotizaciones seleccionadas?", "Borrar cotizaciones", Alert.YES + Alert.NO, null, myCloseHandler);
				alert.width = 340;
				alert.height = 180
				
				
			}
			
			private function myCloseHandler(evt:CloseEvent):void {
				if (evt.detail == Alert.YES) {
					var selectedItems:String = "";
					for each (var cotizacion:DocumentoDTO in cotizaciones) {
						if (cotizacion.selected) {
							selectedItems += cotizacion.docId + ",";
						}
					}
					selectedItems = selectedItems.substring(0, selectedItems.length - 1);
					
					var remObj:RemoteObject = new RemoteObject();
					remObj.destination = "CreatingRpc";
					remObj.showBusyCursor = true;
					remObj.channelSet = ServerConfig.getInstance().channelSet;
					remObj.addEventListener(ResultEvent.RESULT, resultRemove);
					remObj.addEventListener(FaultEvent.FAULT, onFault);
					
					remObj.borrarCotizaciones(selectedItems);

				}
			}
			
			private function resultRemove(event:ResultEvent):void {
				remObjCount.countDocumentos(_query);
				remObjQuery.queryDocumentos(_query);
			}

			public function abrirCotizacion(docId:String):void {
				dispatchEvent(new AbrirFacturaEvent(AbrirFacturaEvent.ABRIR_DOCUMENTO, docId));
			}

		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:ArrayList id="cols">
			<s:GridColumn width="40" dataField="selected" headerText="">
				<s:itemRenderer>
					<fx:Component>
						<s:GridItemRenderer>
							<fx:Script>
								<![CDATA[
									import biz.fulltime.dto.DocumentoDTO;
									
									protected function checkBox_changeHandler(event:Event):void {
										DocumentoDTO(data).selected = checkBox.selected;
									}
								]]>
							</fx:Script>
							
							<s:VGroup width="100%" height="100%" horizontalAlign="center" paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2" verticalAlign="middle">
								<s:CheckBox id="checkBox" x="5" y="5" verticalCenter="0" change="checkBox_changeHandler(event)" selected="{DocumentoDTO(data).selected}" />
							</s:VGroup>
						</s:GridItemRenderer>
						
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
			<s:GridColumn width="70" dataField="serie" headerText="Serie" />
			<s:GridColumn width="50" dataField="numero" headerText="Número">
				<s:itemRenderer>
					<fx:Component>
						<s:DefaultGridItemRenderer textAlign="right" />
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
			<s:GridColumn width="85" dataField="fecha" headerText="Fecha" labelFunction="date_labelFunction" />
			<s:GridColumn width="90" dataField="moneda" headerText="Moneda" labelFunction="moneda_labelFunction" />
			<s:GridColumn width="90" dataField="total" headerText="Total">
				<s:itemRenderer>
					<fx:Component>
						<s:DefaultGridItemRenderer textAlign="right">
							<fx:Script>
								<![CDATA[
									import biz.fulltime.dto.DocumentoDTO;
									import biz.fulltime.model.Moneda;
									
									import util.CatalogoFactory;
									
									override public function prepare(hasBeenRecycled:Boolean):void {
										if (data) {											
											var moneda:String = DocumentoDTO(data).moneda.codigo;
											var simbolo:String = "";
											for each (var m:Moneda in CatalogoFactory.getInstance().monedas) {
												if (m.codigo == moneda) {
													simbolo = m.simbolo;
												}
											}	
											if (DocumentoDTO(data).total) {
												label = simbolo + " " + outerDocument.nf_Espanol_Espanol.format(DocumentoDTO(data).total);
											} else {
												label = simbolo + " " + outerDocument.nf_Espanol_Espanol.format(0);
											}
										}
									}
								]]>
							</fx:Script>
							
						</s:DefaultGridItemRenderer>
						
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
			<s:GridColumn dataField="cliente" headerText="Cliente" labelFunction="cliente_labelFunction"/>
			<s:GridColumn width="32" headerText="">
				<s:itemRenderer>
					<fx:Component>
						<s:GridItemRenderer>
							<fx:Script>
								<![CDATA[
									import biz.fulltime.dto.DocumentoDTO;
									
									protected function cmdAbrir_clickHandler(event:MouseEvent):void {
										var docId:String = DocumentoDTO(data).docId;
										
										outerDocument.abrirCotizacion(docId);
									}
								]]>
							</fx:Script>
							
							<s:VGroup width="100%" height="100%" horizontalAlign="center" paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2" verticalAlign="middle">
								<s:Button id="cmdOpen" width="100%" height="100%" icon="@Embed('/assets/general/Open.png')" click="cmdAbrir_clickHandler(event)" toolTip="Ver Cotización" />
							</s:VGroup>
						</s:GridItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>

		</s:ArrayList>
		
		<s:NumberFormatter id="nf_Espanol_Espanol" locale="es_ES" fractionalDigits="2"/>
		
	</fx:Declarations>
	<s:VGroup width="100%" height="100%" gap="0">
		<facturacion:FiltrosPnl id="pnlFilters" width="100%" creationComplete="pnlFilters_creationCompleteHandler(event)" soloCotizaciones="true" dropShadowVisible="false" borderAlpha="0"/>
		<s:Panel width="100%" height="100%" backgroundAlpha="0.0" title="Listado de Cotizaciones" dropShadowVisible="false" borderAlpha="0">
			<s:VGroup width="100%" height="100%">
				
				<s:HGroup width="100%" height="100%" gap="10">
					<s:DataGrid id="dgCotizaciones" width="100%" height="100%" keyDown="dgCotizaciones_keyDownHandler(event)" sortableColumns="false" columns="{cols}" focusEnabled="true" dataProvider="{cotizaciones}"/>
					<s:VGroup width="140" paddingRight="10" paddingTop="32">
						<s:Button id="cmdSelectAll" width="100%" height="32" click="cmdSelectAll_clickHandler(event)" label="Marcar todos" styleName="textButton"/>
						<s:Button id="cmdUnselectAll" width="100%" height="32" click="cmdUnselectAll_clickHandler(event)" label="Desmarcar todos" styleName="textButton"/>
						<s:Spacer height="16" />
						<s:Button id="cmdRemove" width="100%" height="32" click="cmdRemove_clickHandler(event)" label="Borrar marcados" styleName="textButton"/>
					</s:VGroup>
				</s:HGroup>
				
				<s:HGroup width="100%" horizontalAlign="center" verticalAlign="middle">
					<components:IconButton id="cmdFirst" width="24" height="24" cornerRadius="6" click="{_current=1; queryDocumentos()}" enabled="{_current&gt;1}"
										   styleName="firstButton" />
					
					<components:IconButton id="cmdPrevious" width="24" height="24" cornerRadius="6" click="{_current--; queryDocumentos()}" enabled="{_current&gt;1}"
										   styleName="previousButton" />
					<s:Label width="90" fontSize="16" paddingLeft="5" paddingRight="5" paddingTop="4" textAlign="center" verticalAlign="middle"
							 styleName="myLabel" text="{_current} de {_pages}">
						<s:filters>
							<s:DropShadowFilter distance="2" alpha="0.4" />
						</s:filters>
					</s:Label>
					<components:IconButton id="cmdNext" width="24" height="24" cornerRadius="6" click="{_current++; queryDocumentos()}" enabled="{_current &lt; _pages}"
										   styleName="nextButton" />
					<components:IconButton id="cmdLast" width="24" height="24" cornerRadius="6" click="{_current = _pages; queryDocumentos()}"
										   enabled="{_current &lt; _pages}" styleName="lastButton" />
				</s:HGroup>
				<s:Spacer height="5" />
				
			</s:VGroup>
			
			<s:controlBarContent>
				<s:HGroup width="100%" horizontalAlign="right" paddingBottom="0" paddingTop="0" verticalAlign="middle">
					<mx:Image id="loader1" source="@Embed(source='assets/general/logo_oscuro.gif')" alpha=".5" scaleX=".25" scaleY=".25" />
					<s:Spacer width="100%" />
				</s:HGroup>
			</s:controlBarContent>
		</s:Panel>
	</s:VGroup>

</s:VGroup>
