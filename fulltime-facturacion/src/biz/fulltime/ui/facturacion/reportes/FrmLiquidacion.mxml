<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:components="biz.fulltime.ui.components.*" xmlns:components1="components.*" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 width="100%" height="100%" creationComplete="panel1_creationCompleteHandler(event)" styleName="pntLineasVenta" title="Liquidación" xmlns:loader="biz.fulltime.util.loader.*" xmlns:tabBar="skin.components.tabBar.*" xmlns:reportes="biz.fulltime.ui.facturacion.reportes.*">
	
	<fx:Script>
		<![CDATA[
			import biz.fulltime.conf.ServerConfig;
			import biz.fulltime.dto.ReportParameters;
			import biz.fulltime.event.ExportToCSVEvent;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ICollectionView;
			import mx.collections.XMLListCollection;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			
			import nochump.util.zip.ZipEntry;
			import nochump.util.zip.ZipFile;
			
			import org.alivepdf.pdf.PDF;
			
			import spark.components.TitleWindow;
			
			import util.ErrorPanel;
			
			private var _cotizacionesXML:XML;
			
			[Bindable]
			public var moneyDP:ArrayCollection;
			
			private var myPDF:PDF;
			
			private var helpWindow:TitleWindow;
			
			private var repParameters:ReportParameters;
			
			[Embed(source = "/assets/MyriadWebPro.TTF", mimeType = "application/octet-stream")]
			private var fontStream:Class;
			
			[Embed(source = "/assets/myriad.afm", mimeType = "application/octet-stream")]
			private var afmStream:Class;
			
			private var remObj:RemoteObject;

			[Bindable]
			private var _zipFile:ZipFile;

			[Bindable]
			public var loading:Boolean = false;
			
			[Bindable]
			public var started:Boolean;

			
			protected function panel1_creationCompleteHandler(event:FlexEvent):void {
				remObj = new RemoteObject();
				remObj.destination = "CreatingRpc";
				remObj.channelSet = ServerConfig.getInstance().channelSet;
				remObj.showBusyCursor = true;
				remObj.addEventListener(ResultEvent.RESULT, onResult);
				remObj.addEventListener(FaultEvent.FAULT, onFault);
			}
			
			private var _changeEntries:Boolean;
			
			[Bindable]
			private var entry_cobranzas:Array = new Array();
			[Bindable]
			private var entry_1:ZipEntry;
			[Bindable]
			private var entry_2:ZipEntry;
			[Bindable]
			private var entry_3:ZipEntry;

			
			override protected function commitProperties():void {
				super.commitProperties();
				
				if (_changeEntries) {
					_changeEntries = false;
					
					var count_entries:int = _zipFile.entries.length;
					
					entry_cobranzas = new Array();
					for (var i:int = 0; i < count_entries - 3; i++)  {
						entry_cobranzas[i] = _zipFile.entries[i];		
					}
					
					entry_1 = _zipFile.entries[count_entries - 3];
					entry_2 = _zipFile.entries[count_entries - 2];
					entry_3 = _zipFile.entries[count_entries - 1];
				}
				
			}


			private function onResult(event:ResultEvent):void {
				loading = false;
				started = true;
				var byteArray:ByteArray = event.result as ByteArray;
				if (byteArray) {
					_zipFile = new ZipFile(byteArray);
				} else {
					_zipFile = new ZipFile(new ByteArray());
				}
				_changeEntries = true;
				
				invalidateProperties();
				
								
			}
						
			protected function resetFields():void {
			}
			
			protected function cmdExportar_clickHandler(event:MouseEvent):void {
				loading = true;
				
				if (chbFechaCorte.selected) {
					remObj.getReporteLiquidacion(txtFechaDesde.selectedDate, txtFechaHasta.selectedDate, txtFechaCorte.selectedDate, txtGastosPeriodos.value.toString());
				} else {
					remObj.getReporteLiquidacion(txtFechaDesde.selectedDate, txtFechaHasta.selectedDate, txtGastosPeriodos.value.toString());
				}
			}
			
			
			
			//----------------------------- 
			// Private function 
			//----------------------------- 
			/**
			 *
			 * A partir de un elemento pasado se genera un ICollectionView
			 * para su correcto recorrido
			 *
			 * @param obj         Objeto a convertir a ICollectionView
			 *
			 *
			 * @return referencia a un ICollectionView.
			 *
			 */
			static private function getDataProviderCollection(obj:Object):ICollectionView {
				if ((obj is Number && isNaN(obj as Number)) || (!(obj is Number) && obj == null)) {
					return null;
				} else if (obj is ICollectionView) {
					return obj as ICollectionView;
				} else if (obj is Array) {
					return new ArrayCollection(obj as Array);
				} else if (obj is XMLList) {
					return new XMLListCollection(obj as XMLList);
				} else if (obj is XML) {
					var col:XMLListCollection = new XMLListCollection();
					col.addItem(obj);
					return col;
				} else if (obj is Object) {
					return new ArrayCollection([obj]);
				} else {
					return null;
				}
			}
			
			
			
			private function onFault(event:FaultEvent):void {
				loading = false;
				
				if (helpWindow == null) {
					helpWindow = new TitleWindow();
					helpWindow.title = "Error";
					helpWindow.width = 360;
					
					
					var errorPanel:ErrorPanel = new ErrorPanel();
					errorPanel.errorText = event.fault.faultString + "[" + event.fault.faultCode + "]";
					errorPanel.detailsText = event.fault.toString();
					
					PopUpManager.addPopUp(helpWindow, this, true);
					PopUpManager.centerPopUp(helpWindow);
					
					helpWindow.addEventListener(CloseEvent.CLOSE, closeHandler);
					errorPanel.addEventListener(CloseEvent.CLOSE, closeHandler);
					
					helpWindow.y = 60;
					
					helpWindow.addElement(errorPanel);
				}
				
			}
			
			private function closeHandler(event:Event):void {
				helpWindow.removeEventListener(CloseEvent.CLOSE, closeHandler);
				PopUpManager.removePopUp(helpWindow as IFlexDisplayObject);
				helpWindow = null;
			}
						

			protected function txtFechaDesde_creationCompleteHandler(event:FlexEvent):void {
				var fechaDesde:Date = new Date();
				if (fechaDesde.date <= 15) {
					fechaDesde = util.DateUtil.clone(fechaDesde).subtract(util.DateUtil.MONTH, 1).datetime;
				} 
				fechaDesde.date = Math.min(fechaDesde.date, 15);
				txtFechaDesde.selectedDate = fechaDesde;
				
			}
												
			protected function myTabBar_creationCompleteHandler(event:FlexEvent):void {
				myTabBar.setCloseableTab(0, false);
				myTabBar.setCloseableTab(1, false);
				myTabBar.setCloseableTab(2, false);
				myTabBar.setCloseableTab(3, false);
			}
			
			private function labelSize(item:Object, column:GridColumn):String {
				return sizeFormatter.format(item[column.dataField]);
			}
			
			private function labelModified(item:Object, column:GridColumn):String {
				return dateFormatter.format(new Date(item.time));
			}
			
			private function labelCrc(item:Object, column:GridColumn):String {
				return item.crc.toString(16).toUpperCase();
			}
			
			public function abrirArchivoZip():void {
				var index:int = dgEntries.selectedIndex;
				var entry:ZipEntry = _zipFile.entries[index];
				
				trace(entry.name);
				// extract the entry's data from the zip
				var byteArray:ByteArray = _zipFile.getInput(entry);
				
				dispatchEvent(new ExportToCSVEvent(ExportToCSVEvent.EXPORT_TO_CSV, byteArray, entry.name));
			}

			
			protected function txtGastosPeriodos_creationCompleteHandler(event:FlexEvent):void  {
				var fecha:Date = new Date(2016, 11, 31, 12, 0, 0);
				txtFechaCorte.selectedDate = fecha;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<mx:NumberFormatter id="sizeFormatter" useThousandsSeparator="true" />
		<mx:DateFormatter id="dateFormatter" formatString="MM/DD/YYYY L:NN A" />
	</fx:Declarations>
	
	<s:BorderContainer width="100%" height="100%" backgroundAlpha="1" backgroundColor="#FAFAFA" borderAlpha="0">
		<s:layout>
			<s:VerticalLayout paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" gap="0" />
		</s:layout>

		<s:Panel width="100%" styleName="pnlForm" title="Filtros" minHeight="0">
			<s:layout>
				<s:VerticalLayout paddingBottom="0" paddingLeft="10" paddingRight="0" paddingTop="0" gap="0" />
			</s:layout>
			<s:HGroup width="100%" paddingTop="10" gap="25">
				<s:VGroup>
					<s:Label text="Fecha desde" />
					<mx:DateField id="txtFechaDesde" yearNavigationEnabled="true" fontFamily="Helvetica" creationComplete="txtFechaDesde_creationCompleteHandler(event)"/>
				</s:VGroup>
				<s:VGroup>
					<s:Label text="Fecha hasta" />
					<mx:DateField id="txtFechaHasta" selectedDate="{new Date()}" fontFamily="Helvetica" yearNavigationEnabled="true"/>
				</s:VGroup>
				<s:VGroup>
					<s:Label text="Gastos período" />
					<s:NumericStepper id="txtGastosPeriodos" width="90" value="0.0" maximum="9999999" allowValueWrap="true" textAlign="right" creationComplete="txtGastosPeriodos_creationCompleteHandler(event)"/>
				</s:VGroup>
				<s:VGroup paddingLeft="45">
					<s:CheckBox id="chbFechaCorte" label="Fecha de corte" selected="false"/>
					<mx:DateField id="txtFechaCorte" fontFamily="Helvetica" yearNavigationEnabled="true" enabled="{chbFechaCorte.selected}"/>
				</s:VGroup>
				<s:HGroup paddingLeft="20" paddingBottom="10" paddingRight="10" paddingTop="10">
					<components1:IconButton id="cmdExportar" click="cmdExportar_clickHandler(event)" styleName="exportButton" label="Generar" />
				</s:HGroup>
			</s:HGroup>
		</s:Panel> 
		<s:HGroup width="100%" paddingBottom="10">
			<s:Line width="100%" height="4">
				<s:stroke>
					<s:SolidColorStroke id="lineStroke3" color="blue" alpha="0.4" />
				</s:stroke>
			</s:Line>
		</s:HGroup>

		<s:Group width="100%" height="100%">
			<s:VGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" visible="{loading}">
				<loader:LoadComponent label="Generando archivos"/>
			</s:VGroup>			
			
			<s:VGroup width="100%" height="100%" gap="0" visible="{!loading}" enabled="{started}">
				<s:HGroup width="100%" paddingLeft="20">
					<tabBar:MyTabBar2 id="myTabBar" dataProvider="{myViewStack}" requireSelection="true" creationComplete="myTabBar_creationCompleteHandler(event)"/>	
				</s:HGroup>		
				
				<s:Group width="100%" height="100%">
					<mx:ViewStack id="myViewStack" width="100%" height="100%" backgroundAlpha="0" paddingLeft="5" paddingRight="5">
						<s:NavigatorContent label="Cobranzas/Contados" id="cobranzas">
							<!--reportes:FrmCSVView id="frmCobranzas" zipFile="{_zipFile}" entry="{entry_0}"/-->
							
							<s:Group width="100%" height="100%" visible="{!loading}">
								<s:DataGrid id="dgEntries" width="100%" height="100%" dataProvider="{new ArrayCollection(entry_cobranzas)}" rowHeight="32">
									<s:columns>
										<s:ArrayList>
											<s:GridColumn headerText="Nombre" dataField="name" />
											<s:GridColumn width="140" headerText="Tamaño (bytes)" dataField="size" labelFunction="labelSize" >
												<s:itemRenderer>
													<fx:Component>
														<s:DefaultGridItemRenderer textAlign="right" />
													</fx:Component>
												</s:itemRenderer>
											</s:GridColumn>
											<s:GridColumn headerText="Fecha de Modificacón" labelFunction="labelModified" width="160" />
											<s:GridColumn width="32" headerText="">
												<s:itemRenderer>
													<fx:Component>
														<s:GridItemRenderer>
															<fx:Script>
																<![CDATA[
																	protected function cmdAbrir_clickHandler(event:MouseEvent):void {
																		outerDocument.abrirArchivoZip();
																	}
																]]>
															</fx:Script>
															
															<s:VGroup width="100%" height="100%" horizontalAlign="center" paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2" verticalAlign="middle">
																<s:Button id="cmdOpen" width="100%" height="100%" icon="@Embed('/assets/general/Open.png')" click="cmdAbrir_clickHandler(event)"
																		  toolTip="Abrir Excel" />
															</s:VGroup>
														</s:GridItemRenderer>
													</fx:Component>
												</s:itemRenderer>
											</s:GridColumn>
										</s:ArrayList>
									</s:columns>
								</s:DataGrid>
							</s:Group>

							
						</s:NavigatorContent>
						<!--s:NavigatorContent label="Contados" id="contados">
							<reportes:FrmCSVView id="frmContados" zipFile="{_zipFile}" entry="{entry_1}"/>
						</s:NavigatorContent-->
						<s:NavigatorContent label="Renta financiera Global" id="redjef">
							<reportes:FrmCSVView id="frmRentaFinanciera" zipFile="{_zipFile}" entry="{entry_1}"/>
						</s:NavigatorContent>
						<s:NavigatorContent label="Redistribución Jefaturas" id="jefaturas">
							<reportes:FrmCSVView id="frmJefaturas" zipFile="{_zipFile}" entry="{entry_2}"/>
						</s:NavigatorContent>
						<s:NavigatorContent label="Resumen Entregas" id="resent">
							<reportes:FrmCSVView id="frmResumen" zipFile="{_zipFile}" entry="{entry_3}"/>
						</s:NavigatorContent>					
					</mx:ViewStack>
				</s:Group>
			</s:VGroup>
		</s:Group>
	</s:BorderContainer>
	
	<s:controlBarContent>
		<s:HGroup width="100%" paddingBottom="0" paddingTop="0" verticalAlign="middle">
			<mx:Image id="loader1" source="@Embed(source='assets/general/logo_oscuro.gif')" alpha=".5" scaleX=".25" scaleY=".25" />
			<s:Spacer width="100%" />
		</s:HGroup>
	</s:controlBarContent>
</s:Panel>
