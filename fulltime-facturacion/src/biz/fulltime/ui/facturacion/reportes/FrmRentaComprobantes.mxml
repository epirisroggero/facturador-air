<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:components="biz.fulltime.ui.components.*" xmlns:components1="components.*" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:loader="biz.fulltime.util.loader.*"
		 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:renderers="biz.fulltime.ui.renderers.*" xmlns:s="library://ns.adobe.com/flex/spark"
		 width="100%" height="100%" creationComplete="creationCompleteHandler(event)" preinitialize="init(event)" contentBackgroundAlpha=".5">

	<fx:Script>
		<![CDATA[
			import biz.fulltime.conf.GeneralOptions;
			import biz.fulltime.conf.ServerConfig;
			import biz.fulltime.dto.CodigoNombre;
			import biz.fulltime.dto.DocumentoDTO;
			import biz.fulltime.dto.DocumentoQuery;
			import biz.fulltime.dto.ReportParameters;
			import biz.fulltime.dto.TableReportResult;
			import biz.fulltime.event.ExportToExcelEvent;
			import biz.fulltime.event.ExportToPDFEvent;
			import biz.fulltime.model.Comprobante;
			import biz.fulltime.model.CotizacionesModel;
			import biz.fulltime.model.Moneda;
			import biz.fulltime.model.Usuario;
			
			import com.as3xls.xls.ExcelFile;
			import com.as3xls.xls.Sheet;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ICollectionView;
			import mx.collections.IViewCursor;
			import mx.collections.XMLListCollection;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			import mx.utils.StringUtil;
			
			import org.alivepdf.colors.RGBColor;
			import org.alivepdf.data.Grid;
			import org.alivepdf.data.GridColumn;
			import org.alivepdf.display.Display;
			import org.alivepdf.fonts.CodePage;
			import org.alivepdf.fonts.CoreFont;
			import org.alivepdf.fonts.EmbeddedFont;
			import org.alivepdf.fonts.FontFamily;
			import org.alivepdf.fonts.IFont;
			import org.alivepdf.layout.Align;
			import org.alivepdf.layout.Orientation;
			import org.alivepdf.layout.Size;
			import org.alivepdf.layout.Unit;
			import org.alivepdf.pdf.PDF;
			
			import spark.collections.Sort;
			import spark.collections.SortField;
			import spark.components.TitleWindow;
			import spark.events.GridSelectionEvent;
			import spark.formatters.NumberFormatter;
			
			import util.CatalogoFactory;
			import util.ErrorPanel;

			private var _cotizacionesXML:XML;

			[Bindable]
			public var moneyDP:ArrayCollection;

			private var myPDF:PDF;

			private var helpWindow:TitleWindow;

			private var repParameters:ReportParameters;

			[Embed(source = "/assets/MyriadWebPro.TTF", mimeType = "application/octet-stream")]
			private var fontStream:Class;

			[Embed(source = "/assets/myriad.afm", mimeType = "application/octet-stream")]
			private var afmStream:Class;

			[Bindable]
			public var comprobantes:ArrayCollection = new ArrayCollection();

			[Bindable]
			public var comprobantesSelected:ArrayCollection = new ArrayCollection();

			[Bindable]
			public var loading:Boolean = false;

			[Bindable]
			public var hasPermSupervisor:Boolean = false;

			private var remObjQuery:RemoteObject;

			protected function init(event:FlexEvent):void {
				remObjQuery = new RemoteObject();
				remObjQuery.destination = "CreatingRpc";
				remObjQuery.showBusyCursor = true;
				remObjQuery.channelSet = ServerConfig.getInstance().channelSet;
				remObjQuery.addEventListener(ResultEvent.RESULT, resultQuery);
				remObjQuery.addEventListener(FaultEvent.FAULT, onFault);

			}

			protected function creationCompleteHandler(event:FlexEvent):void {
				resetRemoteObject();

				var user:Usuario = GeneralOptions.getInstance().loggedUser;
				hasPermSupervisor = user.esSupervisor();

				for each (var c:Comprobante in CatalogoFactory.getInstance().comprobantes) {
					var comprobante:Object = new Object();
					comprobante.codigo = Number(c.codigo);
					comprobante.nombre = c.nombre;

					comprobantes.addItem(comprobante);
				}

			}

			protected function cmdExportar_clickHandler(event:MouseEvent):void {
				exportExcel();
			}

			protected function exportExcel():void {
				var repColumns:ArrayCollection = new ArrayCollection();
				repColumns.addItem("Fecha");
				repColumns.addItem("Codigo");
				repColumns.addItem("Serie/Nro.");
				repColumns.addItem("Cliente");
				repColumns.addItem("Moneda");
				repColumns.addItem("SubTotal");
				repColumns.addItem("Iva");
				repColumns.addItem("Total");
				repColumns.addItem("Monto Neto");
				repColumns.addItem("Costo");
				repColumns.addItem("Renta");				
				repColumns.addItem("% de Renta");

				/*
				var formatter:DateFormatter = new DateFormatter();
				formatter.formatString = "DD/MM/YYYY";
				*/

				// create a columns Array
				var columns:Array = new Array();
				var col:int = 0;
				for each (var colName:String in repColumns) {
					var column:Object = new Object();
					column.header = StringUtil.trim(colName).toUpperCase();
					column.value = "col_" + col;
					columns.push(column);
					col++;
				}
				var dataProvider:Array = new Array();

				var aux:ArrayCollection = dgFacturas.dataProvider as ArrayCollection;
				var documentos:ArrayCollection = sort(aux, "serieNumero", false);
				
				var montoNetoTotal:BigDecimal = BigDecimal.ZERO;
				var montoTotal:BigDecimal = BigDecimal.ZERO;
				var montoCosto:BigDecimal = BigDecimal.ZERO;
				var montoRenta:BigDecimal = BigDecimal.ZERO;
			
				
				for each (var documento:DocumentoDTO in documentos) {
					if (documento.comprobante.codigo == '98') {
						if (documento.pendiente) continue;
					} else if (!documento.emitido) {
						continue;
					}
					var data:Object = new Object();
					data.col_0 = documento.fecha;
					data.col_1 = documento.comprobante.codigo + " - " + documento.comprobante.nombre;
					data.col_2 = documento.serieNumero;
					data.col_3 = documento.cliente ? documento.cliente.nombre : "";
					data.col_4 = documento.moneda ? documento.moneda.nombre : "";

					var _esDevolucion:Boolean = false;
					for each(var comprobante:Comprobante in CatalogoFactory.getInstance().comprobantes) {
						if (comprobante.codigo == documento.comprobante.codigo) {
							_esDevolucion = comprobante.isDevolucion();
							break;
						}
					}

					var subtotal:BigDecimal = new BigDecimal(documento.subtotal ? documento.subtotal : "0").setScale(2, MathContext.ROUND_HALF_EVEN);
					data.col_5 = _esDevolucion ? subtotal.negate() : subtotal;
					
					var iva:BigDecimal = new BigDecimal(documento.iva ? documento.iva : "0").setScale(2, MathContext.ROUND_HALF_EVEN);
					data.col_6 =  _esDevolucion ? iva.negate() : iva;
					
					var total_t:BigDecimal = new BigDecimal(documento.total ? documento.total : "0").setScale(2, MathContext.ROUND_HALF_EVEN);
					data.col_7 = _esDevolucion ? total_t.negate() : total_t;
					
					var monto_neto:BigDecimal = comprobante.aplicarDescuentoPrometido(new BigDecimal(documento.subtotal ? documento.subtotal : "0")).setScale(2, MathContext.ROUND_HALF_EVEN);
					data.col_8 = _esDevolucion ?  monto_neto.negate() : monto_neto;
					
					var costo2:BigDecimal = new BigDecimal(documento.costo ? documento.costo : "0").setScale(2, MathContext.ROUND_HALF_EVEN);
					data.col_9 = costo2.setScale(2, MathContext.ROUND_HALF_EVEN).toString();
					
					
					if (documento.costo && documento.subtotal) {
						var costo:BigDecimal = new BigDecimal(documento.costo);
						var subtotal2:BigDecimal = new BigDecimal(documento.subtotal);
						var total:BigDecimal = new BigDecimal(documento.total);
						var renta:BigDecimal = BigDecimal.ZERO;

						var costoCSigno:BigDecimal = _esDevolucion ? costo.negate() : costo;
						
						var ventaNeta:BigDecimal = comprobante.aplicarDescuentoPrometido(subtotal2); //llamemosle neta, mas por historia que otra cosa
						ventaNeta = comprobante.isDevolucion() ? ventaNeta.negate().setScale(4, MathContext.ROUND_UP) : ventaNeta.setScale(4, MathContext.ROUND_UP);
						
						if (documento.comprobante.codigo == '98') {
							renta = total.negate();
						} else {
							renta = ventaNeta.subtract(costoCSigno);
						}
						data.col_10 = renta.setScale(2, MathContext.ROUND_HALF_EVEN).toString();
						
						if (documento.comprobante.codigo == '98') {
							data.col_11 = BigDecimal.ZERO.setScale(2, MathContext.ROUND_HALF_EVEN).toString();
						} else {
							if (ventaNeta.setScale(2, MathContext.ROUND_HALF_EVEN).toString() == BigDecimal.ZERO.setScale(2).toString()) {
								data.col_11 = BigDecimal.ZERO.toString();	
							} else {
								data.col_11 = renta.multiply(new BigDecimal(100)).divideScaleRound(ventaNeta, 2, MathContext.ROUND_HALF_UP).toString();
							}
						}
						
					} else {
						data.col_10 = "0.00";
						data.col_11 = "0.00";
					}

					montoTotal = montoTotal.add(convertToDolar(_esDevolucion ? total.negate() : total, documento.moneda ? documento.moneda.codigo : Moneda.PESOS));
					montoNetoTotal = montoNetoTotal.add(convertToDolar(_esDevolucion ? monto_neto.negate() : monto_neto, documento.moneda ? documento.moneda.codigo : Moneda.PESOS));
					montoCosto = montoCosto.add(convertToDolar(costo, documento.moneda ? documento.moneda.codigo : Moneda.PESOS));
					montoRenta = montoRenta.add(convertToDolar(renta, documento.moneda ? documento.moneda.codigo : Moneda.PESOS));
					
					dataProvider.push(data);
				}
				var cotizaciones:XML = CotizacionesModel.getInstance().cotizaciones;
				
				var dolarCompra:BigDecimal = new BigDecimal(cotizaciones.dolarCompra.@value[0].toString());
				var dolarVenta:BigDecimal = new BigDecimal(cotizaciones.dolarVenta.@value[0].toString());
				
				var totalize:Object = new Object();
				totalize.col_0 = "";
				totalize.col_1 = "";
				totalize.col_2 = "";
				totalize.col_3 = "";
				totalize.col_4 = "";
				totalize.col_5 = "TOTAL";
				totalize.col_6 = "DOLARES";
				totalize.col_7 = montoTotal.setScale(2, MathContext.ROUND_HALF_EVEN).toString();
				totalize.col_8 = montoNetoTotal.setScale(2, MathContext.ROUND_HALF_EVEN).toString();
				totalize.col_9 = montoCosto.setScale(2, MathContext.ROUND_HALF_EVEN).toString();
				totalize.col_10 = montoRenta.setScale(2, MathContext.ROUND_HALF_EVEN).toString();
				totalize.col_11 = "";
				
				dataProvider.push(totalize);

				var date:Date = new Date()

				export(dataProvider, columns, "reporte_rentas_" + date.milliseconds + ".xls");
			}
			
			private function sort(arrColl:ArrayCollection, field:String, isNumeric:Boolean = true):ArrayCollection {
				/* Create the SortField object for the "data" field in the ArrayCollection object, and make sure we do a numeric sort. */
				var dataSortField:SortField = new SortField();
				dataSortField.name = field;
				dataSortField.numeric = isNumeric;
				
				/* Create the Sort object and add the SortField object created earlier to the array of fields to sort on. */
				var numericDataSort:Sort = new Sort();
				numericDataSort.fields = [dataSortField];
				
				/* Set the ArrayCollection object's sort property to our custom sort, and refresh the ArrayCollection. */
				arrColl.sort = numericDataSort;
				arrColl.refresh();
				
				return arrColl;
			}
			
			private function convertToDolar(precio:BigDecimal, moneda:String):BigDecimal {
				var cotizaciones:XML = CotizacionesModel.getInstance().cotizaciones;
				
				var dolarCompra:BigDecimal = new BigDecimal(cotizaciones.dolarCompra.@value[0].toString());
				var dolarVenta:BigDecimal = new BigDecimal(cotizaciones.dolarVenta.@value[0].toString());
				
				var _precioUS:BigDecimal = precio;
				if (moneda == Moneda.PESOS || moneda == Moneda.PESOS_ASTER) {
					_precioUS = precio.divide(dolarVenta);
				}
				return _precioUS;
			}
	

			/**
			 *
			 * Export to Excell
			 *
			 * @param obj        Objeto simple, XML, XMLList, Array, ArrayCollection o XMLListCollection
			 *                   que se quiere exportar a excel
			 * @colsValues       Listado de objetos que indican cual es el nombre de la columna
			 *                   y que propiedad del objeto se utiliza para sacar los datos de la columna
			 *                   {header:"nombre del header", value:"propiedad del objeto que contiene el valor"}
			 * @param defaultName   Nombre default con el que se genera el excel
			 *
			 */
			public function export(obj:Object, colsValues:Array, defautlName:String):void {
				var _dp:ICollectionView = FrmRentaComprobantes.getDataProviderCollection(obj);
				if (_dp == null) {
					return;
				}

				var sheet:Sheet = new Sheet();

				// Agregar Cabezal.
				var rows:Number = 0;
				var cols:Number = 0;

				var cantCols:Number = colsValues.length;

				sheet.resize(_dp.length + 14, colsValues.length + 2);

				var date:Date = new Date();
				var formatter:DateFormatter = new DateFormatter();
				formatter.formatString = "DD-MM-YYYY JJ:NN";

				var formatter2:DateFormatter = new DateFormatter();
				formatter2.formatString = "DD-MM-YYYY";

				sheet.setCell(rows, cols, "RENTAS POR COMPROBANTE");
				cols++;
				cols++;
				cols++;
				cols++;
				sheet.setCell(rows, cols, "Fecha:");
				cols++;
				sheet.setCell(rows, cols, formatter.format(date));
				rows++;

				cols = 0;
				if (txtFechaDesde.selectedDate) {
					sheet.setCell(rows, cols, "Fecha Desde");
					cols++;
					sheet.setCell(rows, cols, formatter2.format(txtFechaDesde.selectedDate));
					cols++;
				}
				if (txtFechaHasta.selectedDate) {
					sheet.setCell(rows, cols, "Fecha Hasta");
					cols++;
					sheet.setCell(rows, cols, formatter2.format(txtFechaHasta.selectedDate));
					cols++;
				}
				
				var cotizaciones:XML = CotizacionesModel.getInstance().cotizaciones;
				
				var dolarCompra:BigDecimal = new BigDecimal(cotizaciones.dolarCompra.@value[0].toString());
				var dolarVenta:BigDecimal = new BigDecimal(cotizaciones.dolarVenta.@value[0].toString());
				if (cotizaciones) {
					sheet.setCell(rows, cols, "Dolar Compra");
					cols++;
					sheet.setCell(rows, cols, dolarCompra.setScale(2, MathContext.ROUND_UP).toString());
					cols++;
					sheet.setCell(rows, cols, "Venta");
					cols++;
					sheet.setCell(rows, cols, dolarVenta..setScale(2, MathContext.ROUND_UP).toString());
					cols++;
				}
				
				rows++;
				rows++;

				cols = 0;
				for (; cols < cantCols; cols++) {
					sheet.setCell(rows, cols, colsValues[cols].header);
				}

				cols = 0;
				rows++;
				var cursor:IViewCursor = _dp.createCursor();
				while (!cursor.afterLast) {
					for (cols = 0; cols < cantCols; cols++) {
						if ((cursor.current as Object).hasOwnProperty(colsValues[cols].value)) {
							sheet.setCell(rows, cols, (cursor.current as Object)[colsValues[cols].value]);
						}
					}
					rows++;
					cursor.moveNext();
				}

				var xls:ExcelFile = new ExcelFile();
				xls.sheets.addItem(sheet);
				var bytes:ByteArray = xls.saveToByteArray();

				dispatchEvent(new ExportToExcelEvent(ExportToExcelEvent.EXPORT_TO_EXCEL, bytes, defautlName));
			}

			//----------------------------- 
			// Private function 
			//----------------------------- 
			/**
			 *
			 * A partir de un elemento pasado se genera un ICollectionView
			 * para su correcto recorrido
			 *
			 * @param obj         Objeto a convertir a ICollectionView
			 *
			 *
			 * @return referencia a un ICollectionView.
			 *
			 */
			static public function getDataProviderCollection(obj:Object):ICollectionView {
				if ((obj is Number && isNaN(obj as Number)) || (!(obj is Number) && obj == null)) {
					return null;
				} else if (obj is ICollectionView) {
					return obj as ICollectionView;
				} else if (obj is Array) {
					return new ArrayCollection(obj as Array);
				} else if (obj is XMLList) {
					return new XMLListCollection(obj as XMLList);
				} else if (obj is XML) {
					var col:XMLListCollection = new XMLListCollection();
					col.addItem(obj);
					return col;
				} else if (obj is Object) {
					return new ArrayCollection([obj]);
				} else {
					return null;
				}
			}

			[Bindable]
			private var emptyResult:Boolean = false;

			private function resultQuery(event:ResultEvent):void {
				var result:ArrayCollection = event.result as ArrayCollection;
				
				var provider:ArrayCollection = new ArrayCollection();
				for each (var data:DocumentoDTO in result) {
					provider.addItem(data);
					
				}
				dgFacturas.dataProvider = sort(provider, "serieNumero", false);
					
				callLater(function():void {
					if (dgFacturas.dataProvider.length > 0) {
						dgFacturas.setFocus();
						dgFacturas.selectedIndex = 0;
					} 				
				});


			}

			private function resultMonedasStockPrecio(items:ArrayCollection):void {
				moneyDP = items;
			}

			protected function chbOcultarNegativos_clickHandler(event:MouseEvent):void {
			}

			protected function chbOcultarCeros_clickHandler(event:MouseEvent):void {
			}


			private function onFault(event:FaultEvent):void {
				loading = false;

				if (helpWindow == null) {
					helpWindow = new TitleWindow();
					helpWindow.title = "Error";
					helpWindow.width = 360;

					var errorPanel:ErrorPanel = new ErrorPanel();
					errorPanel.errorText = event.fault.faultString + "[" + event.fault.faultCode + "]";
					errorPanel.detailsText = event.fault.toString();

					PopUpManager.addPopUp(helpWindow, this, true);
					PopUpManager.centerPopUp(helpWindow);

					helpWindow.addEventListener(CloseEvent.CLOSE, closeHandler);
					errorPanel.addEventListener(CloseEvent.CLOSE, closeHandler);

					helpWindow.y = 60;

					helpWindow.addElement(errorPanel);
				}

			}

			/**
			 * Disconnect Remote Object.
			 */
			public function resetRemoteObject():void {
				remObjQuery.disconnect();
			}

			private function closeHandler(event:Event):void {
				helpWindow.removeEventListener(CloseEvent.CLOSE, closeHandler);
				PopUpManager.removePopUp(helpWindow as IFlexDisplayObject);
				helpWindow = null;
			}

			public function codigoNombreLabelFunction(item:Object):String {
				var label:String = "";

				if (item && item.hasOwnProperty("codigo")) {
					label = item.codigo;
				}
				if (item && item.hasOwnProperty("nombre")) {
					label += "-" + item.nombre;
				}
				return label;
			}

			public function nombreLabelFunction(item:Object):String {
				var label:String = "";
				if (item && item.hasOwnProperty("nombre")) {
					label += item.nombre;
				}
				return label;
			}


			protected function addSelected_clickHandler(event:MouseEvent):void {
				var selectedIndex:int = comprobantesList.selectedIndex;
				var v:Vector.<Object> = comprobantesList.selectedItems;
				for each (var item:Object in v) {
					comprobantesSelected.addItem(item);
					comprobantes.removeItemAt(comprobantes.getItemIndex(item));
				}

				callLater(function():void {
					if (selectedIndex <= comprobantes.length - 1) {
						comprobantesList.selectedIndex = selectedIndex;
					} else {
						comprobantesList.selectedIndex = comprobantes.length - 1;
					}
					
					comprobantesList.ensureCellIsVisible(comprobantesList.selectedIndex);					
					comprobantesListSelected.selectedIndex = comprobantesSelected.length - 1;
					comprobantesListSelected.ensureCellIsVisible(comprobantesSelected.length - 1);
				});

				callLater(function():void {
					updateButtons();
				});

			}

			protected function addAll_clickHandler(event:MouseEvent):void {
				comprobantesList.selectAll();

				callLater(function():void {
					var v:Vector.<Object> = comprobantesList.selectedItems;
					for each (var item:Object in v) {
						comprobantesSelected.addItem(item);
						comprobantes.removeItemAt(comprobantes.getItemIndex(item));
					}
					updateButtons();

				});

				callLater(function():void {
					comprobantesListSelected.selectAll();
				});


			}

			protected function removeSelected_clickHandler(event:MouseEvent):void {
				var selectedIndex:int = comprobantesListSelected.selectedIndex;
				var v:Vector.<Object> = comprobantesListSelected.selectedItems;
				for each (var item:Object in v) {
					comprobantes.addItem(item);
					comprobantesSelected.removeItemAt(comprobantesSelected.getItemIndex(item));
				}

				callLater(function():void {
					if (selectedIndex <= comprobantes.length - 1) {
						comprobantesListSelected.selectedIndex = selectedIndex;
					} else {
						comprobantesListSelected.selectedIndex = comprobantesSelected.length - 1;
					}
					comprobantesListSelected.ensureCellIsVisible(comprobantesListSelected.selectedIndex);
					
					comprobantesList.selectedIndex = comprobantes.length - 1;
					comprobantesList.ensureCellIsVisible(comprobantes.length - 1);
				});

				callLater(function():void {
					updateButtons();
				});

			}

			protected function removeAll_clickHandler(event:MouseEvent):void {
				comprobantesListSelected.selectAll();

				callLater(function():void {
					var v:Vector.<Object> = comprobantesListSelected.selectedItems;
					for each (var item:Object in v) {
						comprobantes.addItem(item);
						comprobantesSelected.removeItemAt(comprobantesSelected.getItemIndex(item));
					}
					updateButtons();
				});

				callLater(function():void {
					comprobantesList.selectAll();
				});

			}

			protected function comprobantesList_selectionChangeHandler(event:GridSelectionEvent):void {
				updateButtons();
			}

			protected function comprobantesListSelected_selectionChangeHandler(event:GridSelectionEvent):void {
				updateButtons();
			}

			private function updateButtons():void {
				if (comprobantesList.selectedItems && comprobantesList.selectedItems.length > 0) {
					cmdAdd.enabled = true;
				} else {
					cmdAdd.enabled = false;
				}
				if (comprobantesListSelected.selectedItems && comprobantesListSelected.selectedItems.length > 0) {
					cmdRemove.enabled = true;
				} else {
					cmdRemove.enabled = false;
				}
			}

			private function showComprobanteButton(evt:Event):void {
				btnCloseSearchComprobantes.visible = filterComprobante.text.length > 0;

				if (filterComprobante.text.length == 0) {
					comprobantes.filterFunction = null;
					comprobantes.refresh();
				} else {
					comprobantes.filterFunction = filterComprobantes;
					comprobantes.refresh();
				}

			}

			private function filterComprobantes(item:Object):Boolean {
				var filter:String = filterComprobante.text;
				var code:String = String(item.codigo);
				var name:String = String(item.nombre);

				if (code.toLowerCase().match(new RegExp(filter.toLowerCase(), 'i'))) {
					return true;
				}
				if (name.toLowerCase().match(new RegExp(filter.toLowerCase(), 'i'))) {
					return true;
				}
				return false;
			}

			protected function filterComprobante_creationCompleteHandler(event:FlexEvent):void {
				filterComprobante.addEventListener(KeyboardEvent.KEY_UP, keyHandler);
			}

			private function keyHandler(event:KeyboardEvent):void {
				if (event.keyCode == Keyboard.ENTER) {
				} else if (filterComprobante.text == null || filterComprobante.text == "") {
					if (comprobantes != null) {
					}
				}
			}

			protected function resetSearchComprobantes(event:MouseEvent):void {
				btnCloseSearchComprobantes.visible = false;

				comprobantes.filterFunction = null;
				comprobantes.refresh();

				filterComprobante.text = '';
				filterComprobante.setFocus();

			}


			private function date_labelFunction(item:Object, column:spark.components.gridClasses.GridColumn):String {
				return item.fecha;
			}

			private function cliente_labelFunction(item:Object, column:spark.components.gridClasses.GridColumn):String {
				return item.cliente.codigo + " - " + item.cliente.nombre;
			}

			private function moneda_labelFunction(item:Object, column:spark.components.gridClasses.GridColumn):String {
				return item.moneda.codigo + " - " + item.moneda.nombre;
			}

			private function comprobante_labelFunction(item:Object, column:spark.components.gridClasses.GridColumn):String {
				return item.comprobante.nombre;
			}

			private function comprobante_cod_labelFunction(item:Object, column:spark.components.gridClasses.GridColumn):String {
				return item.comprobante.codigo + " - " + item.comprobante.nombre;
			}

			private function emitido_labelFunction(item:Object, column:spark.components.gridClasses.GridColumn):String {
				if (item.tipoComprobante != "32") {
					if (item.emitido) {
						return "SI";
					} else {
						return "NO";
					}
				}
				return "";
			}

			private function pendiente_labelFunction(item:Object, column:spark.components.gridClasses.GridColumn):String {
				if (item.tipoComprobante == "32") {
					if (item.pendiente) {
						return "SI";
					} else {
						return "NO";
					}
				}
				return "";
			}

			protected function dgFacturas_doubleClickHandler(event:MouseEvent):void {
				//cargarFactura();
			}

			private var _docQuery:DocumentoQuery;

			protected function cmdFiltrar_clickHandler(event:MouseEvent):void {
				var comprobantes:String = "";
				for each (var lista:Object in comprobantesSelected) {
					comprobantes += lista.codigo + ",";
				}
				comprobantes = comprobantes.substring(0, comprobantes.length - 1);

				var fechaDesde:Date = txtFechaDesde.selectedDate;
				var fechaHasta:Date = txtFechaHasta.selectedDate;

				_docQuery = new DocumentoQuery();
				_docQuery.emitido = true;
				_docQuery.pendiente = false;
				_docQuery.start = 0;
				_docQuery.limit = 10000;
				_docQuery.comprobantes = comprobantes;

				if (fechaDesde) {
					_docQuery.fechaDesde = fechaDesde;
				} else {
					_docQuery.fechaDesde = null;
				}
				if (fechaHasta) {
					_docQuery.fechaHasta = fechaHasta;
				} else {
					_docQuery.fechaHasta = null;
				}

				remObjQuery.queryDocumentos(_docQuery);

			}
			
			protected function txtFechaDesde_creationCompleteHandler(event:FlexEvent):void {
				var fechaDesde:Date = new Date();
				if (fechaDesde.date <= 15) {
					fechaDesde = util.DateUtil.clone(fechaDesde).subtract(util.DateUtil.MONTH, 1).datetime;
				}
				fechaDesde.date = Math.min(fechaDesde.date, 15);
				txtFechaDesde.selectedDate = fechaDesde;
				
			}

		]]>
	</fx:Script>


	<fx:Declarations>
		<s:NumberFormatter id="nf_Espanol_Espanol" locale="es_ES" fractionalDigits="2"/>
	</fx:Declarations>

	<fx:Declarations>
		<fx:Component id="dropDownItemRenderer">
			<renderers:CodigoNombreItemRenderer />
		</fx:Component>

		<s:ArrayList id="cols">
			<s:GridColumn width="85" dataField="fecha" headerText="FECHA" labelFunction="date_labelFunction" />
			<s:GridColumn width="175" dataField="comprobante" headerText="T. COMPROBANTE" labelFunction="comprobante_cod_labelFunction" />
			<s:GridColumn width="75" dataField="serieNumero" headerText="S/N" />
			<s:GridColumn dataField="cliente" headerText="CLIENTE" labelFunction="cliente_labelFunction" />
			<s:GridColumn width="90" dataField="moneda" headerText="MONEDA" labelFunction="moneda_labelFunction" />
			<s:GridColumn width="110" dataField="total" headerText="TOTAL">
				<s:itemRenderer>
					<fx:Component>
						<s:DefaultGridItemRenderer textAlign="right">
							<fx:Script>
								<![CDATA[
									import biz.fulltime.dto.DocumentoDTO;
									import biz.fulltime.model.Comprobante;
									import biz.fulltime.model.Moneda;
									
									import util.CatalogoFactory;

									override public function prepare(hasBeenRecycled:Boolean):void {
										if (data) {
											var simbolo:String = "";
											for each(var comprobante:Comprobante in CatalogoFactory.getInstance().comprobantes) {
												if (comprobante.codigo == DocumentoDTO(data).comprobante.codigo) {
													if (comprobante.isDevolucion()) {
														simbolo = "-";
														break;
													}

												}
											}
											if (DocumentoDTO(data).total) {
												label = simbolo + outerDocument.nf_Espanol_Espanol.format(DocumentoDTO(data).total);
											} else {
												label = simbolo + outerDocument.nf_Espanol_Espanol.format(0);
											}
										}
									}
								]]>
							</fx:Script>

						</s:DefaultGridItemRenderer>

					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
			
			<s:GridColumn width="110" headerText="MONTO NETO">
				<s:itemRenderer>
					<fx:Component>
						<s:DefaultGridItemRenderer textAlign="right">
							<fx:Script>
								<![CDATA[
									import biz.fulltime.dto.DocumentoDTO;
									import biz.fulltime.model.Comprobante;
									import biz.fulltime.model.Moneda;
									
									import util.CatalogoFactory;
									
									override public function prepare(hasBeenRecycled:Boolean):void {
										if (data) {
											var simbolo:String = "";
											for each(var comprobante:Comprobante in CatalogoFactory.getInstance().comprobantes) {
												if (comprobante.codigo == DocumentoDTO(data).comprobante.codigo) {
													if (comprobante.isDevolucion()) {
														simbolo = "-";
														break;
													}
												}
											}

											if (DocumentoDTO(data).costo && DocumentoDTO(data).subtotal) {
												var subtotal:BigDecimal = new BigDecimal(DocumentoDTO(data).subtotal);
												
												for each(var c:Comprobante in CatalogoFactory.getInstance().comprobantes) {
													if (c.codigo == DocumentoDTO(data).comprobante.codigo) {														
														var ventaNeta:BigDecimal = c.aplicarDescuentoPrometido(subtotal); //llamemosle neta, mas por historia que otra cosa
														ventaNeta = c.isDevolucion() ? ventaNeta.negate().setScale(4, MathContext.ROUND_UP) : ventaNeta.setScale(4, MathContext.ROUND_UP);
														
														label = simbolo + " " + outerDocument.nf_Espanol_Espanol.format(ventaNeta.toString());
														break;
													}
												}												
											} else {
												label = simbolo + " " + outerDocument.nf_Espanol_Espanol.format(0);
											}
										}
									}
								]]>
							</fx:Script>
							
						</s:DefaultGridItemRenderer>
						
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
			
			<s:GridColumn width="110" dataField="costo" headerText="COSTO">
				<s:itemRenderer>
					<fx:Component>
						<s:DefaultGridItemRenderer textAlign="right">
							<fx:Script>
								<![CDATA[
									import biz.fulltime.dto.DocumentoDTO;
									import biz.fulltime.model.Comprobante;
									import biz.fulltime.model.Moneda;
									
									import util.CatalogoFactory;

									override public function prepare(hasBeenRecycled:Boolean):void {
										if (data) {
											var simbolo:String = "";
											if (DocumentoDTO(data).costo) {
												label = simbolo + outerDocument.nf_Espanol_Espanol.format(DocumentoDTO(data).costo);
											} else {
												label = simbolo + outerDocument.nf_Espanol_Espanol.format(0);
											}
										}
									}
								]]>
							</fx:Script>

						</s:DefaultGridItemRenderer>

					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>

			<s:GridColumn width="90" dataField="iva" headerText="IVA">
				<s:itemRenderer>
					<fx:Component>
						<s:DefaultGridItemRenderer textAlign="right">
							<fx:Script>
								<![CDATA[
									import biz.fulltime.dto.DocumentoDTO;
									import biz.fulltime.model.Comprobante;
									import biz.fulltime.model.Moneda;
									
									import util.CatalogoFactory;

									override public function prepare(hasBeenRecycled:Boolean):void {
										if (data) {
											var simbolo:String = "";
											for each(var comprobante:Comprobante in CatalogoFactory.getInstance().comprobantes) {
												if (comprobante.codigo == DocumentoDTO(data).comprobante.codigo) {
													if (comprobante.isDevolucion()) {
														simbolo = "-";
														break;
													}
												}
											}

											if (DocumentoDTO(data).iva) {
												label = simbolo + outerDocument.nf_Espanol_Espanol.format(DocumentoDTO(data).iva);
											} else {
												label = simbolo + outerDocument.nf_Espanol_Espanol.format(0);
											}
										}
									}
								]]>
							</fx:Script>

						</s:DefaultGridItemRenderer>

					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>


			<s:GridColumn width="110" headerText="RENTA">
				<s:itemRenderer>
					<fx:Component>
						<s:DefaultGridItemRenderer textAlign="right">
							<fx:Script>
								<![CDATA[
									import biz.fulltime.dto.DocumentoDTO;
									import biz.fulltime.model.Comprobante;
									import biz.fulltime.model.Moneda;
									
									import util.CatalogoFactory;

									override public function prepare(hasBeenRecycled:Boolean):void {
										if (data) {
											var simbolo:String = "";
											if (DocumentoDTO(data).costo && DocumentoDTO(data).subtotal) {
												var costo:BigDecimal = new BigDecimal(DocumentoDTO(data).costo);
												var subtotal:BigDecimal = new BigDecimal(DocumentoDTO(data).subtotal);
												var total:BigDecimal = new BigDecimal(DocumentoDTO(data).total);
												
												for each(var comprobante:Comprobante in CatalogoFactory.getInstance().comprobantes) {
													if (comprobante.codigo == DocumentoDTO(data).comprobante.codigo) {
														if (comprobante.codigo == "98") {
															label = simbolo + " " + outerDocument.nf_Espanol_Espanol.format(total.negate().toString());
														} else {
															var costoCSigno:BigDecimal = comprobante.isDevolucion() ? costo.negate() : costo;
															
															var ventaNeta:BigDecimal = comprobante.aplicarDescuentoPrometido(subtotal); //llamemosle neta, mas por historia que otra cosa
															ventaNeta = comprobante.isDevolucion() ? ventaNeta.negate().setScale(4, MathContext.ROUND_UP) : ventaNeta.setScale(4, MathContext.ROUND_UP);
															
															var result:BigDecimal =  ventaNeta.subtract(costoCSigno);
															label = simbolo + " " + outerDocument.nf_Espanol_Espanol.format(result.toString());
															
														}
														break;
													}
												}												
											} else {
												label = simbolo + " " + outerDocument.nf_Espanol_Espanol.format(0);
											}
										}
									}
								]]>
							</fx:Script>

						</s:DefaultGridItemRenderer>

					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
			
			<s:GridColumn width="90" headerText="RENTA(%)">
				<s:itemRenderer>
					<fx:Component>
						<s:DefaultGridItemRenderer textAlign="right">
							<fx:Script>
								<![CDATA[
									import biz.fulltime.dto.DocumentoDTO;
									import biz.fulltime.model.Comprobante;
									import biz.fulltime.model.Moneda;
									
									import util.CatalogoFactory;
									
									override public function prepare(hasBeenRecycled:Boolean):void {
										if (data) {											
											if (DocumentoDTO(data).costo && DocumentoDTO(data).subtotal) {
												var costo:BigDecimal = new BigDecimal(DocumentoDTO(data).costo);
												var subtotal:BigDecimal = new BigDecimal(DocumentoDTO(data).subtotal);
												
												for each(var comprobante:Comprobante in CatalogoFactory.getInstance().comprobantes) {
													if (comprobante.codigo == DocumentoDTO(data).comprobante.codigo) {
														if (comprobante.codigo == "98") {
															label = outerDocument.nf_Espanol_Espanol.format(BigDecimal.ZERO.toString()) + "%";
														} else {
															var costoCSigno:BigDecimal = comprobante.isDevolucion() ? costo.negate() : costo;
															
															var ventaNeta:BigDecimal = comprobante.aplicarDescuentoPrometido(subtotal); //llamemosle neta, mas por historia que otra cosa
															ventaNeta = comprobante.isDevolucion() ? ventaNeta.negate().setScale(4, MathContext.ROUND_UP) : ventaNeta.setScale(4, MathContext.ROUND_UP);
															
															if (ventaNeta.compareTo(BigDecimal.ZERO) == 0) {
																label = outerDocument.nf_Espanol_Espanol.format(BigDecimal.ZERO.toString()) + "%";
															} else {
																var rentaNetaComercial:BigDecimal =  ventaNeta.subtract(costoCSigno);
																label = rentaNetaComercial.multiply(new BigDecimal(100)).divideScaleRound(ventaNeta, 2, MathContext.ROUND_HALF_UP) + "%";
															}														
														}
														break;
													}
													
												}												
												
											} else {
												label = outerDocument.nf_Espanol_Espanol.format(0);
											}
										}
									}
								]]>
							</fx:Script>
							
						</s:DefaultGridItemRenderer>
						
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>

			
		</s:ArrayList>

	</fx:Declarations>


	<s:VGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" visible="{loading}">
		<loader:LoadComponent label="Generando archivo" />
	</s:VGroup>

	<s:BorderContainer width="100%" height="100%" backgroundAlpha=".16" backgroundColor="#6E87B5" borderColor="0x000000" borderAlpha="0" visible="{!loading}">
		<s:VGroup bottom="0" left="0" right="0" top="0">
			<s:Group id="pnlComprobantes" width="100%" height="100%">
				<s:layout>
					<s:HorizontalLayout paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" />
				</s:layout>
				<s:Panel width="240" height="100%" borderColor="0x666666" title="Rango Fechas" dropShadowVisible="false" borderAlpha="1">
					<s:BorderContainer width="100%" height="100%" backgroundAlpha=".06" backgroundColor="#6E87B5" borderAlpha="0">
						<s:layout>
							<s:VerticalLayout paddingLeft="5" paddingRight="5" paddingTop="5"  verticalAlign="top"/>
						</s:layout>
						<s:Form id="formFecha" width="100%">
							<s:layout>
								<s:FormLayout verticalAlign="middle" gap="-12" />
							</s:layout>

							<s:FormItem label="Desde">
								<mx:DateField id="txtFechaDesde" width="110" creationComplete="txtFechaDesde_creationCompleteHandler(event)" yearNavigationEnabled="true" fontFamily="Helvetica" />
							</s:FormItem>
							<s:FormItem label="Hasta">
								<mx:DateField id="txtFechaHasta" width="110" selectedDate="{new Date()}" yearNavigationEnabled="true" fontFamily="Helvetica"/>
							</s:FormItem>
						</s:Form>
					</s:BorderContainer>

				</s:Panel>

				<s:Panel width="100%" height="100%" borderColor="0x666666" title="Comprobantes" dropShadowVisible="false" borderAlpha="1">
					<s:BorderContainer width="100%" height="100%" backgroundAlpha=".06" backgroundColor="#6E87B5" borderAlpha="0">
						<s:layout>
							<s:VerticalLayout paddingLeft="5" paddingRight="5" paddingTop="5" />
						</s:layout>
						<s:HGroup width="100%" height="100%" gap="0">
							<s:VGroup width="100%" height="100%">
								<s:HGroup width="360" paddingBottom="0" paddingLeft="0" paddingRight="0" verticalAlign="middle" gap="5">
									<s:Label id="lblFilterComprobante" left="5" text="Filtrar" />
									<s:SkinnableContainer width="100%" styleName="filterTextInput">
										<s:layout>
											<s:HorizontalLayout horizontalAlign="center" paddingBottom="1" paddingLeft="2" paddingRight="5" paddingTop="1" verticalAlign="middle" />
										</s:layout>
										<s:TextInput id="filterComprobante" width="100%" change="showComprobanteButton(event)"
													 creationComplete="filterComprobante_creationCompleteHandler(event)" styleName="filter" prompt="Ver todos" />
										<s:Button id="btnCloseSearchComprobantes" width="8" height="8" click="resetSearchComprobantes(event)" styleName="buttonCloseSearch"
												  visible="false" />
									</s:SkinnableContainer>
								</s:HGroup>
								<s:DataGrid id="comprobantesList" width="100%" height="100%" dataProvider="{comprobantes}" contentBackgroundColor="0xFFFFFF"
											contentBackgroundAlpha=".8" selectionMode="multipleRows" selectionChange="comprobantesList_selectionChangeHandler(event)">
									<s:columns>
										<s:ArrayList>
											<s:GridColumn width="60" headerText="CÓDIGO" dataField="codigo"
														  itemRenderer="biz.fulltime.ui.facturacion.stockprecio.NumberItemRenderer" />
											<s:GridColumn headerText="NOMBRE" dataField="nombre" />
										</s:ArrayList>
									</s:columns>
								</s:DataGrid>
							</s:VGroup>
							<s:VGroup height="100%" paddingLeft="5" paddingRight="5" paddingTop="25" verticalAlign="middle">
								<s:Button id="cmdAddAll" width="42" height="32" cornerRadius="16" fontWeight="bold" click="addAll_clickHandler(event)" label=">>"
										  chromeColor="0xFFFFFF" toolTip="Agregar Todos" enabled="true" />
								<s:Button id="cmdAdd" width="42" height="32" cornerRadius="16" fontWeight="bold" click="addSelected_clickHandler(event)" label=">"
										  chromeColor="0xFFFFFF" toolTip="Agregar Seleccionados" enabled="false" />
								<s:Button id="cmdRemove" width="42" height="32" cornerRadius="16" fontWeight="bold" click="removeSelected_clickHandler(event)" label="&lt;"
										  chromeColor="0xFFFFFF" toolTip="Remover Seleccionados" enabled="false" />
								<s:Button id="cmdRemoveAll" width="42" height="32" cornerRadius="16" fontWeight="bold" click="removeAll_clickHandler(event)" label="&lt;&lt;"
										  chromeColor="0xFFFFFF" toolTip="Remover Todos" enabled="true" />
							</s:VGroup>
							<s:VGroup width="100%" height="100%">
								<s:Label paddingTop="12" text="Comprobantes Seleccionados" />
								<s:DataGrid id="comprobantesListSelected" width="100%" height="100%" dataProvider="{comprobantesSelected}" contentBackgroundColor="0xFFFFFF"
											contentBackgroundAlpha=".8" selectionMode="multipleRows" selectionChange="comprobantesListSelected_selectionChangeHandler(event)">
									<s:columns>
										<s:ArrayList>
											<s:GridColumn width="60" headerText="CÓDIGO" dataField="codigo"
														  itemRenderer="biz.fulltime.ui.facturacion.stockprecio.NumberItemRenderer" />
											<s:GridColumn headerText="NOMBRE" dataField="nombre" />
										</s:ArrayList>
									</s:columns>
								</s:DataGrid>

							</s:VGroup>

						</s:HGroup>
					</s:BorderContainer>
				</s:Panel>
			</s:Group>

			<s:HGroup width="100%" horizontalAlign="right" paddingBottom="0" paddingLeft="10" paddingRight="10" paddingTop="0" verticalAlign="middle">
				<mx:Image id="loader1" source="@Embed(source='assets/general/logo_oscuro.gif')" alpha=".5" scaleX=".25" scaleY=".25" />
				<s:Spacer width="100%" />
				<s:Button id="cmdFiltrar" width="90" height="32" click="cmdFiltrar_clickHandler(event)" label="Filtrar" enabled="true" toolTip="Filtrar" styleName="filtrarButton" />
			</s:HGroup>

			<s:Panel width="100%" height="100%" title="Resultado">
				<s:DataGrid id="dgFacturas" width="100%" height="100%" doubleClick="dgFacturas_doubleClickHandler(event)" sortableColumns="false" columns="{cols}"
							doubleClickEnabled="true" focusEnabled="true" />

				<s:controlBarContent>
					<s:HGroup width="100%" paddingBottom="0" paddingTop="0" verticalAlign="middle">
						<mx:Image id="loader2" source="@Embed(source='assets/general/logo_oscuro.gif')" alpha=".5" scaleX=".25" scaleY=".25" />
						<s:Spacer width="100%" />

						<s:Button id="cmdExcel" click="cmdExportar_clickHandler(event)" label="Exportar a Excel" styleName="exportExcel" />
					</s:HGroup>
				</s:controlBarContent>
			</s:Panel>
		</s:VGroup>
	</s:BorderContainer>

</s:Group>
