<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:components="components.*" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:s="library://ns.adobe.com/flex/spark"
		 width="100%" height="100%" creationComplete="group1_creationCompleteHandler(event)" styleName="pntLineasVenta">
	<fx:Script>
		<![CDATA[
			import biz.fulltime.conf.GeneralOptions;
			import biz.fulltime.conf.ServerConfig;
			import biz.fulltime.ui.components.HelpPnl;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			
			import spark.components.gridClasses.CellPosition;
			
			private var remObjCat:RemoteObject;
			
			private var _articulo:String;
			
			private var _clienteq:String;
			
			private var _showCliente:Boolean = false;
			
			private var _showButtons:Boolean = true;
			
			private var _maxrows:int = 10;
			
			
			[Bindable]
			public function get showCliente():Boolean {
				return _showCliente;
			}
			
			public function set showCliente(value:Boolean):void {
				_showCliente = value;
			}
			
			[Bindable]
			public function get maxrows():int {
				return _maxrows;
			}
			
			public function set maxrows(value:int):void {
				_maxrows = value;
			}
			
			[Bindable]
			public function get showButtons():Boolean {
				return _showButtons;
			}
			
			public function set showButtons(value:Boolean):void {
				_showButtons = value;
			}
			
			
			public function get articulo():String {
				return _articulo;
			}
			
			public function set articulo(value:String):void {
				_articulo = value;
			}
			
			public function obtenerStockArticulo():void {
				var remObjStock:RemoteObject = new RemoteObject();
				remObjStock.destination = "CreatingRpc";
				remObjStock.channelSet = ServerConfig.getInstance().channelSet;
				remObjStock.addEventListener(FaultEvent.FAULT, handleFault);
				remObjStock.addEventListener(ResultEvent.RESULT, result);
				remObjStock.showBusyCursor = false;
				
				remObjStock.getStockActual(articulo);
			}
			
			private function result(event:ResultEvent):void {
				var values:ArrayCollection = event.result as ArrayCollection;
				dgStockActual.dataProvider = values;
				dispatchEvent(new Event("_stockDepositosCargados", true, true));
			}
			
			public function handleFault(event:FaultEvent):void {
				var message:String = event.fault && event.fault.rootCause && event.fault.rootCause.localizedMessage ? event.fault.rootCause.localizedMessage : null;
				if (!message) {
					message = event.message.toString();
				}				
				Alert.show(message, "Error de Permisos", 4, null, null, StyleManager.getStyleManager(null).getStyleDeclaration('.icons32').getStyle('ErrorIcon'));

				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}
			
			protected function group1_creationCompleteHandler(event:FlexEvent):void {
				callLater(function():void {
					dgStockActual.setFocus();
					
					if (dgStockActual.dataProviderLength > 0) {
						dgStockActual.setSelectedCell(0, 0);
					}
				});
				
			}
			
			
			private function closePnlHandler(event:CloseEvent):void {
				event.target.removeEventListener(CloseEvent.CLOSE, closePnlHandler);
				PopUpManager.removePopUp(event.target as IFlexDisplayObject);
				dgStockActual.setFocus();
			}
			
			protected function cmdAceptar_clickHandler(event:MouseEvent):void {
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:NumberFormatter id="nf_Espanol_Espanol" locale="es_ES" />
	</fx:Declarations>
	
	<s:BorderContainer width="100%" height="100%" backgroundAlpha=".16" backgroundColor="#6E87B5" borderAlpha="0">
		<s:VGroup width="100%" height="100%" horizontalAlign="center">
			<s:DataGrid id="dgStockActual" width="100%" height="100%" borderAlpha="0">
				<s:columns>
					<s:ArrayList>
						<s:GridColumn width="35" headerText="" sortable="true" visible="false">
							<s:itemRenderer>
								<fx:Component>
									<s:DefaultGridItemRenderer textAlign="right">
										<fx:Script>
											<![CDATA[
												import biz.fulltime.model.Deposito;
												import biz.fulltime.model.StockActual;
												
												import mx.formatters.DateFormatter;
												
												override public function prepare(hasBeenRecycled:Boolean):void {
													if (data != null) {
														var deposito:Deposito = StockActual(data).deposito;
														if (deposito) {
															label = deposito.codigo;
														} else {
															label = "";
														}
													}
												}
											]]>
										</fx:Script>
									</s:DefaultGridItemRenderer>
								</fx:Component>
							</s:itemRenderer>
						</s:GridColumn>
						<s:GridColumn dataField="deposito" headerText="DEPÃ“SITO" sortable="true">
							<s:itemRenderer>
								<fx:Component>
									<s:DefaultGridItemRenderer textAlign="left">
										<fx:Script>
											<![CDATA[
												import biz.fulltime.model.Deposito;
												import biz.fulltime.model.StockActual;
												
												import mx.formatters.DateFormatter;
												
												override public function prepare(hasBeenRecycled:Boolean):void {
													if (data != null) {
														var deposito:Deposito = StockActual(data).deposito;
														if (deposito) {
															label = deposito.nombre
														} else {
															label = "";
														}
													}
												}
											]]>
										</fx:Script>
									</s:DefaultGridItemRenderer>
								</fx:Component>
							</s:itemRenderer>
						</s:GridColumn>
						<s:GridColumn dataField="SAcantidad" headerText="CANTIDAD" sortable="true">
							<s:itemRenderer>
								<fx:Component>
									<s:DefaultGridItemRenderer textAlign="right">
										<fx:Script>
											<![CDATA[
												import biz.fulltime.model.StockActual;
												
												import mx.formatters.NumberFormatter;
												
												override public function prepare(hasBeenRecycled:Boolean):void {
													if (data != null) {
														var cantidad:String = StockActual(data).SAcantidad;
														if (cantidad) {
															label = outerDocument.nf_Espanol_Espanol.format(cantidad);
														} else {
															label = "";
														}
													}
												}
											]]>
										</fx:Script>
									</s:DefaultGridItemRenderer>
								</fx:Component>
							</s:itemRenderer>

						</s:GridColumn>
					</s:ArrayList>
				</s:columns>
			</s:DataGrid>
		</s:VGroup>
	</s:BorderContainer>
	
	<s:controlBarContent>
		<s:HGroup width="100%" horizontalAlign="right" paddingBottom="5" paddingTop="5" visible="{showButtons}">
			<components:IconButton id="cmdAceptar" click="cmdAceptar_clickHandler(event)" label="Aceptar" styleName="aceptarButton" />
		</s:HGroup>
	</s:controlBarContent>
	
</s:Panel>
