<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:components="components.*" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:s="library://ns.adobe.com/flex/spark"
		  width="100%" height="100%" creationComplete="creationCompleteHandler(event)">

	<fx:Script>
		<![CDATA[
			import biz.fulltime.conf.ServerConfig;
			import biz.fulltime.dto.DocumentoDTO;
			import biz.fulltime.model.Documento;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.formatters.DateFormatter;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			import mx.utils.ObjectUtil;
			
			import spark.components.gridClasses.CellPosition;

			private var remObj:RemoteObject;

			private var _factura:Documento;

			private var _facturasPendientes:ArrayCollection = new ArrayCollection();

			private var _changeFacturasPendientes:Boolean = false;

			
			override protected function commitProperties():void {
				super.commitProperties();
				
				if (_changeFacturasPendientes) {
					callLater(function():void {
						dgFacturasPend.setFocus();
						if (dgFacturasPend.dataProviderLength > 0) {
							dgFacturasPend.selectedIndex = 0;
						}
					});
					_changeFacturasPendientes = false;
				}
				
			}

			protected function creationCompleteHandler(event:FlexEvent):void {
				remObj = new RemoteObject();
				remObj.destination = "CreatingRpc";
				remObj.channelSet = ServerConfig.getInstance().channelSet;
				remObj.showBusyCursor = true;
				remObj.addEventListener(ResultEvent.RESULT, onResult);
				remObj.addEventListener(FaultEvent.FAULT, onFault);

				callLater(function():void {
					dgFacturasPend.setFocus();
				});
					
			}

			[Bindable]
			public function get facturasPendientes():ArrayCollection {
				return _facturasPendientes;
			}
			
			public function set facturasPendientes(value:ArrayCollection):void {
				_facturasPendientes = value;
				
				_changeFacturasPendientes = true;
				
				invalidateProperties();
			}

			public function get factura():Documento {
				return _factura;
			}

			private function onResult(event:ResultEvent):void {
				var doc:Documento = event.result as Documento;
				_factura = doc;

				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}

			private function onFault(event:FaultEvent):void {
				Alert.show(event.fault.faultString, 'Error');
				_factura = null;
				
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}

			protected function cmdAceptar_clickHandler(event:MouseEvent):void {
				obtenerFactura();
			}

			private function obtenerFactura():void {
				if (dgFacturasPend.selectedItem != null) {
					var _doc:DocumentoDTO = DocumentoDTO(dgFacturasPend.selectedItem);
					remObj.getDocumento(_doc.docId);
				}
			}
			
			protected function dgFacturasPend_keyDownHandler(event:KeyboardEvent):void {
				var cellPos:CellPosition = dgFacturasPend.selectedCell;

				if (event.keyCode == Keyboard.ESCAPE) { // Se presiono la tecla 'ESC'
					_factura = null;
					dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
				} else if (event.keyCode == Keyboard.ENTER) {
					obtenerFactura();
				} 
			}

			protected function cmdCancelar_clickHandler(event:MouseEvent):void {
				_factura = null;
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}

			protected function dgFacturasPend_doubleClickHandler(event:MouseEvent):void {
				obtenerFactura();				
			}

			private function date_labelFunction(item:Object, column:GridColumn):String {
				var dateFormatter:DateFormatter = new DateFormatter();
				dateFormatter.formatString = "DD-MM-YYYY";
				return dateFormatter.format(item.fecha);
			}

			private function cliente_labelFunction(item:Object, column:GridColumn):String {
				return item.cliente.codigo + " - " + item.cliente.nombre;
			}

			private function moneda_labelFunction(item:Object, column:GridColumn):String {
				return item.moneda.codigo + " - " + item.moneda.nombre;
			}

			private function comprobante_labelFunction(item:Object, column:GridColumn):String {
				return item.comprobante.nombre;
			}

			private function comprobante_cod_labelFunction(item:Object, column:GridColumn):String {
				return item.comprobante.codigo + " - " + String(item.comprobante.nombre).toUpperCase();
			}
			
			
			private function comprobante_sortCompareFunc(itemA:Object, itemB:Object, gc:GridColumn):int {
				var comprobanteA:String = itemA.comprobante ? itemA.comprobante.codigo : "";
				var comprobanteB:String = itemB.comprobante ? itemB.comprobante.codigo : "";
				
				return ObjectUtil.numericCompare(Number(comprobanteA), Number(comprobanteB));
			}

		]]>
	</fx:Script>

	<fx:Declarations>
		<s:ArrayList id="cols">
			<s:GridColumn dataField="comprobante" headerText="COMPROBANTE" labelFunction="comprobante_cod_labelFunction" sortCompareFunction="comprobante_sortCompareFunc"/>
			<s:GridColumn width="70" dataField="serie" headerText="SERIE" />
			<s:GridColumn width="70" dataField="numero" headerText="NÃšMERO" >
				<s:itemRenderer>
					<fx:Component>
						<s:DefaultGridItemRenderer textAlign="right" />
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
			<s:GridColumn width="90" dataField="fecha" headerText="FECHA" labelFunction="date_labelFunction" />
			<s:GridColumn width="90" dataField="moneda" headerText="MONEDA" labelFunction="moneda_labelFunction" />
			<s:GridColumn width="90" dataField="total" headerText="TOTAL">
				<s:itemRenderer>
					<fx:Component>
						<s:DefaultGridItemRenderer textAlign="right" />
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
		</s:ArrayList>
	</fx:Declarations>

	<s:Panel width="100%" height="100%" styleName="pntLineasVenta">
		<s:DataGrid id="dgFacturasPend" width="100%" height="100%" doubleClick="dgFacturasPend_doubleClickHandler(event)" keyUp="dgFacturasPend_keyDownHandler(event)"
					columns="{cols}" doubleClickEnabled="true" focusEnabled="true" dataProvider="{facturasPendientes}" fontWeight="bold">
		</s:DataGrid>
		<s:controlBarContent>
			<s:HGroup width="100%" horizontalAlign="right" paddingBottom="0" paddingTop="0">
				<components:IconButton id="cmdAceptar" click="cmdAceptar_clickHandler(event)" label="Aceptar" styleName="aceptarButton" />
				<components:IconButton id="cmdCancelar" click="cmdCancelar_clickHandler(event)" label="Cancelar" styleName="cancelarButton" />
			</s:HGroup>
		</s:controlBarContent>
	</s:Panel>

</s:VGroup>
