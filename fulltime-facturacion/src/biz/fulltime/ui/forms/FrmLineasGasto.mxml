<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:components1="biz.fulltime.ui.components.*" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:s="library://ns.adobe.com/flex/spark"
		  width="100%" height="100%" creationComplete="creationCompleteHandler(event)" show="showHandler(event)">
	<fx:Script>
		<![CDATA[
			import biz.fulltime.conf.GeneralOptions;
			import biz.fulltime.model.Cuponera;
			import biz.fulltime.model.Documento;
			import biz.fulltime.model.LineaDocumento;
			import biz.fulltime.model.LineasDocumento;
			import biz.fulltime.model.Moneda;
			import biz.fulltime.model.Usuario;
			import biz.fulltime.ui.facturacion.stockprecio.StockArticuloPnl;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			
			import spark.components.TitleWindow;
			import spark.components.gridClasses.CellPosition;
			import spark.events.GridItemEditorEvent;
			import spark.events.GridSelectionEvent;
			
			import util.CatalogoFactory;
			
			private var helpWindow:TitleWindow;
			
			private var ddNum:DGNumStepperEditor = new DGNumStepperEditor();
			
			private var _lineasDocumento:LineasDocumento;
			
			private var _moneda:Moneda;
			
			private var _documento:Documento;
			
			private var cellPos:CellPosition;
			
			private var _changeLineasVenta:Boolean;
						
			public var tieneCambios:Boolean = false;
			
			private var _conceptos:ArrayCollection;
			
			
			[Bindable]
			private var currentLine:LineaDocumento;
			
			[Bindable]
			public var hay_vendedor_dist:Boolean;
						
			[Bindable]
			public function get documento():Documento {
				return _documento;
			}
			
			public function set documento(value:Documento):void {
				_documento = value;
								
				if (_conceptos == null) {
					_conceptos = new ArrayCollection();
				} else {
					_conceptos.removeAll();
				}				
				_conceptos.addAll(CatalogoFactory.getInstance().conceptos);
				
			}
									
			[Bindable(event="monedaChange")]
			public function get moneda():Moneda {
				return _moneda;
			}
			
			public function set moneda(value:Moneda):void {
				if (_moneda !== value) {
					_moneda = value;
					dispatchEvent(new Event("monedaChange"));
				}
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				callLater(function():void {
					dgLineasVenta.setFocus();
					if (dgLineasVenta.dataProvider.length > 0) {
						dgLineasVenta.setSelectedCell(0, 0);						
						currentLine = lineasDocumento.lineas[0];
					}
				});
			}
			
			[Bindable]
			public function get lineasDocumento():LineasDocumento {
				return _lineasDocumento;
			}
			
			public function set lineasDocumento(value:LineasDocumento):void {
				_lineasDocumento = value;
				_changeLineasVenta = true;
				invalidateProperties();
			}
			
			override protected function commitProperties():void {
				super.commitProperties();
				
				if (_changeLineasVenta) {
					_changeLineasVenta = false;
					
					if (!_lineasDocumento) {
						_lineasDocumento = new LineasDocumento();
						_lineasDocumento.documento = documento;
					}
					if (lineasDocumento.lineas.length < 1) {
						var nueva:LineaDocumento = new LineaDocumento();
						nueva.documento = documento;
						lineasDocumento.lineas.addItem(nueva);
					}
					dgLineasVenta.dataProvider = lineasDocumento.lineas;
				}
			}
			
			private function convertirMoneda(cuponera:Cuponera):BigDecimal {
				return documento.convertirMoneda(cuponera.moneda, documento.moneda, new BigDecimal(cuponera.precioUnitario));
			}
			
			private function closePnlHelpHandler(event:CloseEvent):void {
				event.target.removeEventListener(CloseEvent.CLOSE, closePnlHelpHandler);
				PopUpManager.removePopUp(event.target as IFlexDisplayObject);
				dgLineasVenta.setFocus();
			}
			
			protected function dg_keyDownHandler(event:KeyboardEvent):void {
				cellPos = dgLineasVenta.selectedCell;
				
				const columns1:IList = dgLineasVenta.columns;
				var col2:GridColumn = ((cellPos.columnIndex >= 0) && (cellPos.columnIndex < columns1.length)) ? columns1.getItemAt(cellPos.columnIndex) as GridColumn : null;
				var dataField:String = col2 ? col2.dataField : "";
				
				var superuser:Boolean = GeneralOptions.getInstance().loggedUser.esSupervisor();
				
				var permitirNegativos:Boolean = false;
				var codigoComprobante:String = _documento.comprobante.codigo;
				var maxRow:int = 0;
				
				
				if (event.keyCode == Keyboard.F2) { // Se presiono la tecla 'F2'
					if (dataField == "concepto") {
						event.preventDefault();
						//mostrarAntecedentes(event);
					}
					
				} else if (event.keyCode == Keyboard.INSERT) { // Se presiono la tecla 'INSERT'
					maxRow = dgLineasVenta.dataProvider.length - 1;
					if (hasPermEdition()) {
						if (maxRow + 2 > 17 && !documento.comprobante.esImportacion()) {
							Alert.show("Se pueden agregar un máximo de 17 líneas por documento.");
						} else {
							agregarLineaVenta();
						}
					}
					
				} else if (event.keyCode == Keyboard.ESCAPE) { // Se presiono la tecla 'ESC'
					if (validateLines()) {
						dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
					}
					
				} else if (event.keyCode == Keyboard.ENTER) {
					var count:int = 0;
					var columns:ArrayCollection = new ArrayCollection(dgLineasVenta.columns.toArray());
					for each (var col:GridColumn in columns) {
						if (col.visible) {
							count++;
						}
					}
					var maxCol:int = columns.length - 3;
					maxRow = dgLineasVenta.dataProvider.length - 1;
					
					var colIndex:int;
					var rowIndex:int;
					if (cellPos == null) {
						colIndex = dgLineasVenta.editorColumnIndex;
						rowIndex = dgLineasVenta.editorRowIndex
					} else {
						var i:int = 1;
						while (!columns[cellPos.columnIndex + i].visible) {
							i++;
						}
						
						colIndex = cellPos.columnIndex + i;
						rowIndex = cellPos.rowIndex;
					}
					if (colIndex > maxCol) {
						colIndex = 2;
						if (rowIndex == maxRow) {
							if (hasPermEdition())
								if (maxRow + 2 > 17 && !documento.comprobante.esImportacion()) {
									Alert.show("Se pueden agregar un máximo de 17 líneas por documento.");
								} else {
									agregarLineaVenta();
								}
						} else {
							rowIndex += 1;
							currentLine = dgLineasVenta.dataProvider.getItemAt(rowIndex) as LineaDocumento;
						}
					}
					
					dgLineasVenta.setSelectedCell(rowIndex, colIndex);
					
				} else if ((permitirNegativos && (event.keyCode == Keyboard.MINUS || event.keyCode == Keyboard.NUMPAD_SUBTRACT)) || (event.keyCode >= Keyboard.A && event.keyCode <= Keyboard.Z) || (event.keyCode >= Keyboard.NUMBER_0 && event.keyCode <= Keyboard.NUMBER_9) || (event.keyCode >= Keyboard.NUMPAD_0 && event.keyCode <= Keyboard.NUMPAD_9) || event.keyCode == Keyboard.NUMPAD_DECIMAL || event.keyCode == Keyboard.PERIOD) {
					if (hasPermEdition()) {
						if ((dgLineasVenta.columns.getItemAt(cellPos.columnIndex) as GridColumn).editable) {
							dgLineasVenta.startItemEditorSession(cellPos.rowIndex, cellPos.columnIndex);
						}
					}
				}
			}
			
			private function agregarLineaVenta():void {
				var nueva:LineaDocumento = new LineaDocumento();
				nueva.documento = lineasDocumento.documento;
				lineasDocumento.lineas.addItem(nueva);
				
				currentLine = nueva;
				
				tieneCambios = true;
				
				callLater(function():void {
					var row:int = lineasDocumento.lineas.length - 1;
					var col:int = 2;
					dgLineasVenta.setSelectedCell(row, col);
					
					callLater(function():void {
						dgLineasVenta.setFocus();
					});
				});
				
			}
			
			private function antecedentesCloseHandler(event:CloseEvent):void {
				if (helpWindow) {
					helpWindow.removeEventListener(CloseEvent.CLOSE, antecedentesCloseHandler);
					PopUpManager.removePopUp(helpWindow as IFlexDisplayObject);
					dgLineasVenta.setFocus();
					helpWindow = null;
				}
			}
									
			private function closePnlHandler(event:CloseEvent):void {
				event.target.removeEventListener(CloseEvent.CLOSE, closePnlHandler);
				PopUpManager.removePopUp(event.target as IFlexDisplayObject);
				dgLineasVenta.setFocus();
			}
			
			protected function cmdAceptar_clickHandler(event:MouseEvent):void {
				if (validateLines()) {
					dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
				} else {
					Alert.show("Los valores no son válidos", "Error");
				}
			}
			
			protected function cmdCancel_clickHandler(event:MouseEvent):void {
				if (validateLines()) {
					dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
				}
			}
			
			private function validateLines():Boolean {
				var conceptosInactivos:ArrayCollection = new ArrayCollection();
				
				var borrarLineas:ArrayCollection = new ArrayCollection();
				for each (var linea:LineaDocumento in lineasDocumento.lineas) {
					if (!linea.articulo && (linea.conceptoIdLin == null || linea.conceptoIdLin == "")) {
						borrarLineas.addItem(linea);
					}
				}
				for each (var item:LineaDocumento in borrarLineas) {
					lineasDocumento.lineas.removeItemAt(lineasDocumento.lineas.getItemIndex(item));
				}
				
				return true;
			}
			
			private function handleFault(event:FaultEvent):void {
				var message:String = event.fault && event.fault.rootCause && event.fault.rootCause.localizedMessage ? event.fault.rootCause.localizedMessage : null;
				if (!message) {
					message = event.message.toString();
				}
				Alert.show(message, "Error", 4, null, null, StyleManager.getStyleManager(null).getStyleDeclaration('.icons32').getStyle('ErrorIcon'));
			}
			
			protected function showHandler(event:FlexEvent):void {
				dgLineasVenta.setFocus();
			}
			
			protected function dgLineasVenta_gridItemEditorSessionSaveHandler(event:GridItemEditorEvent):void {
				var ld2:LineaDocumento = lineasDocumento.lineas.getItemAt(event.rowIndex) as LineaDocumento;
				
				var field:String = event.column.dataField;
				
				if (field == "cantidad") {
					currentLine.obtenerStock();
					
				} else if (field == "concepto") {
					var concepto:String = ld2.getConcepto();
					if (concepto && concepto.length > 50) {
						ld2.setConcepto(concepto.substring(0, 49));
					}
				}
				
				dgLineasVenta.setSelectedCell(event.rowIndex, event.columnIndex);
				callLater(function():void {
					dgLineasVenta.setFocus();
				});
				
				tieneCambios = true;
			}
						
			public function borrarLineaVenta():void {
				var rowIndex:int = dgLineasVenta.selectedCell.rowIndex;
				
				if (lineasDocumento.lineas.length == 1) { // Tengo un solo elemento.
					lineasDocumento.lineas.removeItemAt(rowIndex);
					
					// Agregar una linea vacia al documento
					var lineaDoc:LineaDocumento = new LineaDocumento();
					lineaDoc.articulo = null;
					lineaDoc.documento = _documento;
					
					lineasDocumento.lineas.addItem(lineaDoc);
				} else {
					lineasDocumento.lineas.removeItemAt(rowIndex);
					dgLineasVenta.invalidateDisplayList();
				}
				
				callLater(function():void {
					var maxIndex:int = dgLineasVenta.dataProvider.length - 1;
					if (dgLineasVenta.dataProvider.length >= 0) {
						if (rowIndex == 0) {
							dgLineasVenta.setSelectedCell(rowIndex, 2);
						} else if (rowIndex > maxIndex) {
							dgLineasVenta.setSelectedCell(maxIndex, 2);
						} else {
							dgLineasVenta.setSelectedCell(rowIndex, 2);
						}
					}
				});
				
				tieneCambios = true;
			}
			
			public function editarNotas(linea:LineaDocumento):void {
				if (helpWindow == null) {
					tieneCambios = true;
					
					helpWindow = new TitleWindow();
					helpWindow.width = 540;
					helpWindow.height = 360;
					
					helpWindow.title = "Nota de la línea";
					helpWindow.visible = true;
					
					var notasLineaPnl:FrmNotaLinea = new FrmNotaLinea();
					notasLineaPnl.linea = linea;
					
					PopUpManager.addPopUp(helpWindow, Sprite(FlexGlobals.topLevelApplication), true);
					PopUpManager.centerPopUp(helpWindow);
					
					helpWindow.addEventListener(CloseEvent.CLOSE, notas_closeHandler);
					notasLineaPnl.addEventListener(CloseEvent.CLOSE, notas_closeHandler);
					
					helpWindow.addElement(notasLineaPnl);
				}
				
			}
			
			private function notas_closeHandler(event:CloseEvent):void {
				helpWindow.removeEventListener(CloseEvent.CLOSE, notas_closeHandler);
				PopUpManager.removePopUp(helpWindow as IFlexDisplayObject);
				helpWindow = null;
			}
			
			protected function dgLineasVenta_creationCompleteHandler(event:FlexEvent):void {
				//dgLineasVenta.addEventListener("_mostrarAntecedentes", mostrarAntecedentes);
			}
						
			private function mostrarDepositos(event:Event):void {
				cellPos = dgLineasVenta.selectedCell;
				
				var lineaVenta:LineaDocumento = lineasDocumento.lineas.getItemAt(cellPos.rowIndex) as LineaDocumento;
				if (documento.esSolicitudCompra || !lineaVenta.articulo || !lineaVenta.articulo.codigo || !documento.cliente.codigo) {
					return;
				}
				if (helpWindow) {
					return;
				}
				
				helpWindow = new TitleWindow();
				helpWindow.title = "Depósito/Stock: " + lineaVenta.articulo.codigo + " | " + lineaVenta.articulo.nombre;
				helpWindow.width = 450;
				helpWindow.height = 500;
				
				var frmStockArticulo:StockArticuloPnl = new StockArticuloPnl();
				frmStockArticulo.articulo = lineaVenta.articulo.codigo;
				frmStockArticulo.obtenerStockArticulo();
				
				PopUpManager.addPopUp(helpWindow, Sprite(FlexGlobals.topLevelApplication), true);
				PopUpManager.centerPopUp(helpWindow);
				
				frmStockArticulo.addEventListener(CloseEvent.CLOSE, function(event:CloseEvent):void {
					PopUpManager.removePopUp(helpWindow as IFlexDisplayObject);
					helpWindow = null;
				});
				
				helpWindow.addEventListener(CloseEvent.CLOSE, function(event:CloseEvent):void {
					PopUpManager.removePopUp(helpWindow as IFlexDisplayObject);
					helpWindow = null;
				});
				
				helpWindow.addElement(frmStockArticulo);
				
			}
						
			protected function dgLineasVenta_selectionChangeHandler(event:GridSelectionEvent):void {
				var rowIndex:int = event.selectionChange.rowIndex;
				
				currentLine = lineasDocumento.lineas[rowIndex];
			}
			
			private function hasPermEdition():Boolean {
				if (documento.nuevo) {
					return true;
				} else if (!documento.permisosDocumentoUsuario.edicion) {
					return false;
				} else if (documento.emitido) {
					return (GeneralOptions.getInstance().loggedUser.esSupervisor() || GeneralOptions.getInstance().loggedUser.permisoId == Usuario.USUARIO_ADMINISTRADOR);
				}
				
				return true;
			}
						
			
			[Bindable]
			public function get conceptos():ArrayCollection {
				return _conceptos;
			}
			
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:NumberFormatter id="nf_Espanol_Espanol" fractionalDigits="2" locale="es_ES" />
		<s:NumberFormatter id="nf_Espanol_Espanol_2" fractionalDigits="0" locale="es_ES" />
	</fx:Declarations>
	
	<s:Panel width="100%" height="100%" styleName="pntLineasVenta">
		<s:VGroup width="100%" height="100%">
			<s:HGroup width="100%" height="100%" gap="0">
				<s:DataGrid id="dgLineasVenta" width="100%" height="100%" fontSize="12" creationComplete="dgLineasVenta_creationCompleteHandler(event)" keyDown="dg_keyDownHandler(event)"
							gridItemEditorSessionSave="dgLineasVenta_gridItemEditorSessionSaveHandler(event)" dataProvider="{lineasDocumento.lineas}" selectionMode="singleCell" sortableColumns="false"
							selectionChange="dgLineasVenta_selectionChangeHandler(event)" editable="{hasPermEdition()}">
					<s:columns>
						<s:ArrayList>
							
							<s:GridColumn width="80" dataField="cantidad" headerText="CANTIDAD" editable="{hasPermEdition()}" rendererIsEditable="false"
										  itemEditor="biz.fulltime.ui.forms.DGNumStepperEditor">
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="right">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;
													
													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														label = outerDocument.nf_Espanol_Espanol.format(LineaDocumento(data).getCantidad());
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							
							<s:GridColumn width="100" dataField="conceptoIdLin" headerText="CONCEPTO" editable="{hasPermEdition()}">
								<s:itemEditor>
									<fx:Component>
										<s:GridItemEditor>
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.Concepto;
													import biz.fulltime.model.LineaDocumento;
													
													import mx.events.FlexEvent;
													import mx.utils.StringUtil;
													
													import spark.components.DataGrid;
													
													import util.CatalogoFactory;
													
													protected function acConcepto_creationCompleteHandler(event:FlexEvent):void {
														callLater(function():void {
															acConcepto.textInput.setFocus();
														});
													}
													
													override public function get value():Object {
														var concept:Concepto = acConcepto.selectedItem;
														return concept.codigo;
													}
													
													override public function set value(newValue:Object):void {
														for each (var concept:Concepto in outerDocument.conceptos) {
															if (concept.codigo == newValue.toString()) {
																acConcepto.selectedItem = concept;	
																break;
															}															
														}									
													}
													
													public function codigoNombreLabelFunction(item:Object):String {
														var label:String;
														if (!item) {
															return "";
														}
														if (item.hasOwnProperty("codigo")) {
															label = item.codigo;
														}
														if (item.hasOwnProperty("nombre")) {
															label += " - " + String(item.nombre).toUpperCase();
														}
														return label;
													}
													
													protected function acConcepto_keyDownHandler(event:KeyboardEvent):void {
														if (event.keyCode == Keyboard.F1 || event.keyCode == Keyboard.F2) {
															if (!acConcepto.isPopUp) {
																DataGrid(owner).endItemEditorSession();
															}
														}
													}
													
													/**
													 *  @private
													 */
													override public function setFocus():void {
														acConcepto.setFocus();
													}
													
													protected function acConcepto_changeHandler(event:Event):void {
														var c2:Concepto = acConcepto.selectedItem as Concepto;
														if (c2 != null) {
															LineaDocumento(data).conceptoIdLin = c2.codigo;
															LineaDocumento(data).concepto = c2.nombre;
														}
														
													}
												]]>
											</fx:Script>
											<components1:MyAutoComplete id="acConcepto" width="100%" height="100%" change="acConcepto_changeHandler(event)"
																		creationComplete="acConcepto_creationCompleteHandler(event)" keyDown="acConcepto_keyDownHandler(event)"
																		dataProvider="{ outerDocument.conceptos }" matchType="anyPart" selectedItemStyleName="underline" allowMultipleSelection="false"
																		labelField="nombre" labelFunction="codigoNombreLabelFunction" backspaceAction="remove" allowNewValues="false"
																		dropDownWidth="460" dropDownRowCount="10" />
										</s:GridItemEditor>
									</fx:Component>
								</s:itemEditor>
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="left">
											<fx:Script>
												<![CDATA[
													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														setStyle("color", "#100AB6");
														setStyle("fontWeight", "normal");
																										
														var conpto:String = data.conceptoIdLin ? data.conceptoIdLin : "";
														if (conpto) {
															label = conpto;
														}														
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							
							<s:GridColumn dataField="concepto" resizable="false" headerText="DESCRIPCIÓN" editable="{hasPermEdition()}">
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="left" verticalCenter="0" percentWidth="100">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;
													
													import com.adobe.utils.StringUtil;
													
													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														var f:Function = function updateLinea(linea:LineaDocumento):void {
															try {
																setStyle("color", "#000000");
																setStyle("fontWeight", "normal");
															} catch (error:Error) {
															}
														}
														
														var linea:LineaDocumento = LineaDocumento(data);
														linea.addEventListener("changeStock", function():void {
															f(linea);
														});
														f(linea);
														
														label = linea.getConcepto() != null ? StringUtil.trim(linea.getConcepto()) : "";
														
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
								
								<s:itemEditor>
									<fx:Component>
										<s:DefaultGridItemEditor>
											<fx:Script>
												<![CDATA[
													import spark.components.DataGrid;
													
													override protected function keyDownHandler(event:KeyboardEvent):void {
														if ((value as String).length >= 50) {
															event.preventDefault();
														}
														if (event.keyCode == Keyboard.F1 || event.keyCode == Keyboard.F2) {
															DataGrid(owner).endItemEditorSession();
															DataGrid(owner).dispatchEvent(new Event("_mostrarAntecedentes"));
														}
														
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemEditor>
									</fx:Component>
								</s:itemEditor>
							</s:GridColumn>

							<s:GridColumn width="110" dataField="precio" headerText="P. UNITARIO" editable="{hasPermEdition() || GeneralOptions.getInstance().loggedUser.esSupervisor()}" itemEditor="biz.fulltime.ui.forms.DGNumberEditor">
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="right">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;
													
													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														label = outerDocument.nf_Espanol_Espanol.format(LineaDocumento(data).getPrecio());
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>			
								
							
							<s:GridColumn width="110" headerText="SUBTOTAL" editable="false">
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="right">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;
													
													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														var importe:BigDecimal = LineaDocumento(data).getSubTotal();
														
														label = outerDocument.nf_Espanol_Espanol.format(importe);
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							
							<s:GridColumn width="90" dataField="ivaArticulo" headerText="IVA" editable="true">
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="right">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;
													
													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}														
														if (LineaDocumento(data).ivaArticulo) {
															label = LineaDocumento(data).ivaArticulo.nombre + " - " + outerDocument.nf_Espanol_Espanol.format(LineaDocumento(data).getIva());
														} else {
															label = outerDocument.nf_Espanol_Espanol.format(LineaDocumento(data).getIva());
														}
														
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
								<s:itemEditor>
									<fx:Component>
										<s:GridItemEditor>
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;
													
													import mx.events.FlexEvent;
													import mx.utils.StringUtil;
													
													import spark.components.DataGrid;
													
													import util.CatalogoFactory;
																										
													override public function get value():Object {
														return acIva.selectedItem;
													}
													
													override public function set value(newValue:Object):void {
														acIva.selectedItem = newValue;
													}
																																							
													override public function setFocus():void {
														acIva.setFocus();
													}
																										
													protected function acIva_creationCompleteHandler(event:FlexEvent):void {
														callLater(function():void {
															acIva.textInput.setFocus();
														});														
													}
													
													
												]]>
											</fx:Script>
											<components1:MyAutoComplete id="acIva" width="100%" height="100%" 
																		creationComplete="acIva_creationCompleteHandler(event)" 
																		dataProvider="{ CatalogoFactory.getInstance().ivas }" matchType="anyPart" allowMultipleSelection="false"
																		labelField="nombre" backspaceAction="remove" allowNewValues="false"
																		dropDownWidth="460" dropDownRowCount="10" toolTip="{acIva.text}" />
										</s:GridItemEditor>
									</fx:Component>
								</s:itemEditor>

								
							</s:GridColumn>
							
							<s:GridColumn width="110" headerText="TOTAL" editable="false">
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="right">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;
													
													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}														
														label = outerDocument.nf_Espanol_Espanol.format(LineaDocumento(data).getSubTotal().add(LineaDocumento(data).getIva()));
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							
							<s:GridColumn width="34" headerText="" rendererIsEditable="true" visible="{!documento.emitido || GeneralOptions.getInstance().loggedUser.esSupervisor() }">
								<s:itemRenderer>
									<fx:Component>
										<s:GridItemRenderer>
											<fx:Script>
												<![CDATA[
													import mx.controls.Alert;
													import mx.events.CloseEvent;
													
													protected function cmdRemove_clickHandler(event:MouseEvent):void {
														Alert.show("¿Esta usted seguro?", "Borrar gasto", Alert.YES + Alert.NO, null, myCloseHandler);
													}
													
													private function myCloseHandler(event:CloseEvent):void {
														if (event.detail == Alert.YES) {
															this.outerDocument.borrarLineaVenta();
														}
													}
												]]>
											</fx:Script>
											
											<s:VGroup width="100%" height="100%" horizontalAlign="center" paddingLeft="2" verticalAlign="middle" creationComplete="cmdRemove.setFocus()">
												<s:Button id="cmdRemove" width="100%" height="100%" icon="@Embed('/assets/general/trash.png')" click="cmdRemove_clickHandler(event)"
														  focusEnabled="false" toolTip="Borrar gasto" />
											</s:VGroup>
										</s:GridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							
							<s:GridColumn width="34" headerText="" rendererIsEditable="true" visible="{!documento.emitido || GeneralOptions.getInstance().loggedUser.esSupervisor() }">
								<s:itemRenderer>
									<fx:Component>
										<s:GridItemRenderer>
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;
													
													protected function cmdNotas_clickHandler(event:MouseEvent):void {
														this.outerDocument.editarNotas(LineaDocumento(data));
													}
												]]>
											</fx:Script>
											
											<s:VGroup width="100%" height="100%" horizontalAlign="center" paddingLeft="2" verticalAlign="middle">
												<s:Button id="cmdNotas" width="100%" height="100%" icon="@Embed('/assets/general/notes.png')" click="cmdNotas_clickHandler(event)" focusEnabled="false" 
														  toolTip="Ver Notas"/>
											</s:VGroup>
										</s:GridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
						</s:ArrayList>
					</s:columns>
				</s:DataGrid>
			</s:HGroup>
		</s:VGroup>
		
		<s:controlBarContent>
			<s:HGroup width="100%" horizontalAlign="right" paddingBottom="0" paddingTop="0">
				<mx:Image id="loader1" source="@Embed(source='assets/general/logo_oscuro.gif')" alpha=".5" scaleX=".25" scaleY=".25" />
				<s:Spacer width="100%" />
				<s:Button id="cmdAceptar" click="cmdAceptar_clickHandler(event)" label="Aceptar" styleName="aceptarButton" />
			</s:HGroup>
		</s:controlBarContent>
	</s:Panel>
	
</s:HGroup>
