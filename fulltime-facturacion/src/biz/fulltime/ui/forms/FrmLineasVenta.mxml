<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:components1="biz.fulltime.ui.components.*" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:s="library://ns.adobe.com/flex/spark"
		  width="100%" height="100%" creationComplete="creationCompleteHandler(event)" show="showHandler(event)">
	<fx:Script>
		<![CDATA[
			import biz.fulltime.conf.GeneralOptions;
			import biz.fulltime.conf.ServerConfig;
			import biz.fulltime.model.Articulo;
			import biz.fulltime.model.Cotizaciones;
			import biz.fulltime.model.Cuponera;
			import biz.fulltime.model.Deposito;
			import biz.fulltime.model.Documento;
			import biz.fulltime.model.LineaDocumento;
			import biz.fulltime.model.LineasDocumento;
			import biz.fulltime.model.Moneda;
			import biz.fulltime.model.ParticipacionVendedor;
			import biz.fulltime.model.PreciosVenta;
			import biz.fulltime.model.Usuario;
			import biz.fulltime.ui.components.HelpPnl;
			import biz.fulltime.ui.facturacion.AntecedentesPnl;
			import biz.fulltime.ui.facturacion.ArticulosPnl;
			import biz.fulltime.ui.facturacion.stockprecio.StockArticuloPnl;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			
			import spark.components.TitleWindow;
			import spark.components.gridClasses.CellPosition;
			import spark.events.GridItemEditorEvent;
			import spark.events.GridSelectionEvent;
			
			import util.CatalogoFactory;
			import util.Maths;

			private var helpWindow:TitleWindow;

			private var ddNum:DGNumStepperEditor = new DGNumStepperEditor();

			private var _lineasVenta:LineasDocumento;

			private var _moneda:Moneda;

			private var _deposito:Deposito;

			private var _preciosVenta:PreciosVenta;

			private var _cotizaciones:Cotizaciones;

			private var _documento:Documento;

			private var articulosPnl:ArticulosPnl;

			private var cellPos:CellPosition;

			private var _stock:Number;

			private var _changeLineasVenta:Boolean;

			private var _changeDeposito:Boolean;

			public var mostrarPrecioDist:Boolean = true;

			public var tieneCambios:Boolean = false;

			private var _articulos:ArrayCollection;

			[Bindable]
			public var modoCuponera:Boolean = false;

			[Bindable]
			public var cuponera:Cuponera;

			[Bindable]
			public var hideDescAfilado:Boolean = false;

			
			[Bindable]
			private var currentLine:LineaDocumento;

			[Bindable]
			public var hay_vendedor_dist:Boolean;

			[Bindable]
			public function get stock():Number {
				return _stock;
			}

			public function set stock(value:Number):void {
				_stock = value;
			}

			[Bindable]
			public function get documento():Documento {
				return _documento;
			}

			public function set documento(value:Documento):void {
				_documento = value;

				hay_vendedor_dist = false;

				var lstUsuarioDist:ArrayCollection = new ArrayCollection();
				for each (var user:Usuario in CatalogoFactory.getInstance().usuarios) {
					if (user.permisoId == "V2" && user.venId != null) {
						lstUsuarioDist.addItem(user.venId);
					}
				}

				for each (var participacion:ParticipacionVendedor in _documento.comisiones.participaciones) {
					if (participacion.vendedor) {
						var codeVend:String = participacion.vendedor.codigo;
						if (lstUsuarioDist.contains(codeVend)) {
							hay_vendedor_dist = true;
							break;
						}
					}
				}
				if (_articulos == null) {
					_articulos = new ArrayCollection();
				} else {
					_articulos.removeAll();
				}
				
				if (!esAfilado()) {
					_articulos.addAll(CatalogoFactory.getInstance().getArticulos(_documento.comprobante.codigo));
				}
			}

			[Bindable(event="preciosVentaChange")]
			public function get preciosVenta():PreciosVenta {
				return _preciosVenta;
			}

			public function set preciosVenta(value:PreciosVenta):void {
				if (_preciosVenta !== value) {
					_preciosVenta = value;
				}
			}

			public function get deposito():Deposito {
				return _deposito;
			}

			public function set deposito(value:Deposito):void {
				_deposito = value;
				_changeDeposito = true;
				invalidateProperties();
			}

			[Bindable(event="monedaChange")]
			public function get moneda():Moneda {
				return _moneda;
			}

			public function set moneda(value:Moneda):void {
				if (_moneda !== value) {
					_moneda = value;
					dispatchEvent(new Event("monedaChange"));
				}
			}

			protected function creationCompleteHandler(event:FlexEvent):void {
				callLater(function():void {
					dgLineasVenta.setFocus();
					if (dgLineasVenta.dataProvider.length > 0) {
						if (esAfilado()) {
							dgLineasVenta.setSelectedCell(0, 0);
						} else {
							dgLineasVenta.setSelectedCell(0, 2);
						}

						currentLine = lineasVenta.lineas[0];
						if (_deposito) {
							currentLine.deposito = _deposito.codigo;
						}
						currentLine.obtenerStock();
					}
				});
			}

			[Bindable]
			public function get lineasVenta():LineasDocumento {
				return _lineasVenta;
			}

			public function set lineasVenta(value:LineasDocumento):void {
				_lineasVenta = value;
				_changeLineasVenta = true;
				invalidateProperties();
			}

			override protected function commitProperties():void {
				super.commitProperties();

				if (_changeLineasVenta && _changeDeposito) {
					_changeLineasVenta = false;
					_changeDeposito = false;

					if (!_lineasVenta) {
						_lineasVenta = new LineasDocumento();
						_lineasVenta.documento = documento;
					}
					if (lineasVenta.lineas.length < 1) {
						var nueva:LineaDocumento = new LineaDocumento();
						nueva.documento = documento;
						if (_deposito) {
							nueva.deposito = _deposito.codigo;
						}
						if (esAfilado() && modoCuponera) {
							nueva.setArticulo(cuponera.articulo);
							nueva.setConcepto(cuponera.articulo.nombre);
							nueva.precio = convertirMoneda(cuponera).toString();
						}
						lineasVenta.lineas.addItem(nueva);
					}
					for each (var l:LineaDocumento in lineasVenta.lineas) {
						l.deposito = _deposito ? _deposito.codigo : null;
						l.obtenerStock();
					}
					dgLineasVenta.dataProvider = lineasVenta.lineas;
				}
			}
			
			private function convertirMoneda(cuponera:Cuponera):BigDecimal {
				return documento.convertirMoneda(cuponera.moneda, documento.moneda, new BigDecimal(cuponera.precioUnitario));
			}

			private function closePnlHelpHandler(event:CloseEvent):void {
				event.target.removeEventListener(CloseEvent.CLOSE, closePnlHelpHandler);
				PopUpManager.removePopUp(event.target as IFlexDisplayObject);
				dgLineasVenta.setFocus();
			}

			protected function dg_keyDownHandler(event:KeyboardEvent):void {
				cellPos = dgLineasVenta.selectedCell;
				
				const columns1:IList = dgLineasVenta.columns;
				var col2:GridColumn = ((cellPos.columnIndex >= 0) && (cellPos.columnIndex < columns1.length)) ? columns1.getItemAt(cellPos.columnIndex) as GridColumn : null;
				var dataField:String = col2 ? col2.dataField : "";
					
				var superuser:Boolean = GeneralOptions.getInstance().loggedUser.esSupervisor();

				var permitirNegativos:Boolean = false;
				var codigoComprobante:String = _documento.comprobante.codigo;
				if (codigoComprobante == "120" || codigoComprobante == "121" || codigoComprobante == "122" || codigoComprobante == "124") {
					permitirNegativos = true;
				}

				var maxRow:int = 0;

				if (event.keyCode == Keyboard.F1) {
					if (dataField == "ordenTrabajo") {
						var hlpPanel:HelpPnl = new HelpPnl();
						hlpPanel.label0 = "Obtener ";
						hlpPanel.label = "orden";
						hlpPanel.addEventListener(CloseEvent.CLOSE, function(event:CloseEvent):void {
								var helpPnl:HelpPnl = HelpPnl(event.target);
								var ordenTrabajo:String = helpPnl.getValue();

								PopUpManager.removePopUp(event.target as IFlexDisplayObject);

								var remObj:RemoteObject = new RemoteObject();
								remObj.destination = "CreatingRpc";
								remObj.channelSet = ServerConfig.getInstance().channelSet;
								remObj.addEventListener(ResultEvent.RESULT, function(evt:ResultEvent):void {
										var ld:LineaDocumento = evt.result as LineaDocumento;
										if (ld) {
											dgLineasVenta.setSelectedCell(cellPos.rowIndex, cellPos.columnIndex);
											callLater(function():void {
													dgLineasVenta.setFocus();
												});

											// Obtengo la línea y le seteo los nuevos valores
											var ld2:LineaDocumento = lineasVenta.lineas.getItemAt(cellPos.rowIndex) as LineaDocumento;
											ld2.cantidad = ld.cantidad;
											if (modoCuponera) {
												ld2.articulo = cuponera.articulo;
												ld2.concepto = cuponera.articulo.nombre;
												ld2.precio = convertirMoneda(cuponera).toString();
											} else {
												ld2.precio = ld.precio;
												ld2.articulo = ld.articulo;
												ld2.concepto = ld.concepto;
											}
											ld2.diametro = ld.diametro;
											ld2.cascados = ld.cascados;
											ld2.afilador = ld.afilador;
											ld2.notas = ld.notas;

											ld2.marca = ld.marca;
											ld2.rotos = ld.rotos;

											ld2.ordenTrabajo = ordenTrabajo;
										}
									});
								remObj.addEventListener(FaultEvent.FAULT, handleFault);
								remObj.showBusyCursor = false;
								remObj.getLineaDocumento(ordenTrabajo);

							});
						PopUpManager.addPopUp(hlpPanel, this, true);
						PopUpManager.centerPopUp(hlpPanel);

					} else if (dataField == "articulo" || dataField == "concepto") {
						if (helpWindow) {
							return;
						}
						if (documento.comprobante.codigo == "28") {
							return;
						}
						helpWindow = new TitleWindow();
						helpWindow.title = "Artículos";
						helpWindow.width = 1024;
						helpWindow.height = 720;

						articulosPnl = new ArticulosPnl();
						articulosPnl.articulos = _articulos;
						articulosPnl.documento =  documento;
						articulosPnl.articulosCuponera = documento.artCuponera;

						PopUpManager.addPopUp(helpWindow, this.parentApplication.owner, true);
						PopUpManager.centerPopUp(helpWindow);

						helpWindow.addEventListener(CloseEvent.CLOSE, articulosCloseHandler);
						articulosPnl.addEventListener(CloseEvent.CLOSE, articulosCloseHandler);

						helpWindow.addElement(articulosPnl);
						
					} else if (dataField == "descuento") {
						// Cancela el comportamiento por defecto al presionar la tecla 'F2'.						
						event.preventDefault();

						helpWindow = new TitleWindow();
						helpWindow.title = "Descuentos";
						helpWindow.width = 280;
						helpWindow.height = 220;
						helpWindow.visible = true;

						var lineaVenta2:LineaDocumento = lineasVenta.lineas.getItemAt(cellPos.rowIndex) as LineaDocumento;

						var _resumen:XML =
							<resumen/>
							;
						_resumen.total = lineaVenta2.getPrecio().toString();
						_resumen.descuento = lineaVenta2.getDescuento().toString();

						var descPnl:FrmDescuentos = new FrmDescuentos();
						descPnl.resumen = _resumen;

						PopUpManager.addPopUp(helpWindow, this.parentApplication.owner, true);
						PopUpManager.centerPopUp(helpWindow);

						descPnl.addEventListener(CloseEvent.CLOSE, closeHandler);

						helpWindow.addElement(descPnl);

						helpWindow.closeButton.visible = false;
					}
					
				} else if (event.keyCode == Keyboard.F2) { // Se presiono la tecla 'F2'
					if (dataField == "articulo" || dataField == "concepto") {
						event.preventDefault();
						mostrarAntecedentes(event);
					}

				} else if (event.keyCode == Keyboard.F3) {
					if (superuser) {
						event.preventDefault();
						mostrarAntecedentesArticulo(event);
					}

				} else if (event.keyCode == Keyboard.F4) {
					event.preventDefault();
					mostrarDepositos(event);

				} else if (event.keyCode == Keyboard.INSERT) { // Se presiono la tecla 'INSERT'
					maxRow = dgLineasVenta.dataProvider.length - 1;
					if (hasPermEdition()) {
						if (maxRow + 2 > 17 && !documento.comprobante.esImportacion()) {
							Alert.show("Se pueden agregar un máximo de 17 líneas por documento.");
						} else {
							agregarLineaVenta();
						}
					}

				} else if (event.keyCode == Keyboard.ESCAPE) { // Se presiono la tecla 'ESC'
					if (validateLines()) {
						dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
					}

				} else if (event.keyCode == Keyboard.ENTER) {
					var count:int = 0;
					var columns:ArrayCollection = new ArrayCollection(dgLineasVenta.columns.toArray());
					for each (var col:GridColumn in columns) {
						if (col.visible) {
							count++;
						}
					}
					var maxCol:int = columns.length - 3;
					maxRow = dgLineasVenta.dataProvider.length - 1;

					var colIndex:int;
					var rowIndex:int;
					if (cellPos == null) {
						colIndex = dgLineasVenta.editorColumnIndex;
						rowIndex = dgLineasVenta.editorRowIndex
					} else {
						var i:int = 1;
						while (!columns[cellPos.columnIndex + i].visible) {
							i++;
						}

						colIndex = cellPos.columnIndex + i;
						rowIndex = cellPos.rowIndex;
					}
					if (colIndex > maxCol) {
						colIndex = esAfilado() ? 0 : 2;
						if (rowIndex == maxRow) {
							if (hasPermEdition())
								if (maxRow + 2 > 17 && !documento.comprobante.esImportacion()) {
									Alert.show("Se pueden agregar un máximo de 17 líneas por documento.");
								} else {
									agregarLineaVenta();
								}
						} else {
							rowIndex += 1;
							currentLine = dgLineasVenta.dataProvider.getItemAt(rowIndex) as LineaDocumento;
						}
					}

					dgLineasVenta.setSelectedCell(rowIndex, colIndex);

				} else if ((permitirNegativos && (event.keyCode == Keyboard.MINUS || event.keyCode == Keyboard.NUMPAD_SUBTRACT)) || (event.keyCode >= Keyboard.A && event.keyCode <= Keyboard.Z) || (event.keyCode >= Keyboard.NUMBER_0 && event.keyCode <= Keyboard.NUMBER_9) || (event.keyCode >= Keyboard.NUMPAD_0 && event.keyCode <= Keyboard.NUMPAD_9) || event.keyCode == Keyboard.NUMPAD_DECIMAL || event.keyCode == Keyboard.PERIOD) {
					if (hasPermEdition()) {
						if ((dgLineasVenta.columns.getItemAt(cellPos.columnIndex) as GridColumn).editable) {
							dgLineasVenta.startItemEditorSession(cellPos.rowIndex, cellPos.columnIndex);
						}
					}
				}
			}

			private function agregarLineaVenta():void {
				var nueva:LineaDocumento = new LineaDocumento();
				nueva.documento = lineasVenta.documento;
				if (_deposito) {
					nueva.deposito = _deposito.codigo;
				}
				if (esAfilado() && modoCuponera) {
					nueva.setArticulo(cuponera.articulo);
					nueva.setConcepto(cuponera.articulo.nombre);
					nueva.precio = convertirMoneda(cuponera).toString();
				}
				lineasVenta.lineas.addItem(nueva);

				currentLine = nueva;

				tieneCambios = true;

				callLater(function():void {
						var row:int = lineasVenta.lineas.length - 1;
						var col:int = esAfilado() ? 0 : 2;
						dgLineasVenta.setSelectedCell(row, col);

						callLater(function():void {
								dgLineasVenta.setFocus();
							});
					});

			}

			private function antecedentesCloseHandler(event:CloseEvent):void {
				if (helpWindow) {
					helpWindow.removeEventListener(CloseEvent.CLOSE, antecedentesCloseHandler);
					PopUpManager.removePopUp(helpWindow as IFlexDisplayObject);
					dgLineasVenta.setFocus();
					helpWindow = null;
				}
			}

			private function articulosCloseHandler(event:CloseEvent):void {
				helpWindow.removeEventListener(CloseEvent.CLOSE, articulosCloseHandler);
				articulosPnl.removeEventListener(CloseEvent.CLOSE, articulosCloseHandler);

				if (articulosPnl.articulo) {
					LineaDocumento(lineasVenta.lineas.getItemAt(cellPos.rowIndex)).elegirArticulo(articulosPnl.articulo);
				}
				articulosPnl = null;

				PopUpManager.removePopUp(helpWindow as IFlexDisplayObject);
				helpWindow = null;
				dgLineasVenta.setFocus();
			}

			private function closeHandler(event:CloseEvent):void {
				var frmDescuentos:FrmDescuentos = event.target as FrmDescuentos;
				LineaDocumento(lineasVenta.lineas.getItemAt(cellPos.rowIndex)).descuento = frmDescuentos.prcjeDto;

				if (helpWindow) {
					helpWindow.removeEventListener(CloseEvent.CLOSE, closeHandler);
					PopUpManager.removePopUp(helpWindow as IFlexDisplayObject);
					dgLineasVenta.setFocus();
					
					helpWindow = null;
				}
			}

			private function closePnlHandler(event:CloseEvent):void {
				event.target.removeEventListener(CloseEvent.CLOSE, closePnlHandler);
				PopUpManager.removePopUp(event.target as IFlexDisplayObject);
				dgLineasVenta.setFocus();
			}

			protected function cmdAceptar_clickHandler(event:MouseEvent):void {
				if (validateLines()) {
					dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
				} else {
					Alert.show("Los valores no son válidos", "Error");
				}
			}

			protected function cmdCancel_clickHandler(event:MouseEvent):void {
				if (validateLines()) {
					dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
				}
			}

			private function validateLines():Boolean {
				var articulosInactivos:ArrayCollection = new ArrayCollection();

				var borrarLineas:ArrayCollection = new ArrayCollection();
				for each (var linea:LineaDocumento in lineasVenta.lineas) {
					if (!linea.articulo && (linea.conceptoIdLin == null || linea.conceptoIdLin == "")) {
						borrarLineas.addItem(linea);
					}
					if (linea.articulo && !linea.articulo.activo) {
						articulosInactivos.addItem(linea.articulo);
					}
					if (linea.articulo && documento.comprobante.codigo == "80") {
						if (linea.precio && linea.precio.length > 0) {
							var p:BigDecimal = new BigDecimal(linea.precio);
							if (p.compareTo(BigDecimal.ZERO) <= 0) {
								return false;
							}
						} else {
							return false;
						}
					}
					
					// Si es afilado y esta en modo cuponera, reseteo los descuentos configurados.
					if (esAfilado() && modoCuponera) {
						linea.descuento = "0";
						linea.linDto1 = "0";
						linea.linDto2 = "0";
						linea.linDto3 = "0";
						linea.linDto4 = "0";
					}

				}
				for each (var item:LineaDocumento in borrarLineas) {
					lineasVenta.lineas.removeItemAt(lineasVenta.lineas.getItemIndex(item));
				}
				if (articulosInactivos.length > 0) {
					activarArticulos(articulosInactivos);
				}

				return true;
			}

			protected function activarArticulos(articulos:ArrayCollection):void {
				var remObj:RemoteObject = new RemoteObject();
				remObj.destination = "CreatingRpc";
				remObj.channelSet = ServerConfig.getInstance().channelSet;
				remObj.addEventListener(ResultEvent.RESULT, function(evt:ResultEvent):void {
						CatalogoFactory.getInstance().refrescarArticulos();
					});
				remObj.addEventListener(FaultEvent.FAULT, handleFault);
				remObj.showBusyCursor = false;

				remObj.activarArticulos(articulos);
			}

			private function handleFault(event:FaultEvent):void {
				var message:String = event.fault && event.fault.rootCause && event.fault.rootCause.localizedMessage ? event.fault.rootCause.localizedMessage : null;
				if (!message) {
					message = event.message.toString();
				}
				Alert.show(message, "Error", 4, null, null, StyleManager.getStyleManager(null).getStyleDeclaration('.icons32').getStyle('ErrorIcon'));
			}

			protected function showHandler(event:FlexEvent):void {
				dgLineasVenta.setFocus();
			}

			protected function dgLineasVenta_gridItemEditorSessionSaveHandler(event:GridItemEditorEvent):void {
				var ld2:LineaDocumento = lineasVenta.lineas.getItemAt(event.rowIndex) as LineaDocumento;

				var field:String = event.column.dataField;
				
				if (esAfilado()) {
					if (field == "ordenTrabajo") {
						var remObj:RemoteObject = new RemoteObject();
						remObj.destination = "CreatingRpc";
						remObj.channelSet = ServerConfig.getInstance().channelSet;
						remObj.addEventListener(ResultEvent.RESULT, function(evt:ResultEvent):void {
							var ld:LineaDocumento = evt.result as LineaDocumento;
							if (ld) {
								if (modoCuponera) {
									ld2.articulo = cuponera.articulo;
									ld2.concepto = cuponera.articulo.nombre;
									ld2.precio = convertirMoneda(cuponera).toString();
								} else {
									ld2.articulo = ld.articulo;
									ld2.concepto = ld.concepto;
									ld2.precio = ld.precio;
								}
								// Obtengo la linea y le seteo los nuevos valores
								ld2.cantidad = ld.cantidad;
								
								ld2.diametro = ld.diametro;
								ld2.cascados = ld.cascados;
								ld2.afilador = ld.afilador;
								ld2.notas = ld.notas;
								
								ld2.marca = ld.marca;
								ld2.rotos = ld.rotos;
								
								dgLineasVenta.setSelectedCell(cellPos.rowIndex, cellPos.columnIndex);
								callLater(function():void {
									dgLineasVenta.setFocus();
								});
								
							} else {
								Alert.show("No se encontró la orden de trabajo " + ld2.ordenTrabajo);
							}
						});
						
						remObj.addEventListener(FaultEvent.FAULT, handleFault);
						remObj.showBusyCursor = false;
						remObj.getLineaDocumento(ld2.ordenTrabajo);
						
					} else if (field == "linDto1") {
						if (ld2.linDto1 && new BigDecimal(ld2.linDto1).compareTo(new BigDecimal("10")) > 0) {
							ld2.linDto1 = "10";
						}
						updateDescuentoTotal(event.rowIndex);
						
					} else if (field == "linDto2") {
						if (ld2.linDto2 && new BigDecimal(ld2.linDto2).compareTo(new BigDecimal("10")) > 0) {
							ld2.linDto2 = "10";
						}
						updateDescuentoTotal(event.rowIndex);
						
					} else if (field == "linDto3") {
						if (ld2.linDto3 && new BigDecimal(ld2.linDto3).compareTo(new BigDecimal("33")) > 0) {
							ld2.linDto3 = "33";
						}
						updateDescuentoTotal(event.rowIndex);
						
					} else if (field == "linDto4") {
						if (ld2.linDto4 && new BigDecimal(ld2.linDto4).compareTo(new BigDecimal("25")) > 0) {
							ld2.linDto4 = "25";
						}
						updateDescuentoTotal(event.rowIndex);
					} 
				}
				
				if (field == "cantidad" || field == "articulo") {
					currentLine.obtenerStock();
					
				} else if (field == "concepto") {
					var concepto:String = ld2.getConcepto();
					if (concepto && concepto.length > 50) {
						ld2.setConcepto(concepto.substring(0, 49));
					}
				}

				dgLineasVenta.setSelectedCell(event.rowIndex, event.columnIndex);
				callLater(function():void {
					dgLineasVenta.setFocus();
				});

				tieneCambios = true;
			}
			
			public function updateDescuentoTotal(row:int):void {
				var ld:LineaDocumento = lineasVenta.lineas.getItemAt(row) as LineaDocumento;
								
				var dcto1:BigDecimal = ld.getDcto1();
				var dcto2:BigDecimal = ld.getDcto2();
				var dcto3:BigDecimal = ld.getDcto3();
				var dcto4:BigDecimal = ld.getDcto4();
				
				var d1:BigDecimal = Maths.ONE_HUNDRED.subtract(dcto1).divideScaleRound(Maths.ONE_HUNDRED, 2, MathContext.ROUND_HALF_EVEN);
				var d2:BigDecimal = Maths.ONE_HUNDRED.subtract(dcto2).divideScaleRound(Maths.ONE_HUNDRED, 2, MathContext.ROUND_HALF_EVEN);
				var d3:BigDecimal = Maths.ONE_HUNDRED.subtract(dcto3).divideScaleRound(Maths.ONE_HUNDRED, 2, MathContext.ROUND_HALF_EVEN);
				var d4:BigDecimal = Maths.ONE_HUNDRED.subtract(dcto4).divideScaleRound(Maths.ONE_HUNDRED, 2, MathContext.ROUND_HALF_EVEN);
				
				ld.descuento = Maths.ONE_HUNDRED.subtract(Maths.ONE_HUNDRED.multiply(d1).multiply(d2).multiply(d3).multiply(d4).setScale(2, MathContext.ROUND_UP)).toString();				
			}

			public function borrarLineaVenta():void {
				var rowIndex:int = dgLineasVenta.selectedCell.rowIndex;

				if (lineasVenta.lineas.length == 1) { // Tengo un solo elemento.
					lineasVenta.lineas.removeItemAt(rowIndex);

					// Agregar una linea vacia al documento
					var lineaDoc:LineaDocumento = new LineaDocumento();
					lineaDoc.articulo = null;
					lineaDoc.documento = _documento;

					lineasVenta.lineas.addItem(lineaDoc);
				} else {
					lineasVenta.lineas.removeItemAt(rowIndex);
					dgLineasVenta.invalidateDisplayList();
				}

				callLater(function():void {
						var maxIndex:int = dgLineasVenta.dataProvider.length - 1;
						if (dgLineasVenta.dataProvider.length >= 0) {
							if (rowIndex == 0) {
								dgLineasVenta.setSelectedCell(rowIndex, esAfilado() ? 0 : 2);
							} else if (rowIndex > maxIndex) {
								dgLineasVenta.setSelectedCell(maxIndex, esAfilado() ? 0 : 2);
							} else {
								dgLineasVenta.setSelectedCell(rowIndex, esAfilado() ? 0 : 2);
							}
						}
					});

				tieneCambios = true;
			}

			public function editarNotas(linea:LineaDocumento):void {
				if (helpWindow == null) {
					tieneCambios = true;

					helpWindow = new TitleWindow();
					helpWindow.width = 540;
					helpWindow.height = 360;

					helpWindow.title = "Nota de la línea";
					helpWindow.visible = true;

					var notasLineaPnl:FrmNotaLinea = new FrmNotaLinea();
					notasLineaPnl.linea = linea;

					PopUpManager.addPopUp(helpWindow, Sprite(FlexGlobals.topLevelApplication), true);
					PopUpManager.centerPopUp(helpWindow);

					helpWindow.addEventListener(CloseEvent.CLOSE, notas_closeHandler);
					notasLineaPnl.addEventListener(CloseEvent.CLOSE, notas_closeHandler);

					helpWindow.addElement(notasLineaPnl);
				}

			}

			private function notas_closeHandler(event:CloseEvent):void {
				helpWindow.removeEventListener(CloseEvent.CLOSE, notas_closeHandler);
				PopUpManager.removePopUp(helpWindow as IFlexDisplayObject);
				helpWindow = null;
			}

			protected function dgLineasVenta_creationCompleteHandler(event:FlexEvent):void {
				dgLineasVenta.addEventListener("_mostrarAntecedentes", mostrarAntecedentes);
			}

			private function mostrarAntecedentes(event:Event):void {
				cellPos = dgLineasVenta.selectedCell;

				var lineaVenta:LineaDocumento = lineasVenta.lineas.getItemAt(cellPos.rowIndex) as LineaDocumento;

				var codigoContacto:String = documento.esSolicitudCompra ? (documento.proveedor ? documento.proveedor.codigo : null) : (documento.cliente ? documento.cliente.codigo : null);
				var nombreContacto:String = documento.esSolicitudCompra ? (documento.proveedor ? documento.proveedor.nombre : "") : (documento.cliente ? documento.cliente.nombre : "");
				
				if (!lineaVenta.articulo || !lineaVenta.articulo.codigo || !codigoContacto) {
					return;
				}
				if (helpWindow) {
					return;
				}

				helpWindow = new TitleWindow();
				helpWindow.title = "Antecedentes de " + (documento.esSolicitudCompra ? "compra" : "venta") + " del artículo a '" + nombreContacto.toUpperCase() + "'";
				helpWindow.width = 1000;
				helpWindow.height = 500;

				var antecedentesPnl:AntecedentesPnl = new AntecedentesPnl();
				antecedentesPnl.articulo = lineaVenta.articulo.codigo;
				antecedentesPnl.cliente = codigoContacto;
				antecedentesPnl.obtenerAntecedentes(!documento.esSolicitudCompra);

				PopUpManager.addPopUp(helpWindow, this.parentApplication.owner, true);
				PopUpManager.centerPopUp(helpWindow);

				helpWindow.addEventListener(CloseEvent.CLOSE, antecedentesCloseHandler);
				antecedentesPnl.addEventListener(CloseEvent.CLOSE, antecedentesCloseHandler);

				helpWindow.addElement(antecedentesPnl);
			}

			private function mostrarDepositos(event:Event):void {
				cellPos = dgLineasVenta.selectedCell;

				var lineaVenta:LineaDocumento = lineasVenta.lineas.getItemAt(cellPos.rowIndex) as LineaDocumento;
				if (documento.esSolicitudCompra || !lineaVenta.articulo || !lineaVenta.articulo.codigo || !documento.cliente.codigo) {
					return;
				}
				if (helpWindow) {
					return;
				}

				helpWindow = new TitleWindow();
				helpWindow.title = "Depósito/Stock: " + lineaVenta.articulo.codigo + " | " + lineaVenta.articulo.nombre;
				helpWindow.width = 450;
				helpWindow.height = 500;

				var frmStockArticulo:StockArticuloPnl = new StockArticuloPnl();
				frmStockArticulo.articulo = lineaVenta.articulo.codigo;
				frmStockArticulo.obtenerStockArticulo();

				PopUpManager.addPopUp(helpWindow, Sprite(FlexGlobals.topLevelApplication), true);
				PopUpManager.centerPopUp(helpWindow);

				frmStockArticulo.addEventListener(CloseEvent.CLOSE, function(event:CloseEvent):void {
						PopUpManager.removePopUp(helpWindow as IFlexDisplayObject);
						helpWindow = null;
					});

				helpWindow.addEventListener(CloseEvent.CLOSE, function(event:CloseEvent):void {
						PopUpManager.removePopUp(helpWindow as IFlexDisplayObject);
						helpWindow = null;
					});

				helpWindow.addElement(frmStockArticulo);

			}

			private function mostrarAntecedentesArticulo(event:Event):void {
				cellPos = dgLineasVenta.selectedCell;

				var lineaVenta:LineaDocumento = lineasVenta.lineas.getItemAt(cellPos.rowIndex) as LineaDocumento;

				if (documento.esSolicitudCompra || !lineaVenta.articulo || !lineaVenta.articulo.codigo || !documento.cliente.codigo) {
					return;
				}
				if (helpWindow) {
					return;
				}

				helpWindow = new TitleWindow();
				helpWindow.title = "Antecedentes de " + (documento.esSolicitudCompra ? "compra" : "venta") + " del artículo";
				helpWindow.width = 1000;
				helpWindow.height = 500;

				var antecedentesPnl:AntecedentesPnl = new AntecedentesPnl();
				antecedentesPnl.articulo = lineaVenta.articulo.codigo;
				antecedentesPnl.obtenerAntecedentes(!documento.esSolicitudCompra);

				PopUpManager.addPopUp(helpWindow, this.parentApplication.owner, true);
				PopUpManager.centerPopUp(helpWindow);

				helpWindow.addEventListener(CloseEvent.CLOSE, antecedentesCloseHandler);
				antecedentesPnl.addEventListener(CloseEvent.CLOSE, antecedentesCloseHandler);

				helpWindow.addElement(antecedentesPnl);
			}

			protected function dgLineasVenta_selectionChangeHandler(event:GridSelectionEvent):void {
				var rowIndex:int = event.selectionChange.rowIndex;

				currentLine = lineasVenta.lineas[rowIndex];
				if (_deposito) {
					currentLine.deposito = _deposito.codigo;
				}
				currentLine.obtenerStock();
			}

			private function hasPermEdition():Boolean {
				if (documento.nuevo) {
					return true;
				} else if (!documento.permisosDocumentoUsuario.edicion) {
					return false;
				} else if (documento.emitido) {
					return (GeneralOptions.getInstance().loggedUser.esSupervisor() || GeneralOptions.getInstance().loggedUser.permisoId == Usuario.USUARIO_ADMINISTRADOR);
				}
				
				return true;
			}
			
			private function hasPriceModify():Boolean {
				if (esAfilado()) {
					return !modoCuponera && !hideDescAfilado;
				}
				return true;
			}

			public function esAfilado():Boolean {
				return documento.esAfilado();
			}

			[Bindable]
			public function get articulos():ArrayCollection {
				return _articulos;
			}

			public function set articulos(value:ArrayCollection):void {
				_articulos = value;
			}

			public function updateArticulosAfilado():void {
				if (esAfilado()) {
					_articulos.removeAll();

					var _art:ArrayCollection = new ArrayCollection();
					if (!modoCuponera) {
						hideDescAfilado = false;
						
						var artsAfilado:ArrayCollection = CatalogoFactory.getInstance().getArticulos(_documento.comprobante.codigo);
						for each (var k:Articulo in artsAfilado) {
							_art.addItem(k);
						}

					} else {
						hideDescAfilado = true;
						_art.addItem(cuponera);
					}
					articulos = _art;
					
				}

			}
		]]>
	</fx:Script>

	<fx:Declarations>
		<s:NumberFormatter id="nf_Espanol_Espanol" fractionalDigits="2" locale="es_ES" />
		<s:NumberFormatter id="nf_Espanol_Espanol_2" fractionalDigits="0" locale="es_ES" />
	</fx:Declarations>

	<s:Panel width="100%" height="100%" styleName="pntLineasVenta">
		<s:VGroup width="100%" height="100%">
			<s:HGroup width="100%" height="100%" gap="0">
				<s:DataGrid id="dgLineasVenta" width="100%" height="100%" fontSize="12" creationComplete="dgLineasVenta_creationCompleteHandler(event)" keyDown="dg_keyDownHandler(event)"
							gridItemEditorSessionSave="dgLineasVenta_gridItemEditorSessionSaveHandler(event)" dataProvider="{lineasVenta.lineas}" selectionMode="singleCell" sortableColumns="false"
							selectionChange="dgLineasVenta_selectionChangeHandler(event)" editable="{hasPermEdition()}">
					<s:columns>
						<s:ArrayList>
							<s:GridColumn id="colOrdenTrabajo" width="90" dataField="ordenTrabajo" minWidth="90" sortable="false" headerText="ORDEN TRABAJO" editable="true" resizable="false"
										  visible="{esAfilado()}" />

							<s:GridColumn id="colState" width="10" minWidth="10" sortable="false" headerText="" editable="false" dataField="state" resizable="false" visible="{!esAfilado()}">
								<s:itemRenderer>
									<fx:Component>
										<s:GridItemRenderer textAlign="right">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.Articulo;
													import biz.fulltime.model.Documento;
													import biz.fulltime.model.LineaDocumento;

													import flash.utils.setTimeout;

													[Bindable]
													private var _colorBackground:uint = 0x00FF00;

													[Bindable]
													private var _alpha:Number = 1;

													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}

														var linea:LineaDocumento = LineaDocumento(data);
														linea.addEventListener("changeStock", function():void {
																updateLinea(linea);
															});
														updateLinea(linea);

														var art:String = data.articulo ? data.articulo.codigo : "";
														if (art) {
															label = art;
														}

													}

													private function updateLinea(linea:LineaDocumento):void {
														var doc:Documento = linea.documento;

														var esCliente:Boolean = doc.cliente != null;
														var esProveedor:Boolean = doc.proveedor != null;

														if (!data.articulo || esCliente) {
															_colorBackground = 0xCCCCCC;
														} else if (!data.articulo.activo) { // INACTIVO
															var f:Function = function updateLinea(linea:LineaDocumento):void {
																	_colorBackground = !linea.hasStock ? 0xFFFF00 : 0xFF0000;
																}
															var linea:LineaDocumento = LineaDocumento(data);
															linea.addEventListener("changeStock", function():void {
																	f(linea);
																});
															f(linea);
														} else {
															_colorBackground = 0x100AB6;
														}

													}
												]]>
											</fx:Script>

											<s:Rect bottom="0" left="0" right="0" top="0">
												<s:fill>
													<s:SolidColor color="{_colorBackground}" alpha="{_alpha}" />
												</s:fill>
											</s:Rect>

										</s:GridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							
							<s:GridColumn width="80" dataField="cantidad" headerText="CANTIDAD" editable="{hasPermEdition()}" rendererIsEditable="false"
										  itemEditor="biz.fulltime.ui.forms.DGNumStepperEditor">
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="right">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;

													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														label = outerDocument.nf_Espanol_Espanol.format(LineaDocumento(data).getCantidad());
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>

							<s:GridColumn width="130" dataField="articulo" headerText="ARTÍCULO" editable="{hasPermEdition() &amp;&amp; !modoCuponera}">
								<s:itemEditor>
									<fx:Component>
										<s:GridItemEditor>
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.Articulo;
													import biz.fulltime.model.LineaDocumento;

													import mx.events.FlexEvent;
													import mx.utils.StringUtil;

													import spark.components.DataGrid;

													import util.CatalogoFactory;

													protected function acArticulo_creationCompleteHandler(event:FlexEvent):void {
														callLater(function():void {
																acArticulo.textInput.setFocus();
															});
													}

													override public function get value():Object {
														return acArticulo.selectedItem;
													}

													override public function set value(newValue:Object):void {
														acArticulo.selectedItem = newValue;
													}

													public function codigoNombreLabelFunction(item:Object):String {
														var label:String;
														if (!item) {
															return "";
														}
														

														if (item.hasOwnProperty("codigo")) {
															label = item.codigo;
														}
														if (item.hasOwnProperty("nombre")) {
															label += " - " + (outerDocument.esAfilado() ? item.nombre.toUpperCase() : item.nombre);
														}
														if (item.hasOwnProperty("codigoOrigen")) {
															label += (item.codigoOrigen && item.codigoOrigen.length > 0) ? (" [" + item.codigoOrigen + "]") : "";
														}
														return label;
													}

													protected function acArticulo_keyDownHandler(event:KeyboardEvent):void {
														if (event.keyCode == Keyboard.F1 || event.keyCode == Keyboard.F2) {
															if (!acArticulo.isPopUp) {
																DataGrid(owner).endItemEditorSession();
															}
														}
													}

													/**
													 *  @private
													 */
													override public function setFocus():void {
														acArticulo.setFocus();
													}

													protected function acArticulo_changeHandler(event:Event):void {
														var articulo:Articulo = acArticulo.selectedItem as Articulo;
														if (articulo != null) {
															LineaDocumento(data).elegirArticulo(articulo);
														} else {
															LineaDocumento(data).stock = BigDecimal.ZERO;
														}
														

													}
												]]>
											</fx:Script>
											<components1:MyAutoComplete id="acArticulo" width="100%" height="100%" change="acArticulo_changeHandler(event)"
																		creationComplete="acArticulo_creationCompleteHandler(event)" keyDown="acArticulo_keyDownHandler(event)"
																		dataProvider="{ outerDocument.articulos }" matchType="anyPart" selectedItemStyleName="underline" allowMultipleSelection="false"
																		labelField="nombre" labelFunction="codigoNombreLabelFunction" backspaceAction="remove" allowNewValues="false"
																		dropDownWidth="460" dropDownRowCount="10" toolTip="{acArticulo.text}" />
										</s:GridItemEditor>
									</fx:Component>
								</s:itemEditor>
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="left">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.Articulo;
													import biz.fulltime.model.LineaDocumento;

													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}

														var f:Function = function updateLinea(linea:LineaDocumento):void {
																try {
																	var hasCliente:Boolean = linea.documento.cliente != null; // Es venta
																	var hasProveedor:Boolean = linea.documento.proveedor != null; // Es compra

																	if (!linea.hasStock) {
																		setStyle("color", "#000000");
																		setStyle("fontWeight", "normal");
																	} else {
																		setStyle("color", "#100AB6");
																		setStyle("fontWeight", "normal");
																	}
																	if (hasProveedor) {
																		if (!data.articulo.activo) { //
																			setStyle("color", "#ff0000");
																			setStyle("fontWeight", "normal");
																		}
																	}
																} catch (error:Error) {
																}

															}

														var linea:LineaDocumento = LineaDocumento(data);
														linea.addEventListener("changeStock", function():void {
																f(linea);
															});
														f(linea);

														var art:String = data.articulo ? data.articulo.codigo : "";
														if (art) {
															label = art;
														}

													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							
							<s:GridColumn dataField="concepto" resizable="false" headerText="CONCEPTO" editable="{hasPermEdition()}">
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="left" verticalCenter="0" percentWidth="100">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;

													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														var f:Function = function updateLinea(linea:LineaDocumento):void {
																try {
																	if (!linea.hasStock) {
																		setStyle("color", "#000000");
																		setStyle("fontWeight", "normal");
																	} else {
																		setStyle("color", "#100AB6");
																		setStyle("fontWeight", "normal");
																	}
																} catch (error:Error) {
																}
															}

														var linea:LineaDocumento = LineaDocumento(data);
														linea.addEventListener("changeStock", function():void {
																f(linea);
															});
														f(linea);

													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>

								<s:itemEditor>
									<fx:Component>
										<s:DefaultGridItemEditor>
											<fx:Script>
												<![CDATA[
													import spark.components.DataGrid;

													override protected function keyDownHandler(event:KeyboardEvent):void {
														if ((value as String).length >= 50) {
															event.preventDefault();
														}
														if (event.keyCode == Keyboard.F1 || event.keyCode == Keyboard.F2) {
															DataGrid(owner).endItemEditorSession();
															DataGrid(owner).dispatchEvent(new Event("_mostrarAntecedentes"));
														}

													}
												]]>
											</fx:Script>
										</s:DefaultGridItemEditor>
									</fx:Component>
								</s:itemEditor>
							</s:GridColumn>
							
							<s:GridColumn width="80" dataField="precio" headerText="P. UNITARIO" editable="{(hasPermEdition() &amp;&amp; !hideDescAfilado) || GeneralOptions.getInstance().loggedUser.esSupervisor()}" itemEditor="biz.fulltime.ui.forms.DGNumberEditor">
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="right">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;

													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														label = outerDocument.nf_Espanol_Espanol.format(LineaDocumento(data).getPrecio());
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>

							<s:GridColumn width="50" dataField="descuento" headerText="DCTO." itemEditor="biz.fulltime.ui.forms.DGNumberEditor" editable="{hasPermEdition() &amp;&amp; !esAfilado()}" >
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="right">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;

													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														if (data.descuento != null) {
															label = LineaDocumento(data).getDescuento().setScale(0, MathContext.ROUND_UP).toString() + "%";
														} else {
															label = '';
														}
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							
							<s:GridColumn width="80" headerText="IMPORTE" editable="false" itemEditor="biz.fulltime.ui.forms.DGNumberEditor">
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="right">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;

													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														var importe:BigDecimal = LineaDocumento(data).getSubTotal();

														label = outerDocument.nf_Espanol_Espanol.format(importe);
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							
							<s:GridColumn width="75" dataField="valorNeto" headerText="NETO" editable="{hasPermEdition()}"
										  visible="{!GeneralOptions.getInstance().loggedUser.usuarioModoDistribuidor &amp;&amp; !esAfilado()} " itemEditor="biz.fulltime.ui.forms.DGNumberEditor">
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="right">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;

													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														label = outerDocument.nf_Espanol_Espanol.format(LineaDocumento(data).valorNeto);
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							<s:GridColumn width="75" dataField="valorNeto" headerText="NETO" editable="false"
										  visible="{esAfilado() &amp;&amp; !hideDescAfilado} " itemEditor="biz.fulltime.ui.forms.DGNumberEditor">
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="right">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;
													
													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														label = outerDocument.nf_Espanol_Espanol.format(LineaDocumento(data).valorNeto);
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							
							<s:GridColumn width="80" dataField="precioDistribuidor" headerText="BASE DIST."
										  visible="{!esAfilado() &amp;&amp; hay_vendedor_dist || GeneralOptions.getInstance().loggedUser.usuarioModoDistribuidor &amp;&amp; !documento.esSolicitudCompra}"
										  editable="{(!documento.emitido || GeneralOptions.getInstance().loggedUser.esSupervisor()) &amp;&amp; !GeneralOptions.getInstance().loggedUser.usuarioModoDistribuidor}"
										  itemEditor="biz.fulltime.ui.forms.DGNumberEditor">

								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="right">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;

													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														label = outerDocument.nf_Espanol_Espanol.format(LineaDocumento(data).getPrecioBaseDistribuidor());
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							
							<s:GridColumn width="75" dataField="costo" headerText="COSTO"
										  visible="{!esAfilado() &amp;&amp; !GeneralOptions.getInstance().loggedUser.usuarioModoDistribuidor &amp;&amp; !documento.esSolicitudCompra}"
										  editable="{(!documento.emitido || GeneralOptions.getInstance().loggedUser.esSupervisor()) 
										  	&amp;&amp; !GeneralOptions.getInstance().loggedUser.usuarioModoDistribuidor &amp;&amp; !GeneralOptions.getInstance().loggedUser.usuarioModoMostrador}"
										  itemEditor="biz.fulltime.ui.forms.DGNumberEditor">
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="right">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.conf.GeneralOptions;
													import biz.fulltime.model.Documento;
													import biz.fulltime.model.LineaDocumento;
													import biz.fulltime.model.Usuario;

													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														if (LineaDocumento(data).documento.esSolicitudCompra) {
															label = outerDocument.nf_Espanol_Espanol.format(BigDecimal.ZERO);
														} else {
															var doc:Documento = outerDocument.documento;

															if (!GeneralOptions.getInstance().modoMostrador && (doc.nuevo || doc.permisosDocumentoUsuario.rentaDistribuidor || doc.permisosDocumentoUsuario.rentaReal)) {
																label = outerDocument.nf_Espanol_Espanol.format(LineaDocumento(data).costo);
															} else {
																label = "";
																var largo:int = LineaDocumento(data).costo.toString().length;
																for (var i:Number = 0; i < largo; i++) {
																	label += "*";
																}
															}
														}
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>

							<s:GridColumn width="60" dataField="coeficienteImp" headerText="COEFICIENTE" visible="{documento.comprobante.codigo == '122'}"
										  itemEditor="biz.fulltime.ui.forms.DGNumberEditor">
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="right">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.Documento;
													import biz.fulltime.model.LineaDocumento;

													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														if (!LineaDocumento(data).documento.esSolicitudCompra) {
															label = outerDocument.nf_Espanol_Espanol.format(BigDecimal.ZERO);
														} else {
															var doc:Documento = outerDocument.documento;

															if (LineaDocumento(data).coeficienteImp && LineaDocumento(data).coeficienteImp.length > 0) {
																label = outerDocument.nf_Espanol_Espanol.format(LineaDocumento(data).coeficienteImp);
															} else {
																label = "";
															}
														}
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>

							<s:GridColumn width="60" headerText="%U.DISTRIBUIDOR" editable="false"
										  visible="{!esAfilado() &amp;&amp; hay_vendedor_dist &amp;&amp; !GeneralOptions.getInstance().modoMostrador &amp;&amp; (documento.nuevo || documento.permisosDocumentoUsuario.rentaDistribuidor || documento.permisosDocumentoUsuario.rentaReal) &amp;&amp; !documento.esSolicitudCompra}">
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer color="0x734669" fontStyle="italic" fontWeight="bold" textAlign="right">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;

													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														if (LineaDocumento(data).documento.esSolicitudCompra) {
															label = outerDocument.nf_Espanol_Espanol.format(utility) + "%"
														} else {
															var porcentajeUtilidad:BigDecimal = LineaDocumento(data).getPorcentajeUtilidadDistribuidor();

															var utility:BigDecimal;
															if (porcentajeUtilidad) {
																utility = porcentajeUtilidad.setScale(2, MathContext.ROUND_HALF_UP);
															} else {
																utility = BigDecimal.ZERO;
															}

															label = outerDocument.nf_Espanol_Espanol.format(utility) + "%";
														}

													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>

							<s:GridColumn width="70" headerText="{hay_vendedor_dist  ? '%U.FULLTIME' : '%UTILIDAD'}" editable="false"
										  visible="{!esAfilado() &amp;&amp; !GeneralOptions.getInstance().loggedUser.usuarioModoDistribuidor &amp;&amp; !GeneralOptions.getInstance().modoMostrador &amp;&amp; (documento.nuevo || documento.permisosDocumentoUsuario.rentaDistribuidor || documento.permisosDocumentoUsuario.rentaReal) &amp;&amp; !documento.esSolicitudCompra}">
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer color="0x734669" fontStyle="italic" fontWeight="bold" textAlign="right" verticalCenter="0">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;

													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														if (LineaDocumento(data).documento.esSolicitudCompra) {
															label = outerDocument.nf_Espanol_Espanol.format(utility) + "%"
														} else {
															var porcentajeUtilidad:BigDecimal = outerDocument.hay_vendedor_dist ? LineaDocumento(data).getPorcentajeUtilidadFulltime() : LineaDocumento(data).getPorcentajeUtilidad();

															var utility:BigDecimal;
															if (porcentajeUtilidad) {
																utility = porcentajeUtilidad.setScale(2, MathContext.ROUND_HALF_UP);
															} else {
																utility = BigDecimal.ZERO;
															}
															label = outerDocument.nf_Espanol_Espanol.format(utility) + "%";
														}

													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>

							<s:GridColumn width="110" headerText="AFILADOR" rendererIsEditable="true" visible="{esAfilado()}">
								<s:itemRenderer>
									<fx:Component>
										<s:GridItemRenderer>
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;

													import mx.collections.ArrayCollection;

													import spark.events.IndexChangeEvent;

													[Bindable]
													public var afiladores:ArrayCollection = new ArrayCollection(["Tito", "Pola", "Adrián"]);

													protected function cmbAfiladores_changeHandler(event:IndexChangeEvent):void {
														var afilador:String = afiladores[event.newIndex];

														LineaDocumento(data).afilador = afilador;
													}
												]]>
											</fx:Script>

											<s:VGroup width="100%" height="100%" horizontalAlign="center" paddingLeft="3" verticalAlign="middle">
												<s:DropDownList id="cmbAfiladores" width="100%" height="100%" change="cmbAfiladores_changeHandler(event)" borderVisible="false"
																dataProvider="{afiladores}" prompt="Seleccionar afilador" selectedItem="{LineaDocumento(data).afilador}" />

											</s:VGroup>
										</s:GridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>

							<s:GridColumn width="90" dataField="marca" headerText="MARCA" visible="{esAfilado()}" />

							<s:GridColumn width="40" dataField="linDto1" headerText="FIDELIDAD" visible="{esAfilado() &amp;&amp; !hideDescAfilado}" itemEditor="biz.fulltime.ui.forms.DGNumberEditorInt"
										  editable="{documento.comprobante.codigo != '81' &amp;&amp; documento.comprobante.codigo != '82'}">
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="right">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;

													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														label = LineaDocumento(data).getDcto1().setScale(0, MathContext.ROUND_UP).toString() + "%";
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>

							<s:GridColumn width="40" dataField="linDto2" headerText="VOLUMEN" visible="{esAfilado() &amp;&amp; !hideDescAfilado}" itemEditor="biz.fulltime.ui.forms.DGNumberEditorInt"
										  >
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="right">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;

													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														label = LineaDocumento(data).getDcto2().setScale(0, MathContext.ROUND_UP).toString() + "%";
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>

							<s:GridColumn width="40" dataField="linDto3" headerText="ESTADO" visible="{esAfilado() &amp;&amp; !hideDescAfilado}" itemEditor="biz.fulltime.ui.forms.DGNumberEditorInt"
										  editable="{documento.comprobante.codigo != '81' &amp;&amp; documento.comprobante.codigo != '82'}">
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="right">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;

													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														label = LineaDocumento(data).getDcto3().setScale(0, MathContext.ROUND_UP).toString() + "%";
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer> 
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>

							<s:GridColumn width="40" dataField="linDto4" headerText="ENTREGA" visible="{esAfilado() &amp;&amp; !hideDescAfilado }" itemEditor="biz.fulltime.ui.forms.DGNumberEditorInt"
										  editable="{documento.comprobante.codigo != '81' &amp;&amp; documento.comprobante.codigo != '82'}">
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="right">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;

													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														label = LineaDocumento(data).getDcto4().setScale(0, MathContext.ROUND_UP).toString() + "%";
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>

							<s:GridColumn width="60" dataField="diametro" headerText="D/CMTS" visible="{esAfilado()}" itemEditor="biz.fulltime.ui.forms.DGNumberEditorInt">
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="right">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;

													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														label = outerDocument.nf_Espanol_Espanol_2.format(LineaDocumento(data).diametro);
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							
							<s:GridColumn width="60" dataField="rotos" headerText="ROTOS" visible="{esAfilado()}" itemEditor="biz.fulltime.ui.forms.DGNumberEditorInt">
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="right">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;

													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														label = outerDocument.nf_Espanol_Espanol_2.format(LineaDocumento(data).rotos);
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							
							<s:GridColumn width="60" dataField="cascados" headerText="CASCADOS" visible="{esAfilado()}" itemEditor="biz.fulltime.ui.forms.DGNumberEditorInt">
								<s:itemRenderer>
									<fx:Component>
										<s:DefaultGridItemRenderer textAlign="right">
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;

													override public function prepare(hasBeenRecycled:Boolean):void {
														if (!data) {
															return;
														}
														label = outerDocument.nf_Espanol_Espanol_2.format(LineaDocumento(data).cascados);
													}
												]]>
											</fx:Script>
										</s:DefaultGridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>

							<s:GridColumn width="34" headerText="" rendererIsEditable="true" visible="{!documento.emitido || GeneralOptions.getInstance().loggedUser.esSupervisor() }">
								<s:itemRenderer>
									<fx:Component>
										<s:GridItemRenderer>
											<fx:Script>
												<![CDATA[
													import mx.controls.Alert;
													import mx.events.CloseEvent;

													protected function cmdRemove_clickHandler(event:MouseEvent):void {
														Alert.show("¿Esta usted seguro?", "Borrar Línea de Venta", Alert.YES + Alert.NO, null, myCloseHandler);
													}

													private function myCloseHandler(event:CloseEvent):void {
														if (event.detail == Alert.YES) {
															this.outerDocument.borrarLineaVenta();
														}
													}
												]]>
											</fx:Script>

											<s:VGroup width="100%" height="100%" horizontalAlign="center" paddingLeft="2" verticalAlign="middle" creationComplete="cmdRemove.setFocus()">
												<s:Button id="cmdRemove" width="100%" height="100%" icon="@Embed('/assets/general/trash.png')" click="cmdRemove_clickHandler(event)"
														  focusEnabled="false" />
											</s:VGroup>
										</s:GridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
							
							<s:GridColumn width="34" headerText="" rendererIsEditable="true" visible="{!documento.emitido || GeneralOptions.getInstance().loggedUser.esSupervisor() }">
								<s:itemRenderer>
									<fx:Component>
										<s:GridItemRenderer>
											<fx:Script>
												<![CDATA[
													import biz.fulltime.model.LineaDocumento;

													protected function cmdNotas_clickHandler(event:MouseEvent):void {
														this.outerDocument.editarNotas(LineaDocumento(data));
													}
												]]>
											</fx:Script>

											<s:VGroup width="100%" height="100%" horizontalAlign="center" paddingLeft="2" verticalAlign="middle">
												<s:Button id="cmdNotas" width="100%" height="100%" icon="@Embed('/assets/general/notes.png')" click="cmdNotas_clickHandler(event)" focusEnabled="false" />
											</s:VGroup>
										</s:GridItemRenderer>
									</fx:Component>
								</s:itemRenderer>
							</s:GridColumn>
						</s:ArrayList>
					</s:columns>
				</s:DataGrid>
			</s:HGroup>

			<s:Group height="45">
				<s:Rect bottom="5" left="5" right="5" top="5">
					<s:fill>
						<s:SolidColor color="{currentLine.hasStock ? 0x00ff00 : 0xff9999}" alpha=".1" />
					</s:fill>
					<s:stroke>
						<s:SolidColorStroke id="borderStroke" color="{currentLine.hasStock ? 0x666666 : 0x662222}" weight="1" />
					</s:stroke>
				</s:Rect>
				<s:HGroup height="100%" horizontalAlign="left" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" verticalAlign="middle" gap="6">
					<s:Label text="STOCK:" visible="{currentLine.stockValue.length > 0}" includeInLayout="{currentLine.stockValue.length > 0}" />
					<s:Label text="Sin control de stock." visible="{currentLine.stockValue.length == 0}" includeInLayout="{currentLine.stockValue.length == 0}" />
					<s:Label id="txtStock" text="{nf_Espanol_Espanol.format(currentLine.stockValue)}" visible="{currentLine.stockValue.length > 0}"
							 includeInLayout="{currentLine.stockValue.length > 0}" />
					<s:Label text="unidades." visible="{currentLine.stockValue.length > 0}" includeInLayout="{currentLine.stockValue.length > 0}" />

					<s:HGroup visible="{!documento.esCompra()}" includeInLayout="{!documento.esCompra()}">
						<s:Label text="Faltan" visible="{!currentLine.hasStock}" includeInLayout="{!currentLine.hasStock}" />
						<s:Label text="{currentLine.getStockFaltante()}" visible="{!currentLine.hasStock}" includeInLayout="{!currentLine.hasStock}" />
						<s:Label text="unidades." visible="{!currentLine.hasStock}" includeInLayout="{!currentLine.hasStock}" />
					</s:HGroup>
				</s:HGroup>
			</s:Group>
		</s:VGroup>

		<s:controlBarContent>
			<s:HGroup width="100%" horizontalAlign="right" paddingBottom="0" paddingTop="0">
				<mx:Image id="loader1" source="@Embed(source='assets/general/logo_oscuro.gif')" alpha=".5" scaleX=".25" scaleY=".25" />
				<s:Spacer width="100%" />
				<s:Button id="cmdAceptar" click="cmdAceptar_clickHandler(event)" label="Aceptar" styleName="aceptarButton" />
			</s:HGroup>
		</s:controlBarContent>
	</s:Panel>

</s:HGroup>
