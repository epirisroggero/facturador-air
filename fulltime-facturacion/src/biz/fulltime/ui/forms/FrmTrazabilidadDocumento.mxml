<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:components="components.*" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:s="library://ns.adobe.com/flex/spark"
		  width="100%" height="100%" creationComplete="creationCompleteHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import biz.fulltime.conf.ServerConfig;
			import biz.fulltime.dto.DocumentoDTO;
			import biz.fulltime.model.Documento;
			import biz.fulltime.model.Usuario;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.formatters.DateFormatter;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			import mx.utils.ObjectUtil;
			
			import spark.components.gridClasses.CellPosition;
			
			import util.CatalogoFactory;
			
			private var remObj:RemoteObject;
			
			private var _documento:Documento;
			
			private var _documentos:ArrayCollection = new ArrayCollection();
			
			private var _changeDocumentos:Boolean = false;
			
			
			override protected function commitProperties():void {
				super.commitProperties();
				
				if (_changeDocumentos) {
					callLater(function():void {
						dgTrazabilidad.setFocus();
						if (dgTrazabilidad.dataProviderLength > 0) {
							dgTrazabilidad.selectedIndex = 0;
						}
					});
					_changeDocumentos = false;
				}				
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				remObj = new RemoteObject();
				remObj.destination = "CreatingRpc";
				remObj.channelSet = ServerConfig.getInstance().channelSet;
				remObj.showBusyCursor = true;
				remObj.addEventListener(ResultEvent.RESULT, onResult);
				remObj.addEventListener(FaultEvent.FAULT, onFault);
				
				callLater(function():void {
					dgTrazabilidad.setFocus();
				});
				
			}
			
			[Bindable]
			public function get documentos():ArrayCollection {
				return _documentos;
			}
			
			public function set documentos(value:ArrayCollection):void {
				_documentos = value;
				_changeDocumentos = true;
				invalidateProperties();
			}
			
			public function get documento():Documento {
				return _documento;
			}
			
			private function onResult(event:ResultEvent):void {
				var doc:Documento = event.result as Documento;
				_documento = doc;
				
				dispatchEvent(new Event("_openDocument"));
			}
			
			private function onFault(event:FaultEvent):void {
				Alert.show(event.fault.faultString, 'Error');
				_documento = null;
				
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}
			
			protected function cmdAceptar_clickHandler(event:MouseEvent):void {
				obtenerFactura();
			}
			
			public function obtenerFactura():void {
				if (dgTrazabilidad.selectedItem != null) {
					var _doc:DocumentoDTO = DocumentoDTO(dgTrazabilidad.selectedItem);
					remObj.getDocumento(_doc.docId);
				}
			}
			
			public function abrirFactura(doc:DocumentoDTO):void {
				remObj.getDocumento(doc.docId);
			}

			
			protected function dgTrazabilidad_keyDownHandler(event:KeyboardEvent):void {
				var cellPos:CellPosition = dgTrazabilidad.selectedCell;
				
				if (event.keyCode == Keyboard.ESCAPE) { // Se presiono la tecla 'ESC'
					_documento = null;
					dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
				} else if (event.keyCode == Keyboard.ENTER) {
					obtenerFactura();
				} 
			}
			
			protected function cmdCancelar_clickHandler(event:MouseEvent):void {
				_documento = null;
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}
			
			protected function dgTrazabilidad_doubleClickHandler(event:MouseEvent):void {
				obtenerFactura();				
			}
			
			private function date_labelFunction(item:Object, column:GridColumn):String {
				var dateFormatter:DateFormatter = new DateFormatter();
				dateFormatter.formatString = "DD-MM-YYYY";
				return dateFormatter.format(item.fecha);
			}
			
			private function cliente_labelFunction(item:Object, column:GridColumn):String {
				return item.cliente.codigo + " - " + item.cliente.nombre;
			}
			
			private function moneda_labelFunction(item:Object, column:GridColumn):String {
				return item.moneda.codigo + " - " + item.moneda.nombre;
			}
			
			private function comprobante_labelFunction(item:Object, column:GridColumn):String {
				return item.comprobante.nombre;
			}
			
			private function comprobante_cod_labelFunction(item:Object, column:GridColumn):String {
				return String(item.comprobante.nombre).toUpperCase();
			}

			private function serieNro_labelFunction(item:Object, column:GridColumn):String {
				return String(item.serie ? item.serie : "").toUpperCase() + String(item.numero ? item.numero : "");
			}
			
			private function usuario_labelFunction(item:Object, column:GridColumn):String {
				var codigo:String = item.usuarioId;
				for each(var user:Usuario in CatalogoFactory.getInstance().usuarios) {
					if (user.codigo == codigo) {
						return user.nombre;
					}					
				}
				return "";
			}
			
			private function autorizadoPor_labelFunction(item:Object, column:GridColumn):String {
				var codigo:String = item.autorizadoPor;
				for each(var user:Usuario in CatalogoFactory.getInstance().usuarios) {
					if (user.codigo == codigo) {
						return user.nombre;
					}					
				}
				return "";
			}
			
			private function emitidoPor_labelFunction(item:Object, column:GridColumn):String {
				var codigo:String = item.emitidoPor;
				for each(var user:Usuario in CatalogoFactory.getInstance().usuarios) {
					if (user.codigo == codigo) {
						return user.nombre;
					}					
				}
				return "";
			}

			private function comprobante_sortCompareFunc(itemA:Object, itemB:Object, gc:GridColumn):int {
				var comprobanteA:String = itemA.comprobante ? itemA.comprobante.codigo : "";
				var comprobanteB:String = itemB.comprobante ? itemB.comprobante.codigo : "";
				
				return ObjectUtil.numericCompare(Number(comprobanteA), Number(comprobanteB));
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:ArrayList id="cols">
			<s:GridColumn width="90" dataField="serie" headerText="Serie/NÃºmero" labelFunction="serieNro_labelFunction"/>
			<s:GridColumn dataField="comprobante" headerText="Comprobante" labelFunction="comprobante_cod_labelFunction" sortCompareFunction="comprobante_sortCompareFunc"/>
			<s:GridColumn width="140" dataField="usuarioId" headerText="Realizado por" labelFunction="usuario_labelFunction"/>
			<s:GridColumn width="140" dataField="autorizadoPor" headerText="Autorizado por" labelFunction="autorizadoPor_labelFunction"/>
			<s:GridColumn width="140" dataField="emitidoPor" headerText="Emitido por" labelFunction="emitidoPor_labelFunction"/>
			<s:GridColumn width="90" dataField="registroFecha" headerText="Fecha Reg." />
			<s:GridColumn width="90" dataField="registroHora" headerText="Hora Reg." />
			<s:GridColumn width="34" headerText="" rendererIsEditable="true">
				<s:itemRenderer>
					<fx:Component>
						<s:GridItemRenderer>
							<fx:Script>
								<![CDATA[
									import biz.fulltime.dto.DocumentoDTO;
									
									protected function cmdOpenDocumento_clickHandler(event:MouseEvent):void {
										this.outerDocument.abrirFactura(DocumentoDTO(data));
									}
								]]>
							</fx:Script>
							
							<s:VGroup width="100%" height="100%" horizontalAlign="center" paddingLeft="2" verticalAlign="middle">
								<s:Button id="cmdOpenDocumento" width="100%" height="100%" icon="@Embed('/assets/general/Open.png')" click="cmdOpenDocumento_clickHandler(event)" focusEnabled="false"/>
							</s:VGroup>
						</s:GridItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>

		</s:ArrayList>
	</fx:Declarations>
	
	<s:Panel width="100%" height="100%" styleName="pntLineasVenta">
		<s:DataGrid id="dgTrazabilidad" width="100%" height="100%" doubleClick="dgTrazabilidad_doubleClickHandler(event)" keyUp="dgTrazabilidad_keyDownHandler(event)"
					columns="{cols}" doubleClickEnabled="true" focusEnabled="true" dataProvider="{documentos}" fontWeight="bold">
		</s:DataGrid>
		<s:controlBarContent>
			<s:HGroup width="100%" horizontalAlign="right" paddingBottom="0" paddingTop="0">
				<components:IconButton id="cmdAceptar" click="cmdAceptar_clickHandler(event)" label="Aceptar" styleName="aceptarButton" />
				<components:IconButton id="cmdCancelar" click="cmdCancelar_clickHandler(event)" label="Cerrar" styleName="cancelarButton" />
			</s:HGroup>
		</s:controlBarContent>
	</s:Panel>
	
</s:VGroup>
