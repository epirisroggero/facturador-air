<?xml version="1.0" encoding="utf-8"?>
<components2:PanelShowHide xmlns:components="com.hillelcoren.components.*" xmlns:components1="biz.fulltime.ui.components.*" xmlns:components2="components.*"
						   xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:renderers="biz.fulltime.ui.renderers.*"
						   xmlns:s="library://ns.adobe.com/flex/spark" creationComplete="creationCompleteHandler(event)"
						   backgroundAlpha=".98" backgroundColor="0xfafafa" title="Filtrar por">
	
	<fx:Script>
		<![CDATA[
			import biz.fulltime.dto.DocumentoQuery;
			import biz.fulltime.event.FilterEvent;
			import biz.fulltime.model.Comprobante;
			import biz.fulltime.model.Proveedor;
			
			import com.hillelcoren.components.AutoComplete;
			import com.hillelcoren.utils.StringUtils;
			
			import mx.collections.ArrayCollection;
			
			import mx.events.FlexEvent;
			
			import spark.components.TitleWindow;
			
			import util.CatalogoFactory;
			
			private var helpWindow:TitleWindow;
			
			private var _docQuery:DocumentoQuery;
			
			private var comprobantes:ArrayCollection = new ArrayCollection(["110","111","112","113","114","115","116","212","213","214","215"]); 

			
			public function get docQuery():DocumentoQuery {
				return _docQuery;
			}
			
			public function set docQuery(value:DocumentoQuery):void {
				_docQuery = value;
			}
			
			protected function cmdFilter_clickHandler(event:MouseEvent):void {
				var serie:String = txtSerie.text;
				var nro:String = txtNumero.text;
				
				var codTipoComp:String = acTipoComprobante.selectedItem != null ? acTipoComprobante.selectedItem.codigo : null;
				var codPrv:String = acProveedor.selectedItem != null ? acProveedor.selectedItem.codigo : null;
				
				var fechaDesde:Date = txtFechaDesde.selectedDate;
				var fechaHasta:Date = txtFechaHasta.selectedDate;
				
				_docQuery = new DocumentoQuery();
								
				if (serie && serie != "") {
					_docQuery.serie = serie;
				} else {
					_docQuery.serie = null;
				}
				if (nro && nro != "") {
					_docQuery.numero = nro;
				} else {
					_docQuery.numero = null;
				}
				
				_docQuery.comprobantes = acTipoComprobante.selectedItem != null ? acTipoComprobante.selectedItem.codigo : null;
				_docQuery.proveedor = null;
				
				if (codPrv && codPrv != "") {
					_docQuery.proveedor = codPrv;
				}
				
				_docQuery.pendiente = chbPendientes ? chbPendientes.selected : false;
				
				_docQuery.fechaDesde = fechaDesde;
				_docQuery.fechaHasta = fechaHasta;

				dispatchEvent(new FilterEvent(FilterEvent.FILTRAR_DOCUMENTOS_GASTO, false, false, _docQuery));
			}
			
			protected function cmdLimpiar_clickHandler(event:MouseEvent):void {
				txtFechaDesde.data = null;
				txtFechaHasta.data = null;
				
				txtNumero.text = "";
				txtSerie.text = "";
				
				acProveedor.clear();
				acTipoComprobante.clear();
				
				var _docQuery1:DocumentoQuery = new DocumentoQuery();
				
				var evtFilter:FilterEvent = new FilterEvent(FilterEvent.BORRAR_FILTROS);
				evtFilter.docQuery = _docQuery1;
				dispatchEvent(evtFilter);
			}
			
			public function dropDownLabelFunction(item:Object):String {
				var string:String = item.nombre + " &lt;" + item.codigo + "&gt;";
				var searchStr:String = acTipoComprobante.searchText;
				
				var returnStr:String = StringUtils.highlightMatch(string, searchStr);
				
				if (acTipoComprobante.selectedItems.getItemIndex(item) >= 0) {
					returnStr = "<font color='" + Consts.COLOR_TEXT_DISABLED + "'>" + returnStr + "</font>";
				}
				
				return returnStr;
			}
			
			public function codigoNombreLabelFunction(item:Object):String {
				var lblCliente:String;
				
				if (item != null && item.hasOwnProperty("codigo")) {
					lblCliente = item.codigo;
				}
				if (item != null && item.hasOwnProperty("nombre")) {
					lblCliente += " - " + item.nombre;
				}
				return lblCliente;
			}
			
			
			public function proveedorLabelFunction(item:Object):String {
				var proveedor:Proveedor = item as Proveedor;
				
				var label:String;
				if (item && item.hasOwnProperty("codigo")) {
					label = item.codigo;
				}
				if (item && item.hasOwnProperty("nombre")) {
					label += " - " + item.nombre;
				}
				if (proveedor.contacto.ctoRSocial != proveedor.contacto.nombre) {
					label += " [" + proveedor.contacto.ctoRSocial + "] ";
				}
				
				return label;
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				var result:ArrayCollection = new ArrayCollection();
				for each (var i:Comprobante in CatalogoFactory.getInstance().comprobantes) {					
					if (comprobantes.contains(i.codigo)) {
						result.addItem(i);
					}
				}
				acTipoComprobante.dataProvider = result;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<fx:Component id="dropDownItemRenderer">
			<renderers:CodigoNombreItemRenderer selectedItems="{ outerDocument.acTipoComprobante.selectedItems }" />
		</fx:Component>
	</fx:Declarations>
	
	
	<s:VGroup width="100%" height="100%">
		<s:HGroup height="100%" paddingBottom="0">
			<mx:Form>
				<mx:FormItem label="Serie" fontSize="13" fontWeight="normal">
					<mx:TextInput id="txtSerie" width="90" enter="txtNumero.setFocus()" />
				</mx:FormItem>
				<mx:FormItem label="NÃºmero" fontSize="13" fontWeight="normal">
					<s:TextInput id="txtNumero" width="90" restrict="0-9" enter="acTipoComprobante.setFocus()" />
				</mx:FormItem>
			</mx:Form>
			<mx:Form>
				<mx:FormItem label="Comprobante" fontSize="13" fontWeight="normal">
					<components1:MyAutoComplete id="acTipoComprobante" width="260" labelField="nombre"
												matchType="anyPart" prompt="Filtrar por Comprobante" allowNewValues="false" selectedItemStyleName="{ AutoComplete.STYLE_MAC_MAIL }"
												allowDuplicates="false" allowMultipleSelection="false" allowEditingNewValues="false"
												dropDownItemRenderer="{ dropDownItemRenderer }" labelFunction="codigoNombreLabelFunction" 
												backspaceAction="focus" />
				</mx:FormItem>
				<mx:FormItem label="Proveedor" fontSize="13" fontWeight="normal">
					<components1:MyAutoComplete id="acProveedor" width="260" 
												labelField="nombre" matchType="anyPart" prompt="Filtrar por Proveedor" allowNewValues="false"
												selectedItemStyleName="{ AutoComplete.STYLE_MAC_MAIL }" allowDuplicates="false" allowMultipleSelection="false"
												allowEditingNewValues="false" dropDownItemRenderer="{ dropDownItemRenderer }" labelFunction="proveedorLabelFunction"
												backspaceAction="focus" dataProvider="{CatalogoFactory.getInstance().proveedores}"/>
				</mx:FormItem>
				
			</mx:Form>
			<mx:Form>
				<mx:FormItem label="Fecha desde" fontSize="13" fontWeight="normal">
					<mx:DateField id="txtFechaDesde" width="110" yearNavigationEnabled="true" focusEnabled="true" formatString="DD/MM/YYYY" locale="es" fontFamily="Helvetica"/>
				</mx:FormItem>
				<mx:FormItem label="Fecha hasta" fontSize="13" fontWeight="normal">
					<mx:DateField id="txtFechaHasta" width="110" yearNavigationEnabled="true" focusEnabled="true" formatString="DD/MM/YYYY" locale="es" fontFamily="Helvetica"/>
				</mx:FormItem>
			</mx:Form> 
			<s:VGroup paddingTop="15" paddingLeft="15">
				<s:CheckBox id="chbPendientes" fontWeight="normal" label="Solo pendientes" selected="false"/>
			</s:VGroup>

		</s:HGroup>
	</s:VGroup>
	<components2:controlBarContent>
		<s:HGroup width="100%" horizontalAlign="right" paddingBottom="0" paddingTop="0">
			<mx:Image id="loader1" source="@Embed(source='assets/general/logo_oscuro.gif')" alpha=".5" scaleX=".25" scaleY=".25" />
			<s:Spacer width="100%" />
			<s:Button id="cmdFiltrar" click="cmdFilter_clickHandler(event)" label="Filtrar" enabled="true" toolTip="Filtrar gastos" styleName="filtrarButton" />
			<s:Button id="cmdLimpiar" click="cmdLimpiar_clickHandler(event)" label="Limpiar" toolTip="Limpiar Todos los Campos" styleName="clearButton16" />
		</s:HGroup>
	</components2:controlBarContent>
</components2:PanelShowHide>
