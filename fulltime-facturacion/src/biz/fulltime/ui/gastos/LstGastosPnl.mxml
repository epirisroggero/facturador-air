<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:components="components.*" xmlns:facturacion="biz.fulltime.ui.facturacion.*" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  width="100%" height="100%" preinitialize="init()" creationComplete="vgroup1_creationCompleteHandler(event)" xmlns:gastos="biz.fulltime.ui.gastos.*">
	
	<fx:Script>
		<![CDATA[
			import biz.fulltime.conf.ServerConfig;
			import biz.fulltime.dto.CreditoInfo;
			import biz.fulltime.dto.DocumentoDTO;
			import biz.fulltime.dto.DocumentoQuery;
			import biz.fulltime.event.FilterEvent;
			import biz.fulltime.model.Cliente;
			import biz.fulltime.model.Comprobante;
			import biz.fulltime.model.Documento;
			import biz.fulltime.model.Moneda;
			import biz.fulltime.model.Proveedor;
			import biz.fulltime.model.deudores.DocPendientesCliente;
			import biz.fulltime.ui.deudores.ListadoDeudoresCliente;
			
			import com.adobe.utils.StringUtil;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.CursorManager;
			import mx.managers.ISystemManager;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			
			import spark.components.TitleWindow;
			
			import util.CatalogoFactory;
			
			private static const DOCUMENTOS_POR_PAGINA:int = 20;
						
			[Bindable]
			private var gastos:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var _gasto:Documento;
			
			[Bindable]
			private var _pages:int = 0;
			
			[Bindable]
			private var _current:int = 1;
			
			private var _query:DocumentoQuery;
			
			private var remObj:RemoteObject;
			
			private var remObjQuery:RemoteObject;
			
			private var remObjCount:RemoteObject;
			
			private var _cargarGastos:Boolean = false;

			private var comprobantes:ArrayCollection = new ArrayCollection(["110","111","112","113","114","115","116","212","213","214","215"]); 
			
			protected function vgroup1_creationCompleteHandler(event:FlexEvent):void {
				_cargarGastos = true; 				
				invalidateProperties();
			}
			
			public function init():void {
				remObj = new RemoteObject();
				remObj.destination = "CreatingRpc";
				remObj.channelSet = ServerConfig.getInstance().channelSet;
				remObj.showBusyCursor = true;
				remObj.addEventListener(ResultEvent.RESULT, result);
				remObj.addEventListener(FaultEvent.FAULT, onFault);
				
				remObjQuery = new RemoteObject();
				remObjQuery.destination = "CreatingRpc";
				remObjQuery.showBusyCursor = true;
				remObjQuery.channelSet = ServerConfig.getInstance().channelSet;
				remObjQuery.addEventListener(ResultEvent.RESULT, resultQuery);
				remObjQuery.addEventListener(FaultEvent.FAULT, onFault);
				
				remObjCount = new RemoteObject();
				remObjCount.destination = "CreatingRpc";
				remObjCount.showBusyCursor = true;
				remObjCount.channelSet = ServerConfig.getInstance().channelSet;
				remObjCount.addEventListener(ResultEvent.RESULT, resultCount);
				remObjCount.addEventListener(FaultEvent.FAULT, onFault);
			}
			
			private function closeHandler(event:Event):void {
				event.target.removeEventListener("close", closeHandler);
				PopUpManager.removePopUp(event.target as IFlexDisplayObject);
			}
			
			protected function cmdCancel_clickHandler(event:MouseEvent):void {
				dispatchEvent(new Event("_close_gasto"));
			}
			
			protected function dgGastos_doubleClickHandler(event:MouseEvent):void {
				cargarFactura();
			}
			
			protected function pnlGasto_creationCompleteHandler(event:FlexEvent):void {
				pnlGasto.addEventListener("_cancel_gasto", cancel);
				pnlGasto.addEventListener("_nuevo_gasto", nuevoDocumento);
				
				pnlGasto.addEventListener("_save_gasto", nuevoDocumento);
			}
			
			private function cancel(evt:Event):void {
				viewStack.selectedIndex = 0;
			}
			
			private function nuevoDocumento(evt:Event):void {
				var oldComprobante:Comprobante = _gasto.comprobante;

				_gasto = Documento.getNuevoDocumento(oldComprobante);
				
				callLater(function():void {
					// Seleccionar la vista con la factura
					viewStack.selectedIndex = 2;
				});
				
			}			
			
			protected function cmdNueva_clickHandler(event:MouseEvent):void {
				// Crear una nueva factura
				viewStack.selectedIndex = 1;
								
				callLater(function():void {
					tipoGasto.reset();
				});
				
			}
			
			protected function cmdEditar_clickHandler(event:MouseEvent):void {
				cargarFactura();
			}
			
			/**
			 *  Al dar enter hacer lo mismo que al precionar el boton editar
			 */
			protected function dgGastos_keyDownHandler(event:KeyboardEvent):void {
				// Editar una factura existente
				if (event.keyCode == Keyboard.ENTER) {
					cargarFactura();
				} else if (event.keyCode == Keyboard.TAB) {
					event.preventDefault();
					cmdNueva.setFocus();
				}
			}
			
			public function abrirDocumento(docId:String):void {
				remObj.getDocumento(docId);
			}
			
			private function cargarFactura():void {				
				if (dgGastos.selectedItem != null) {
					var _doc:DocumentoDTO = DocumentoDTO(dgGastos.selectedItem);
					remObj.getDocumento(_doc.docId);
				}
			}
									
			protected function tipoGasto_creationCompleteHandler(event:FlexEvent):void {
				tipoGasto.addEventListener("next_step_", function():void {
					var selectFacturaPnl:TipoFacturaPnl = event.target as TipoFacturaPnl;
					
					_gasto = Documento.getNuevoDocumento(Comprobante(selectFacturaPnl.tipoFactura));
					
					callLater(function():void {
						// Seleccionar la vista con la factura
						viewStack.selectedIndex = 2;
					});
				});
				
				tipoGasto.addEventListener("previous_step_", function():void {
					viewStack.selectedIndex = 0;
				});
				
			}
			
			// Abrir una factura existente...
			private function result(event:ResultEvent):void {
				CursorManager.removeBusyCursor();
				
				_gasto = event.result as Documento;
				
				viewStack.selectedIndex = 2;
			}
						
			private function queryDocumentos():void {
				_query.start = DOCUMENTOS_POR_PAGINA * (_current - 1);
				_query.limit = DOCUMENTOS_POR_PAGINA;
				
				/*
				_query.comprobantes = "110,111,112,113,114,115,116,212,213,214,215";
				_query.esGasto = true;
				_query.pendiente = false;
				*/	
				
				remObjQuery.queryDocumentos(_query);
			}
			
			private function resultQuery(event:ResultEvent):void {
				gastos = event.result as ArrayCollection;
				
				if (!dgGastos) {
					return;
				}
				
				callLater(function():void {
					if (dgGastos.dataProvider.length > 0) {
						dgGastos.setFocus();
						dgGastos.selectedIndex = 0;
					}
				});
				
			}
			
			private function countDocumentos():void {
				_query.start = 0;
				_query.limit = DOCUMENTOS_POR_PAGINA;
				
				/*
				_query.comprobantes = "110,111,112,113,114,115,116,212,213,214,215";
				_query.esGasto = true;
				*/
				
				remObjCount.countDocumentos(_query);
			}
			
			private function resultCount(event:ResultEvent):void {
				var count:Number = event.result as Number;
				_pages = count / DOCUMENTOS_POR_PAGINA;
				if (count % DOCUMENTOS_POR_PAGINA != 0) {
					_pages += 1;
				}
			}
			
			private function date_labelFunction(item:Object, column:GridColumn):String {
				var dateFormatter:DateFormatter = new DateFormatter();
				dateFormatter.formatString = "DD-MM-YYYY";
				
				return dateFormatter.format(item.fecha);
			}
			
			private function cliente_labelFunction(item:Object, column:GridColumn):String {
				return item.cliente.nombre;
			}
			
			private function moneda_labelFunction(item:Object, column:GridColumn):String {
				var moneda:String = item.moneda.codigo;
				var simbolo:String = "";
				for each (var m:Moneda in CatalogoFactory.getInstance().monedas) {
					if (m.codigo == moneda) {
						simbolo = m.simbolo;
						break;
					}
				}	
				return simbolo;
			}
			
			private function comprobante_labelFunction(item:Object, column:GridColumn):String {
				return item.comprobante.nombre;
			}
			
			private function comprobante_cod_labelFunction(item:Object, column:GridColumn):String {
				return item.comprobante.codigo + " - " + StringUtil.trim(item.comprobante.nombre ? String(item.comprobante.nombre).toUpperCase() : "");
				
			}
			
			private function cae_labelFunction(item:Object, column:GridColumn):String {
				var cae:String = DocumentoDTO(item).caeNombre;
				return cae ? cae : "";
			}
						
			private function pendiente_labelFunction(item:Object, column:GridColumn):String {
				return item.pendiente ? "SI" : "NO";
			}
			
			public function refrescar():void {
				if (remObjQuery) {
					_current = 1;
					queryDocumentos();
				}
				if (remObjCount) {
					_pages = 0;
					countDocumentos();
				}
			}
			
			protected function onAddedToStageHandler(event:Event):void {
				refrescar();
			}
			
			private function onFault(event:FaultEvent):void {
				Alert.show(event.fault.faultString, 'Error');
			}
			
			protected function pnlFilters_creationCompleteHandler(event:FlexEvent):void {
				pnlFilters.addEventListener(FilterEvent.FILTRAR_DOCUMENTOS_GASTO, filtrarDocumentos);
				pnlFilters.addEventListener(FilterEvent.BORRAR_FILTROS, borrarFiltros);
			}
			
			private function filtrarDocumentos(event:FilterEvent):void {
				_query = event.docQuery as DocumentoQuery;
				
				_query.start = 0;
				_query.limit = DOCUMENTOS_POR_PAGINA;
				_query.esGasto = true;
				
				_current = 1;
				
				remObjCount.countDocumentos(_query);
				remObjQuery.queryDocumentos(_query);
			}
			
			private function borrarFiltros(event:FilterEvent):void {
				_query = event.docQuery as DocumentoQuery;
				if (!_query) {
					_query = new DocumentoQuery();	
					_query.comprobantes = "110,111,112,113,114,115,116,212,213,214,215";

				}				
				_query.start = 0;
				_query.limit = DOCUMENTOS_POR_PAGINA;
				_query.esGasto = true;
				
				_current = 1;
				
				remObjCount.countDocumentos(_query);
				remObjQuery.queryDocumentos(_query);
			}
			
			
			//--------------------------------------------------------------------------
			//
			//  Overridden methods: UIComponent
			//
			//--------------------------------------------------------------------------
			
			override protected function commitProperties():void {
				super.commitProperties();
				
				if (_cargarGastos) {
					_cargarGastos = false;
					
					_query = new DocumentoQuery();
					_query.comprobantes = "110,111,112,113,114,115,116,212,213,214,215";
					_query.esGasto = true;
					_query.pendiente = false;

					queryDocumentos();
					countDocumentos();
				}

			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:ArrayList id="cols">
			<s:GridColumn width="320" dataField="comprobante" headerText="TIPO" labelFunction="comprobante_cod_labelFunction" />
			<s:GridColumn width="90" dataField="numero" headerText="SERIE/NRO.">
				<s:itemRenderer>
					<fx:Component>
						<s:DefaultGridItemRenderer textAlign="right">
							<fx:Script>
								<![CDATA[
									import biz.fulltime.dto.DocumentoDTO;
									override public function prepare(hasBeenRecycled:Boolean):void {
										if (data) {	
											var serie:String = DocumentoDTO(data).serie ? DocumentoDTO(data).serie : null;
											var numero:String = DocumentoDTO(data).numero ? DocumentoDTO(data).numero : "";
											
											if (serie) {
												label = serie + "/" + numero;
											} else {
												label = numero;	
											}											
										}
										
									}
								]]>
							</fx:Script>
							
						</s:DefaultGridItemRenderer>
						
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
			<s:GridColumn width="85" dataField="fecha" headerText="FECHA" />
			<s:GridColumn width="60" dataField="moneda" headerText="MONEDA" labelFunction="moneda_labelFunction" />
			<s:GridColumn width="100" dataField="total" headerText="TOTAL">
				<s:itemRenderer>
					<fx:Component>
						<s:DefaultGridItemRenderer textAlign="right">
							<fx:Script>
								<![CDATA[
									import biz.fulltime.dto.DocumentoDTO;
									
									import util.CatalogoFactory;
									
									override public function prepare(hasBeenRecycled:Boolean):void {
										if (data) {											
											if (DocumentoDTO(data).total) {
												label = outerDocument.nf_Espanol_Espanol.format(DocumentoDTO(data).total);
											} else {
												label = outerDocument.nf_Espanol_Espanol.format(0);
											}
										}
									}
								]]>
							</fx:Script>
						</s:DefaultGridItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
			<s:GridColumn dataField="cliente" headerText="PROVEEDOR" labelFunction="cliente_labelFunction"/>
			<s:GridColumn dataField="razonSocial" headerText="RAZÓN SOCIAL" />
			<s:GridColumn width="75" dataField="pendiente" headerText="PENDIENTE">
				<s:itemRenderer>
					<fx:Component>
						<s:GridItemRenderer clipAndEnableScrolling="true">
							<fx:Script>
								<![CDATA[
									import biz.fulltime.dto.DocumentoDTO;
								]]>
							</fx:Script>
							<s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
								<s:CheckBox id="chbState" selected="{DocumentoDTO(data).pendiente}" enabled="false" alpha="1"/>
							</s:HGroup>
						</s:GridItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>			
		</s:ArrayList>
		
		<s:NumberFormatter id="nf_Espanol_Espanol" locale="es_ES" fractionalDigits="2"/>
		
	</fx:Declarations>
	
	
	<mx:ViewStack id="viewStack" width="100%" height="100%">
		<s:NavigatorContent show="onAddedToStageHandler(event)">
			<s:VGroup width="100%" height="100%" gap="0">
				<gastos:FiltroGastosPnl id="pnlFilters" width="100%" creationComplete="pnlFilters_creationCompleteHandler(event)"/>
				<s:Panel width="100%" height="100%" backgroundAlpha="0.0" title="Listado gastos">
					<s:VGroup width="100%" height="100%">
						<s:DataGrid id="dgGastos" width="100%" height="100%"  doubleClick="dgGastos_doubleClickHandler(event)" keyDown="dgGastos_keyDownHandler(event)"
									dataProvider="{gastos}" sortableColumns="false" columns="{cols}" doubleClickEnabled="true" focusEnabled="true" >
						</s:DataGrid>
						
						<s:HGroup width="100%" horizontalAlign="center" verticalAlign="middle">
							<s:Button id="cmdFirst" width="32" height="24" cornerRadius="6" click="{_current=1; queryDocumentos()}" enabled="{_current&gt;1}"
									  styleName="firstButton" />
							<s:Button id="cmdPrevious" width="32" height="24" cornerRadius="6" click="{_current--; queryDocumentos()}" enabled="{_current&gt;1}"
									  styleName="previousButton" />
							<s:Label width="90" fontSize="16" paddingLeft="5" paddingRight="5" paddingTop="4" textAlign="center" verticalAlign="middle"
									 text="{_current} de {_pages}">
							</s:Label>
							<s:Button id="cmdNext" width="32" height="24" cornerRadius="6" click="{_current++; queryDocumentos()}" enabled="{_current &lt; _pages}"
									  styleName="nextButton" />
							<s:Button id="cmdLast" width="32" height="24" cornerRadius="6" click="{_current = _pages; queryDocumentos()}"
									  enabled="{_current &lt; _pages}" styleName="lastButton" />
						</s:HGroup>
						<s:Spacer height="5" />
						
					</s:VGroup>
					
					<s:controlBarContent>
						<s:HGroup width="100%" horizontalAlign="right" paddingBottom="0" paddingTop="0" verticalAlign="middle">
							<mx:Image id="loader1" source="@Embed(source='assets/general/logo_oscuro.gif')" alpha=".5" scaleX=".25" scaleY=".25" />
							<s:Spacer width="100%" />
							
							<s:Button id="cmdNueva" click="cmdNueva_clickHandler(event)" styleName="nuevaButton" label="Nueva" focusEnabled="true"  toolTip="Crear nuevo gasto"/>
							<s:Button id="cmdEditar" click="cmdEditar_clickHandler(event)" styleName="editarButton" label="Editar" focusEnabled="true" toolTip="Editar gasto seleccionado"/>
						</s:HGroup>
					</s:controlBarContent>
					
				</s:Panel>
			</s:VGroup>
		</s:NavigatorContent>
		
		<s:NavigatorContent>
			<facturacion:TipoFacturaPnl id="tipoGasto" creationComplete="tipoGasto_creationCompleteHandler(event)" modoGasto="true"/>
		</s:NavigatorContent>
		
		<s:NavigatorContent>
			<gastos:GastosPnl id="pnlGasto" creationComplete="pnlGasto_creationCompleteHandler(event)" gasto="{_gasto}"  />
		</s:NavigatorContent>
	</mx:ViewStack>
</s:VGroup>
