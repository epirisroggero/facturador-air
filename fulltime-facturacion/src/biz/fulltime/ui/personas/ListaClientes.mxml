<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:components="biz.fulltime.ui.components.*" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 width="100%" height="100%" xmlns:renderers="biz.fulltime.ui.renderers.*" xmlns:loader="biz.fulltime.util.loader.*">

	<fx:Script>
		<![CDATA[
			import biz.fulltime.conf.GeneralOptions;
			import biz.fulltime.conf.ServerConfig;
			import biz.fulltime.dto.ClienteDTO;
			import biz.fulltime.dto.ClienteQuery;
			import biz.fulltime.event.ClienteEvent;
			import biz.fulltime.model.CategoriasClientes;
			import biz.fulltime.model.Contacto;
			import biz.fulltime.model.Giro;
			import biz.fulltime.model.Usuario;
			import biz.fulltime.model.Vendedor;
			import biz.fulltime.model.Zona;
			
			import com.hillelcoren.components.AutoComplete;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			
			import util.CatalogoFactory;

			[Bindable]
			private var clientes:ArrayCollection = new ArrayCollection();

			[Bindable]
			private var localidades:ArrayCollection = new ArrayCollection();

			private var cliente:ClienteDTO;

			private var _loading:Boolean = false;
			
			private var _first:Boolean = true;
			
			
			[Bindable]
			public function get loading():Boolean {
				return _loading;
			}
			
			public function set loading(value:Boolean):void {
				_loading = value;
			}
			
			private function keyHandler(event:KeyboardEvent):void {
				if (event.keyCode == Keyboard.ENTER) {
					filterElements();
				} else if (filter.text == null || filter.text == "") {
					if (clientes != null) {
						clientes.filterFunction = null;
						clientes.refresh();
					}
				}
			}

			private function filterElements():void {
				if (clientes) {
					if (filter.text == null || filter.text == "") {
						clientes.filterFunction = null;
						clientes.refresh();
					} else {
						clientes.filterFunction = filtrarClientes;
						clientes.refresh();
					}
				}
			}

			private function filtrarClientes(item:Object):Boolean {
				var cliente:ClienteDTO = item as ClienteDTO;
				var _clienteLabel:String = cliente.codigo + ' ' + cliente.nombre + ' ' + cliente.razonSocial;
				return sinAcentos(_clienteLabel).match(new RegExp(sinAcentos(filter.text), 'i')) != null;
			}
			
			private function quitarAcentos(texto:String, letraSplit:String, letraCambio:String):String {
				var letras:Array = texto.split(letraSplit);
				var nuevoTexto:String = new String();
				for (var i:int = 0; i < letras.length; i++) {
					nuevoTexto += letras[i];
					nuevoTexto += letraCambio;
				}
				nuevoTexto = nuevoTexto.substring(0, nuevoTexto.length - 1);
				return nuevoTexto;
			}
			
			private function sinAcentos(textoConAcentos:String):String {
				var texto1:String = textoConAcentos as String;
				texto1 = textoConAcentos.toLowerCase();
				
				var acentos:Array = new Array("á", "é", "í", "ó", "ú");
				var sinAcentos:Array = new Array("a", "e", "i", "o", "u");
				
				for (var i:int = 0; i < acentos.length; i++) {
					texto1 = quitarAcentos(texto1, acentos[i], sinAcentos[i]);
				}
				return texto1;
			}


			protected function resetSearch(event:MouseEvent):void {
				btnCloseSearch.visible = false;
				if (clientes == null) {
					return;
				}
				clientes.filterFunction = null;
				clientes.refresh();

				if (clientes.length > 0) {
					listaClientes.invalidateList();
				}
				filter.text = '';
				filter.setFocus();
			}
			

			public function setNuevoCliente():void {
				CatalogoFactory.getInstance().addEventListener("changeContactos", function(evt:Event):void {
					obtenerPrimeroDisponible();	
				});
				CatalogoFactory.getInstance().loadCatalogo("Contacto");

				/*
				var clienteObj:RemoteObject = new RemoteObject();
				clienteObj.destination = "CreatingRpc";
				clienteObj.channelSet = ServerConfig.getInstance().channelSet;
				clienteObj.addEventListener(ResultEvent.RESULT, function(event:ResultEvent):void {
					var code:Number = new Number(event.result.toString());
					
					var cliente:ClienteDTO = new ClienteDTO();
					cliente.codigo = (code + 1).toString();
					cliente.nombre = "";

					callLater(function():void {
						dispatchEvent(new ClienteEvent(ClienteEvent.CLIENTE_NUEVO, null, cliente));
					});
					
				});
				clienteObj.addEventListener(FaultEvent.FAULT, handleFault);					
				clienteObj.showBusyCursor = true;				
				clienteObj.getLastId();
				*/
				
			}
			
			private function obtenerPrimeroDisponible():void {
				var aux:ArrayCollection = new ArrayCollection();
				for each (var v:Contacto in CatalogoFactory.getInstance().contactos) {
					var o:Number = Number(v.codigo);
					aux.addItem(o);
				}
				var lastId:Number = 1;
				for (lastId; lastId < Number.MAX_VALUE; lastId++) {
					if (!aux.contains(lastId)) {
						break;
					}
				}
				var cliente:ClienteDTO = new ClienteDTO();
				cliente.codigo = lastId.toString();
				cliente.nombre = "";
				
				callLater(function():void {
					dispatchEvent(new ClienteEvent(ClienteEvent.CLIENTE_NUEVO, null, cliente));
				});
			}


			public function removerNuevoCliente():void {
				callLater(function():void {
					var selected:ClienteDTO = listaClientes.selectedItem as ClienteDTO;
					dispatchEvent(new ClienteEvent(ClienteEvent.CLIENTE_SELECCIONADO, null, selected));
				});
			}

			private function showButton(evt:Event):void {
				btnCloseSearch.visible = filter.text.length > 0;
			}

			protected function listaPersonas_creationCompleteHandler(event:FlexEvent):void {
				refrescarClientes();
				listaClientes.addEventListener(ClienteEvent.BORRAR_CLIENTE, borrarCliente);
			}
			
			
			private function borrarCliente(event:ClienteEvent):void {
				cliente = event.clienteDTO;
				
				var clienteRemObj:RemoteObject = new RemoteObject();
				clienteRemObj.destination = "CreatingRpc";
				clienteRemObj.channelSet = ServerConfig.getInstance().channelSet;
				clienteRemObj.addEventListener(ResultEvent.RESULT, function(event:ResultEvent):void {
					var selectedIndex:int = listaClientes.selectedIndex;
					var selected:ClienteDTO = null;

					if (selectedIndex == 0) {
						selected = ArrayCollection(listaClientes.dataProvider).getItemAt(selectedIndex) as ClienteDTO;
					} else {
						selected = ArrayCollection(listaClientes.dataProvider).getItemAt(selectedIndex - 1) as ClienteDTO;
					}
					refrescarClientes(null, selected);
				});
				clienteRemObj.addEventListener(FaultEvent.FAULT, handleFault);					
				clienteRemObj.showBusyCursor = true;
				clienteRemObj.borrarCliente(cliente.codigo);
			}
			
			private function handleFault(event:FaultEvent):void {
				var message:String = event.fault && event.fault.rootCause && event.fault.rootCause.localizedMessage ? event.fault.rootCause.localizedMessage : null;
				if (!message) {
					message = event.message.toString();
				}				
				Alert.show(message, "Error", 4, null, null, StyleManager.getStyleManager(null).getStyleDeclaration('.icons32').getStyle('ErrorIcon'));
			}
			
			public function esVendedorDist():Boolean {
				var user:Usuario = GeneralOptions.getInstance().loggedUser;
				if (user.permisoId == Usuario.USUARIO_VENDEDOR_DISTRIBUIDOR) {
					return true;	
				}
				return false;
			}

			public function esVendedorJunior():Boolean {
				var user:Usuario = GeneralOptions.getInstance().loggedUser;
				if (user.permisoId == Usuario.USUARIO_VENDEDOR_JUNIOR) {
					return true;	
				}
				return false;
			}
			
			public function obtenerLocalidades():void {
				localidades.removeAll();
				for each (var elem:ClienteDTO in clientes) {
					var localidad:String = elem.localidad ? elem.localidad.toLowerCase() : null;
					if (localidad && localidad.length > 0 && !localidades.contains(localidad)) {
						localidades.addItem(localidad);
					}
				}
				
			}


			public function refrescarClientes(event:Event = null, select:ClienteDTO = null):void {
				filter.text = "";
				clientes = new ArrayCollection();
				
				loading = true;

				var clienteRemObj:RemoteObject = new RemoteObject();
				clienteRemObj.destination = "CreatingRpc";
				clienteRemObj.channelSet = ServerConfig.getInstance().channelSet;
				clienteRemObj.addEventListener(ResultEvent.RESULT, function(event:ResultEvent):void {
					clientes = event.result as ArrayCollection;
					listaClientes.dataProvider = sort(clientes, true);
					
					if (_first) {
						obtenerLocalidades();
						_first = false;
					}
					
					loading = false;
					
					if (clientes.length > 0) {
						var index:Number = 0;
						if (select) {
							for each (var cli:ClienteDTO in listaClientes.dataProvider) {
								if (cli.codigo == select.codigo) {
									break;
								}
								index++
							}
						}
						listaClientes.selectedIndex = index;	
						callLater(function():void {
							listaClientes.scrollToIndex(index);
						});
						
						var label:String;
						var clienteDTO:ClienteDTO = ArrayCollection(listaClientes.dataProvider).getItemAt(index) as ClienteDTO;
						dispatchEvent(new ClienteEvent(ClienteEvent.CLIENTE_SELECCIONADO, null, clienteDTO));
					}

				});
				clienteRemObj.addEventListener(FaultEvent.FAULT, handleFault);					
				clienteRemObj.showBusyCursor = true;
				
				var query:ClienteQuery = new ClienteQuery();
				if (cmbVendedor && cmbVendedor.selectedItem) {
					query.vendedor = (cmbVendedor.selectedItem as Vendedor).codigo;	
				} else {
					if (esVendedorDist() || esVendedorJunior()) {
						var user:Usuario = GeneralOptions.getInstance().loggedUser;
						query.vendedor = user.venId ? user.venId : "000";
					} else {
						query.vendedor = null;
					}
				}				
				if (cmbEncargadoCuenta.selectedItem) {
					query.encargadoCuenta = (cmbEncargadoCuenta.selectedItem as Vendedor).codigo;	
				} else {
					query.encargadoCuenta = null;
				}				
				if (cmbEspecialista.selectedItem) {
					query.especialista = (cmbEspecialista.selectedItem as Vendedor).codigo;	
				} else {
					query.especialista = null;
				}				
				if (cmbCategorias.selectedItem) {
					query.categoria = (cmbCategorias.selectedItem as CategoriasClientes).codigo;	
				} else {
					query.categoria = null;
				}				
				if (cmbZona.selectedItem) {
					query.zona = (cmbZona.selectedItem as Zona).codigo;	
				} else {
					query.zona = null;
				}
				if (cmbGiro.selectedItem) {
					query.giro = (cmbGiro.selectedItem as Giro).codigo;	
				} else {
					query.giro = null;
				}
				if (cmbLocalidad.selectedItem) {
					query.localidad = cmbLocalidad.selectedItem as String;	
				} else {
					query.localidad = null;
				}				

				query.activo = chbActivos.selected;
				
				clienteRemObj.queryClientes(query);

				
			}
			
			private function sort(arrColl:ArrayCollection, isNumeric:Boolean = true):ArrayCollection {
				/* Create the SortField object for the "data" field in the ArrayCollection object, and make sure we do a numeric sort. */
				var dataSortField:SortField = new SortField();
				dataSortField.name = "codigo";
				dataSortField.numeric = isNumeric;
				
				/* Create the Sort object and add the SortField object created earlier to the array of fields to sort on. */
				var numericDataSort:Sort = new Sort();
				numericDataSort.fields = [dataSortField];
				
				/* Set the ArrayCollection object's sort property to our custom sort, and refresh the ArrayCollection. */
				arrColl.sort = numericDataSort;
				arrColl.refresh();
				
				return arrColl;
			}


			protected function listaClientes_changeHandler(event:ListEvent):void {
				var clienteDTO:ClienteDTO = listaClientes.selectedItem as ClienteDTO;
				
				dispatchEvent(new ClienteEvent(ClienteEvent.CLIENTE_SELECCIONADO, null, clienteDTO));
			}

			protected function filter_creationCompleteHandler(event:FlexEvent):void {
				filter.addEventListener(KeyboardEvent.KEY_UP, keyHandler);
			}
			
			protected function resetSearchEsp(event:MouseEvent):void {
			}
			
			public function codigoNombreLabelFunction(item:Object):String {
				var label:String;
				if (item && item.hasOwnProperty("codigo")) {
					label = item.codigo;
				}
				if (item && item.hasOwnProperty("nombre")) {
					label += " - " + item.nombre;
				}
				return label;
			}

			public function localidadLabelFunction(item:Object):String {
				return item.toString();
				
			}
				
			public function getPersonas():ArrayCollection {
				var c:ArrayCollection = new ArrayCollection();
				for each (var p:ClienteDTO in listaClientes.dataProvider) {
					c.addItem(p);
				}
				return c;
			}


			protected function cmdFiltrar_clickHandler(event:MouseEvent):void {
				refrescarClientes();
				
			}
			
			protected function cmdLimpiar_clickHandler(event:MouseEvent):void {
				limpiarFiltos();
			}

			public function limpiarFiltos():void {
				cmbCategorias.clear();
				cmbEncargadoCuenta.clear();
				cmbEspecialista.clear();
				if (cmbVendedor) cmbVendedor.clear();
				cmbZona.clear();
				cmbLocalidad.clear();
			}


			protected function cmdExcel_clickHandler(event:MouseEvent):void {
				dispatchEvent(new Event("exportToExcel", true, true));
			}
			
			protected function cmdAgregar_clickHandler(event:MouseEvent):void {
				dispatchEvent(new Event("addNewClient", true, true));
				
			}
			
			protected function btnSearch_clickHandler(event:MouseEvent):void {
				filterElements();
				
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<fx:Component id="dropDownItemRenderer">
			<renderers:CodigoNombreItemRenderer />
		</fx:Component>
		
	</fx:Declarations>
	
	<s:Panel title="Filtros" width="100%" dropShadowVisible="false" >	 	
		<s:layout>
			<s:VerticalLayout paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"/>
		</s:layout>
		<s:HGroup width="100%" visible="{!esVendedorDist() &amp;&amp; !esVendedorJunior()}" includeInLayout="{!esVendedorDist() &amp;&amp; !esVendedorJunior()}">
			<s:VGroup width="100%" paddingBottom="0" paddingLeft="0" paddingRight="0" verticalAlign="middle" gap="0" >
				<s:Label fontSize="12" text="VENDEDOR" width="100%" left="5"/>
				<s:Group width="100%">
					<s:layout>
						<s:HorizontalLayout horizontalAlign="center" paddingBottom="1" paddingLeft="1" paddingRight="1" paddingTop="1" verticalAlign="middle" />
					</s:layout>
					<components:MyAutoComplete id="cmbVendedor" width="100%" textAlign="left"
											   dataProvider="{ CatalogoFactory.getInstance().vendedores }" labelField="nombre" matchType="anyPart" prompt="No Filtrar"
											   allowNewValues="false" selectedItemStyleName="{ AutoComplete.STYLE_MAC_MAIL }" allowDuplicates="false"
											   allowMultipleSelection="false" allowEditingNewValues="false" labelFunction="codigoNombreLabelFunction"
											   backspaceAction="focus" next_focus="{cmbZona}" previous_focus="{filter}" dropShadowVisible="true"
											   dropDownItemRenderer="{ dropDownItemRenderer }" />
				</s:Group>
			</s:VGroup>			
		</s:HGroup>
		
		<s:HGroup width="100%">
			<s:VGroup width="100%" paddingBottom="0" paddingLeft="0" paddingRight="0" verticalAlign="middle" gap="0">
				<s:Label fontSize="12" text="ZONA" width="100%" left="5"/>
				<s:Group width="100%">
					<s:layout>
						<s:HorizontalLayout horizontalAlign="center" paddingBottom="1" paddingLeft="1" paddingRight="1" paddingTop="1" verticalAlign="middle" />
					</s:layout>
					<components:MyAutoComplete id="cmbZona" width="100%" textAlign="left"
											   dataProvider="{ CatalogoFactory.getInstance().zonas }" labelField="nombre" matchType="anyPart" prompt="No Filtrar"
											   allowNewValues="false" selectedItemStyleName="{ AutoComplete.STYLE_MAC_MAIL }" allowDuplicates="false"
											   allowMultipleSelection="false" allowEditingNewValues="false" labelFunction="codigoNombreLabelFunction"
											   backspaceAction="focus" next_focus="{cmbEncargadoCuenta}" previous_focus="{cmbVendedor}"
											   dropDownItemRenderer="{ dropDownItemRenderer }" />
				</s:Group>
			</s:VGroup>			
			<s:VGroup width="100%" paddingBottom="0" paddingLeft="0" paddingRight="0" verticalAlign="middle" gap="0" >
				<s:Label fontSize="12" text="ENC. DE CUENTA" width="100%" left="5"/>
				<s:Group width="100%">
					<s:layout>
						<s:HorizontalLayout horizontalAlign="center" paddingBottom="1" paddingLeft="1" paddingRight="1" paddingTop="1" verticalAlign="middle" />
					</s:layout>
					<components:MyAutoComplete id="cmbEncargadoCuenta" width="100%" textAlign="left"
											   dataProvider="{ CatalogoFactory.getInstance().vendedores }" labelField="nombre" matchType="anyPart" prompt="No Filtrar"
											   allowNewValues="false" selectedItemStyleName="{ AutoComplete.STYLE_MAC_MAIL }" allowDuplicates="false"
											   allowMultipleSelection="false" allowEditingNewValues="false" labelFunction="codigoNombreLabelFunction"
											   backspaceAction="focus" next_focus="{cmbCategorias}" previous_focus="{cmbZona}"
											   dropDownItemRenderer="{ dropDownItemRenderer }"/>
				</s:Group>
			</s:VGroup>			
		</s:HGroup>

		<s:HGroup width="100%">			
			<s:VGroup width="100%" paddingBottom="0" paddingLeft="0" paddingRight="0" verticalAlign="middle" gap="0" >
				<s:Label fontSize="12" text="CATEGORÍA" width="100%" left="5"/>
				<components:MyAutoComplete id="cmbCategorias" width="100%" textAlign="left"
										   dataProvider="{ CatalogoFactory.getInstance().categoriasClientes }" labelField="nombre" matchType="anyPart" prompt="No Filtrar"
										   allowNewValues="false" selectedItemStyleName="{ AutoComplete.STYLE_MAC_MAIL }" allowDuplicates="false"
										   allowMultipleSelection="false" allowEditingNewValues="false" labelFunction="codigoNombreLabelFunction"
										   backspaceAction="focus" next_focus="{cmbEspecialista}" previous_focus="{cmbEncargadoCuenta}"
										   dropDownItemRenderer="{ dropDownItemRenderer }" />
			</s:VGroup>
			<s:VGroup width="100%" paddingBottom="0" paddingLeft="0" paddingRight="0" verticalAlign="middle" gap="0">
				<s:Label id="lblEspecialista" fontSize="12" text="ESPECIALISTA" width="100%" left="5"/>
				<components:MyAutoComplete id="cmbEspecialista" width="100%" textAlign="left"
										   dataProvider="{ CatalogoFactory.getInstance().vendedores }" labelField="nombre" matchType="anyPart" prompt="No Filtrar"
										   allowNewValues="false" selectedItemStyleName="{ AutoComplete.STYLE_MAC_MAIL }" allowDuplicates="false"
										   allowMultipleSelection="false" allowEditingNewValues="false" labelFunction="codigoNombreLabelFunction"
										   backspaceAction="focus" next_focus="{cmdFiltrar}" previous_focus="{cmbCategorias}"
										   dropDownItemRenderer="{ dropDownItemRenderer }" />
			</s:VGroup>
		</s:HGroup>	
		<s:HGroup width="100%">			
			<s:VGroup width="100%" paddingBottom="0" paddingLeft="0" paddingRight="0" verticalAlign="middle" gap="0" >
				<s:Label fontSize="12" text="GIRO" width="100%" left="5"/>
				<components:MyAutoComplete id="cmbGiro" width="100%" textAlign="left"
										   dataProvider="{ CatalogoFactory.getInstance().giros }" labelField="nombre" matchType="anyPart" prompt="No Filtrar"
										   allowNewValues="false" selectedItemStyleName="{ AutoComplete.STYLE_MAC_MAIL }" allowDuplicates="false"
										   allowMultipleSelection="false" allowEditingNewValues="false" labelFunction="codigoNombreLabelFunction"
										   backspaceAction="focus" next_focus="{cmbEspecialista}" previous_focus="{cmbEncargadoCuenta}"
										   dropDownItemRenderer="{ dropDownItemRenderer }" />
			</s:VGroup>
		</s:HGroup>	
		<s:HGroup width="100%">			
			<s:VGroup width="100%" paddingBottom="0" paddingLeft="0" paddingRight="0" verticalAlign="middle" gap="0" >
				<s:Label fontSize="12" text="LOCALIDAD" width="100%" left="5"/>
				<components:MyAutoComplete id="cmbLocalidad" width="100%" textAlign="left" labelFunction="localidadLabelFunction"
										   dataProvider="{ localidades }" matchType="anyPart" prompt="No Filtrar"
										   allowNewValues="true" selectedItemStyleName="{ AutoComplete.STYLE_MAC_MAIL }" allowDuplicates="false"
										   allowMultipleSelection="false" allowEditingNewValues="false"  backspaceAction="focus" />
			</s:VGroup>
		</s:HGroup>	

		<s:controlBarContent>
			<s:HGroup width="100%" horizontalAlign="right">
				<s:CheckBox id="chbActivos" label="Activos" selected="true" />
				<s:Spacer width="100%" />
				<s:Button id="cmdFiltrar" click="cmdFiltrar_clickHandler(event)" label="Filtrar" enabled="true" toolTip="Filtrar" styleName="filtrarButton" />
				<s:Button id="cmdLimpiar" click="cmdLimpiar_clickHandler(event)" label="Limpiar" toolTip="Limpiar Todos los Campos" styleName="clearButton16" />
			</s:HGroup>
		</s:controlBarContent>

	</s:Panel>
		
	<s:Panel width="100%" height="100%" title="Resultado" dropShadowVisible="false" >
		<s:layout>
			<s:VerticalLayout paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"/>
		</s:layout>
		<s:HGroup width="100%" paddingBottom="0" paddingLeft="0" paddingRight="0" verticalAlign="middle" gap="5">
			<s:Label id="lblFilter" fontSize="12" text="Buscar" left="5"/>
			<s:SkinnableContainer width="100%" styleName="filterTextInput">
				<s:layout>
					<s:HorizontalLayout horizontalAlign="center" paddingBottom="1" paddingLeft="2" paddingRight="5" paddingTop="1" verticalAlign="middle" />
				</s:layout>
				<s:TextInput id="filter" width="100%" change="showButton(event)" creationComplete="filter_creationCompleteHandler(event)" styleName="filter" prompt="Ver todos"/>
				<s:Button id="btnCloseSearch" width="8" height="8" click="resetSearch(event)" styleName="buttonCloseSearch" visible="false" />
				<s:Button id="btnSearch" width="16" height="16" click="btnSearch_clickHandler(event)" styleName="buttonSearch"/>
			</s:SkinnableContainer>
		</s:HGroup>			
		
		<s:Group width="100%" height="100%">
			<s:VGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" visible="{loading}" includeInLayout="{loading}">
				<loader:LoadComponent label="Cargando"/>
			</s:VGroup>			
			<s:VGroup width="100%" height="100%" visible="{!loading}" includeInLayout="{!loading}">
				<components:RoundedSelectionList id="listaClientes" width="100%" height="100%" borderSkin="{null}" selectionColor="0xfafafa" change="listaClientes_changeHandler(event)"
												 creationComplete="listaPersonas_creationCompleteHandler(event)" dataProvider="{clientes}" selectionDuration="600" useRollOver="false"
												 itemRenderer="biz.fulltime.ui.components.PersonaLabel" />
				
			</s:VGroup>
			
		</s:Group>
		
		<s:controlBarContent>
			<s:HGroup width="100%" horizontalAlign="right" verticalAlign="middle" paddingBottom="0" paddingTop="0">
				<s:Button id="cmdExcel" click="cmdExcel_clickHandler(event)" label="Excel" styleName="exportExcel" />
				<s:Spacer width="100%" />
				<s:Button id="cmdAgregar" click="cmdAgregar_clickHandler(event)" label="Nuevo Cliente" styleName="agregarCliente" height="100%" 
						  visible="{GeneralOptions.getInstance().loggedUser.permisoId != Usuario.USUARIO_TITO}" />
			</s:HGroup>
		</s:controlBarContent>

	</s:Panel>
		
</s:VGroup>
