<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:loader="biz.fulltime.util.loader.*" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:tabBar="skin.components.tabBar.*"
		 width="100%" height="100%">

	<fx:Script>
		<![CDATA[
			import biz.fulltime.conf.ServerConfig;
			import biz.fulltime.dto.DocumentoDTO;
			import biz.fulltime.dto.DocumentoQuery;
			import biz.fulltime.event.ListadoFacturasEvent;
			import biz.fulltime.model.Articulo;
			import biz.fulltime.model.Cliente;
			import biz.fulltime.model.Documento;
			import biz.fulltime.model.Moneda;
			import biz.fulltime.model.VinculoDocumentos;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;

			private var _documentos:ArrayCollection;

			private var _facturasPendientes:ArrayCollection;
			
			private var _filtros:ArrayCollection;
			
			private var _ordenesVentaPendientes:ArrayCollection;

			private var _cliente:Cliente;

			private var remFacturasCliente:RemoteObject;
			
			private var remFacturas:RemoteObject;

			private var _selectedItem:DocumentoDTO;
			
			private var _articulo:Articulo;
			
			private var _moneda:Moneda;
			
			private var _showCliente:Boolean;

			private var _hasSaldoPendiente:Boolean = false;

			[Bindable]
			public var seleccionMultiple:Boolean = false;

			[Bindable]
			private var loadingFacturas:Boolean = false;

			[Bindable]
			private var loadingOrdenesVenta:Boolean = false;

			[Bindable]
			public function get moneda():Moneda {
				return _moneda;
			}

			public function set moneda(value:Moneda):void {
				_moneda = value;
			}

			[Bindable]
			public function get showCliente():Boolean {
				return _showCliente;
			}

			public function set showCliente(value:Boolean):void {
				_showCliente = value;
			}

			[Bindable]
			public function get documentos():ArrayCollection {
				return _documentos;
			}
			
			public function set documentos(value:ArrayCollection):void {
				_documentos = value;
			}
			
			[Bindable]
			public function get ordenesVentaPendientes():ArrayCollection {
				return _ordenesVentaPendientes;
			}

			public function set ordenesVentaPendientes(value:ArrayCollection):void {
				_ordenesVentaPendientes = value;
			}

			public function get articulo():Articulo {
				return _articulo;
			}

			public function set articulo(value:Articulo):void {
				_articulo = value;
			}

			public function get selectedItem():DocumentoDTO {
				return _selectedItem;
			}

			public function set selectedItem(value:DocumentoDTO):void {
				_selectedItem = value;
			}

			[Bindable]
			public function get facturasPendientes():ArrayCollection {
				return _facturasPendientes;
			}

			public function set facturasPendientes(value:ArrayCollection):void {
				_facturasPendientes = value;
			}

			[Bindable]
			public function get cliente():Cliente {
				return _cliente;
			}

			public function set cliente(value:Cliente):void {
				_cliente = value;
			}

			protected function dgFacturas_doubleClickHandler(event:MouseEvent):void {
				selectedItem = dgFacturas.selectedItem as DocumentoDTO;
				dispatchEvent(new Event("facturaSeleccionada"));
			}

			protected function dgFacturas_keyDownHandler(event:KeyboardEvent):void {
				if (event.keyCode == Keyboard.ENTER) {
					selectedItem = dgFacturas.selectedItem as DocumentoDTO;
					dispatchEvent(new Event("facturaSeleccionada"));
				}
			}

			private function moneda_labelFunction(item:Object, column:GridColumn):String {
				return item.moneda.nombre;
			}

			private function comprobante_labelFunction(item:Object, column:GridColumn):String {
				return item.comprobante.nombre;
			}

			private function cliente_labelFunction(item:Object, column:spark.components.gridClasses.GridColumn):String {
				return item.cliente.codigo + " - " + item.cliente.nombre;
			}

			private function comprobante_cod_labelFunction(item:Object, column:GridColumn):String {
				return item.comprobante.codigo + " - " + item.comprobante.nombre;
			}

			private function date_labelFunction(item:Object, column:GridColumn):String {
				return item.fecha;
			}

			protected function cmdClose_clickHandler(event:MouseEvent):void {
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}

			public function obtenerFacturasOrdenesVenta():void {
				documentos = new ArrayCollection();

				obtenerFacturas();
				obtenerOrdenesVenta();
				
			}

			public function obtenerFacturasVinculadas(orden:String, comprobantes:String = null):void {
				if (!remFacturasCliente) {
					remFacturasCliente = new RemoteObject();
					remFacturasCliente.destination = "CreatingRpc";
					remFacturasCliente.channelSet = ServerConfig.getInstance().channelSet;
					remFacturasCliente.addEventListener(ResultEvent.RESULT, resultFacturasPendientes);
					remFacturasCliente.addEventListener(FaultEvent.FAULT, onFault);
				}
				
				var _docQuery:DocumentoQuery = new DocumentoQuery();
				_docQuery.start = 0;
				_docQuery.limit = 16;
				_docQuery.pendiente = false;
				_docQuery.cliente = cliente ? cliente.codigo : null;
				_docQuery.articulo = articulo ? articulo.codigo : null;
				_docQuery.moneda = moneda ? moneda.codigo : null;
				_docQuery.tieneSaldo = hasSaldoPendiente;
				_docQuery.orden = orden;
				_docQuery.comprobantes = comprobantes;
				
				loadingFacturas = true;
				remFacturasCliente.queryDocumentos(_docQuery);
			}

			
			public function obtenerFacturas(orden:String = null):void {
				if (!remFacturasCliente) {
					remFacturasCliente = new RemoteObject();
					remFacturasCliente.destination = "CreatingRpc";
					remFacturasCliente.channelSet = ServerConfig.getInstance().channelSet;
					remFacturasCliente.addEventListener(ResultEvent.RESULT, resultFacturasPendientes);
					remFacturasCliente.addEventListener(FaultEvent.FAULT, onFault);
				}
				
				var _docQuery:DocumentoQuery = new DocumentoQuery();
				_docQuery.start = 0;
				_docQuery.limit = 16;
				_docQuery.pendiente = false;
				_docQuery.cliente = cliente ? cliente.codigo : null;
				_docQuery.articulo = articulo ? articulo.codigo : null;
				_docQuery.moneda = moneda ? moneda.codigo : null;
				_docQuery.tieneSaldo = hasSaldoPendiente;
				_docQuery.orden = orden;
				_docQuery.comprobantes = "2,4,5,6,7,8,9,19,20,22,98";
				
				loadingFacturas = true;
				remFacturasCliente.queryDocumentos(_docQuery);
			}
			
			private function obtenerOrdenesVenta():void {
				if (!remFacturas) {
					remFacturas = new RemoteObject();
					remFacturas.destination = "CreatingRpc";
					remFacturas.channelSet = ServerConfig.getInstance().channelSet;
					remFacturas.addEventListener(ResultEvent.RESULT, resultOrdenesVentaPendientes);
					remFacturas.addEventListener(FaultEvent.FAULT, onFault);
				}
				
				var _docQuery:DocumentoQuery = new DocumentoQuery();
				_docQuery.start = 0;
				_docQuery.limit = 10;
				_docQuery.pendiente = true;
				_docQuery.cliente = cliente ? cliente.codigo : null;
				_docQuery.articulo = articulo ? articulo.codigo : null;
				_docQuery.comprobantes = "10";
				
				loadingOrdenesVenta = true;
				remFacturas.queryDocumentos(_docQuery);
			}
			

			private function resultFacturasPendientes(event:ResultEvent):void {
				facturasPendientes = event.result as ArrayCollection;
				if (filtros && filtros.length > 0) {
					facturasPendientes.filterFunction = filtrarFacturas;
					facturasPendientes.refresh();
				}				
				documentos.addAll(facturasPendientes);
				loadingFacturas = false;
			}
			
			private function filtrarFacturas(item:Object):Boolean {
				var doc:DocumentoDTO = item as DocumentoDTO;
				for each (var vinculo:VinculoDocumentos in filtros)  {
					if (doc.docId == vinculo.docIdVin1) {
						return false;
					}
				}
				return true;
			}
			
			private function resultOrdenesVentaPendientes(event:ResultEvent):void {
				ordenesVentaPendientes = event.result as ArrayCollection;
				documentos.addAll(ordenesVentaPendientes);
				loadingOrdenesVenta = false;
			}
			
			protected function myTabBar_creationCompleteHandler(event:FlexEvent):void {
				myTabBar.setCloseableTab(0, false);
			}

			private function onFault(event:FaultEvent):void {
				loadingFacturas = false;
				loadingOrdenesVenta = false;
				Alert.show(event.fault.faultString, 'Error');
			}

			public function get hasSaldoPendiente():Boolean {
				return _hasSaldoPendiente;
			}

			public function set hasSaldoPendiente(value:Boolean):void {
				_hasSaldoPendiente = value;
			}

			public function get filtros():ArrayCollection {
				return _filtros;
			}

			public function set filtros(value:ArrayCollection):void {
				_filtros = value;
			}

			protected function cmdAceptar_clickHandler(event:MouseEvent):void {
				var selectedItems:Vector.<Object> = dgFacturas.selectedItems;
				
				var evt:ListadoFacturasEvent = new ListadoFacturasEvent(ListadoFacturasEvent.FACTURAS_SELECTED);
				evt.facturas = selectedItems;
				dispatchEvent(evt)

			}
			
		]]>
	</fx:Script>

	<fx:Declarations>
		<s:ArrayList id="cols">
			<s:GridColumn dataField="comprobante" headerText="Tipo Comprobante" labelFunction="comprobante_cod_labelFunction" />
			<s:GridColumn width="100" dataField="numero" headerText="S/N">
				<s:itemRenderer>
					<fx:Component>
						<s:DefaultGridItemRenderer textAlign="left">
							<fx:Script>
								<![CDATA[
									import biz.fulltime.dto.DocumentoDTO;
									import biz.fulltime.model.Moneda;

									import util.CatalogoFactory;

									override public function prepare(hasBeenRecycled:Boolean):void {
										if (data) {
											var serie:String = DocumentoDTO(data).serie;
											var nro:String = DocumentoDTO(data).numero;
											if (serie && nro) {
												label = serie.toUpperCase() + nro
											} else if (serie) {
												label = serie.toUpperCase();
											} else {
												label = nro;
											}
										}
									}
								]]>
							</fx:Script>
						</s:DefaultGridItemRenderer>

					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
			<s:GridColumn width="85" dataField="fecha" headerText="Fecha" labelFunction="date_labelFunction" />
			<s:GridColumn width="120" dataField="moneda" headerText="Moneda" labelFunction="moneda_labelFunction" />
			<s:GridColumn dataField="cliente" headerText="Cliente" labelFunction="cliente_labelFunction" visible="{showCliente}"/>
			<s:GridColumn width="135" dataField="saldo" headerText="Saldo">
				<s:itemRenderer>
					<fx:Component>
						<s:DefaultGridItemRenderer textAlign="right">
							<fx:Script>
								<![CDATA[
									import biz.fulltime.dto.DocumentoDTO;
									import biz.fulltime.model.Moneda;
									
									import util.CatalogoFactory;
									
									override public function prepare(hasBeenRecycled:Boolean):void {
										if (data) {
											var moneda:String = DocumentoDTO(data).moneda.codigo;
											var simbolo:String = "";
											for each (var m:Moneda in CatalogoFactory.getInstance().monedas) {
												if (m.codigo == moneda) {
													simbolo = m.simbolo;
												}
																					
											if (DocumentoDTO(data).saldo) {
												label = simbolo + " " + outerDocument.nf_Espanol_Espanol.format(DocumentoDTO(data).saldo);
											} else {
												label = simbolo + " " + outerDocument.nf_Espanol_Espanol.format(0);
											}
										}
									}
									}
								]]>
							</fx:Script>

						</s:DefaultGridItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
			<s:GridColumn  width="135" dataField="total" headerText="Total">
				<s:itemRenderer>
					<fx:Component>
						<s:DefaultGridItemRenderer textAlign="right">
							<fx:Script>
								<![CDATA[
									import biz.fulltime.dto.DocumentoDTO;
									import biz.fulltime.model.Moneda;

									import util.CatalogoFactory;

									override public function prepare(hasBeenRecycled:Boolean):void {
										if (data) {
											var moneda:String = DocumentoDTO(data).moneda.codigo;
											var simbolo:String = "";
											for each (var m:Moneda in CatalogoFactory.getInstance().monedas) {
												if (m.codigo == moneda) {
													simbolo = m.simbolo;
												}
											}											
											if (DocumentoDTO(data).total) {
												label = simbolo + " " + outerDocument.nf_Espanol_Espanol.format(DocumentoDTO(data).total);
											} else {
												label = simbolo + " " + outerDocument.nf_Espanol_Espanol.format(0);
											}
										}
									}
								]]>
							</fx:Script>
						</s:DefaultGridItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
		</s:ArrayList>

		<s:NumberFormatter id="nf_Espanol_Espanol" fractionalDigits="2" locale="es_ES" />
	</fx:Declarations>


	<s:BorderContainer width="100%" height="100%" backgroundAlpha=".06" backgroundColor="#6E87B5" borderAlpha="0">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		<s:VGroup width="100%" height="100%" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0" gap="0">
			<s:HGroup width="100%" paddingLeft="10" paddingTop="5">
				<tabBar:MyTabBar2 id="myTabBar" creationComplete="myTabBar_creationCompleteHandler(event)" dataProvider="{myViewStack}" requireSelection="true" />
			</s:HGroup>
	
			<s:HGroup width="100%" height="100%" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="0">
				<s:BorderContainer width="100%" height="100%" backgroundAlpha=".75" backgroundColor="0xFAFAFA" cornerRadius="4">
					<s:layout>
						<s:VerticalLayout paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5" />
					</s:layout>
					<mx:ViewStack id="myViewStack" width="100%" height="100%" paddingTop="0">
						<s:NavigatorContent width="100%" height="100%" label="Documentos">
							<s:Group width="100%" height="100%">
								<s:VGroup width="100%" height="100%">
									<s:HGroup width="100%" height="100%" gap="10">
										<s:DataGrid id="dgFacturas" width="100%" height="100%" doubleClick="dgFacturas_doubleClickHandler(event)" keyDown="dgFacturas_keyDownHandler(event)"
													sortableColumns="false" columns="{cols}" doubleClickEnabled="true" focusEnabled="true" dataProvider="{documentos}"
													selectionMode="{seleccionMultiple ? 'multipleRows' : 'singleRow'}">
										</s:DataGrid>
									</s:HGroup>
								</s:VGroup>
								<s:VGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" visible="{loadingFacturas || loadingOrdenesVenta}" includeInLayout="{loadingFacturas || loadingOrdenesVenta}">
									<loader:LoadComponent label="" />
								</s:VGroup>
							</s:Group>
						</s:NavigatorContent>
	
					</mx:ViewStack>
				</s:BorderContainer>
			</s:HGroup>
				
			<s:BorderContainer width="100%" backgroundColor="#D9E3F0" borderAlpha="0" minHeight="25">
				<s:layout>
					<s:HorizontalLayout horizontalAlign="right" paddingBottom="10" paddingRight="10" paddingTop="10" />
				</s:layout>
				<mx:Image id="loader2" source="@Embed(source='assets/general/logo_oscuro.gif')" alpha=".5" scaleX=".25" scaleY=".25" />
				<s:Spacer width="100%" />
				<s:Button id="cmdAceptar" width="100" height="32" click="cmdAceptar_clickHandler(event)" styleName="aceptarButton" label="Aceptar" focusEnabled="true" />
				<s:Button id="cmdClose" width="100" height="32" click="cmdClose_clickHandler(event)" styleName="cancelarButton" label="Cancelar" focusEnabled="true" />
			</s:BorderContainer>

			
		</s:VGroup>
	</s:BorderContainer>

</s:Group>
