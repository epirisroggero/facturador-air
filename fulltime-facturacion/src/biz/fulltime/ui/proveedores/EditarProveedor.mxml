<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:components="biz.fulltime.ui.components.*" xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:renderers="biz.fulltime.ui.renderers.*"
		   xmlns:s="library://ns.adobe.com/flex/spark"
		   width="100%" height="100%" creationComplete="init()" show="showPanel()" label="Editor de proveedor" xmlns:util="biz.fulltime.util.*">

	<mx:Script>
		<![CDATA[
			import biz.fulltime.conf.GeneralOptions;
			import biz.fulltime.conf.ServerConfig;
			import biz.fulltime.dto.ProveedorDTO;
			import biz.fulltime.event.ClienteEvent;
			import biz.fulltime.event.ProveedorEvent;
			import biz.fulltime.model.Contacto;
			import biz.fulltime.model.Departamento;
			import biz.fulltime.model.Giro;
			import biz.fulltime.model.Moneda;
			import biz.fulltime.model.Pais;
			import biz.fulltime.model.PreciosVenta;
			import biz.fulltime.model.Proveedor;
			import biz.fulltime.model.Usuario;
			import biz.fulltime.model.Zona;
			
			import com.hillelcoren.components.AutoComplete;
			
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.controls.ProgressBarMode;
			import mx.events.CloseEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			import mx.validators.Validator;
			
			import spark.components.TitleWindow;
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			import util.CatalogoFactory;
			import util.WarningPnl;
			
			[Bindable]
			public var lstFacturasIVA:ArrayCollection = new ArrayCollection([
				{value:"S", label:"Facturas con IVA incluído"},
				{value:"M", label:"Facturas con IVA incluído (Modificable)"},
				{value:"N", label:"Facturas sin IVA incluido"},
				{value:"O", label:"Facturas sin IVA incluido (Modificable)"},
				{value:"E", label:"Facturas excentas de IVA"}]);

			[Bindable]
			public var lstEFactura:ArrayCollection = new ArrayCollection([
				{value:"S", label:"Si"},
				{value:"N", label:"No"}]);
			
			[Bindable]
			public var tipodDocList:ArrayCollection = new ArrayCollection([
				{value:"C", label:"C.I."}, 
				{value:"R", label:"RUT"}, 
				{value:"D", label:"DNI"},
				{value:"P", label:"PASAPORTE"},
				{value:"E", label:"OTRO"}				
			]);
			

			[Bindable]
			private var _tipoDoc:Object = null;

			private var _proveedor:Proveedor = new Proveedor();

			[Bindable]
			private var _zona:Zona;

			[Bindable]
			private var _departamento:Departamento;

			[Bindable]
			private var _pais:Pais;

			[Bindable]
			private var _giro:Giro;
			
			[Bindable]
			private var _prvIvaInc:Object;

			[Bindable]
			private var _prvEFactura:Object;


			[Bindable]
			private var _preciosVenta:PreciosVenta = null;

			[Bindable]
			private var primeroDisponible:String;

			[Bindable]
			private var ultimoDisponible:String;

			[Bindable]
			private var validatorArr:Array;

			private var imagesFilter:FileFilter = new FileFilter("Images", "*.jpg;*.gif;*.png");

			private var mFileReference:FileReference = new FileReference();

			[Bindable]
			private var monedas:ArrayCollection = new ArrayCollection();

			private function init():void {
				validatorArr = new Array();

				validatorArr.push(fname_stringValidator);
				validatorArr.push(email_emailValidator1);
				validatorArr.push(email_emailValidator2);

				validatorArr.push(razonSocial_Validator);
				validatorArr.push(localidad_Validator);
				validatorArr.push(direccion_Validator);

				validatorArr.push(telefono_Validator);
				validatorArr.push(celular_Validator);

				validatorArr.push(departamento_Validator);
				validatorArr.push(rut_stringValidator);

				/* mFileReference.addEventListener(Event.SELECT, onFileSelected); */

				for each (var moneda:Moneda in CatalogoFactory.getInstance().monedas) {
					monedas.addItem(moneda);
				}
				
				Validator.validateAll(validatorArr);

			}


			[Bindable]
			public function get proveedor():Proveedor {
				return _proveedor;
			}

			public function set proveedor(value:Proveedor):void {
				this._proveedor = value;

				if (!_proveedor.contacto) {
					_proveedor.contacto = new Contacto();
				}
				if (cmbDepartamento) {
					cmbDepartamento.clear();
				}
				if (cmbGiro) {
					cmbGiro.clear();
				}
				if (cmbZona) {
					cmbZona.clear();
				}
				if (ddlIVA) {
					ddlIVA.selectedIndex = -1;
				}
				
				if (ddlTipoDoc) {
					ddlTipoDoc.selectedItem = null;
				}
				
				var ctoDocumentoTipo:String = proveedor.contacto.ctoDocumentoTipo;
				if (ctoDocumentoTipo) {
					for each (var o:Object in tipodDocList) {
						if (ctoDocumentoTipo == o.value) {
							_tipoDoc = o;
							if (ddlTipoDoc) {
								ddlTipoDoc.selectedItem = _tipoDoc;
							}
							break;
						}
					}
				}			
				
				_prvIvaInc = lstFacturasIVA[0]; 
				callLater(function():void {
					var prvIvaInc:String = proveedor.prvIvaInc;
					if (prvIvaInc) {
						for each (var item:Object in lstFacturasIVA) {
							if (prvIvaInc == item.value) {
								_prvIvaInc = item;
								if (ddlIVA) {
									ddlIVA.selectedItem = _prvIvaInc;
								}
								break;
							}
						}
					}
				});
				
				_prvEFactura = lstEFactura[1]; 
				callLater(function():void {
					var prvFacturaElectronica:String = proveedor.facturaElectronica;
					if (prvFacturaElectronica) {
						for each (var item:Object in lstEFactura) {
							if (prvFacturaElectronica == item.value) {
								_prvEFactura = item;
								if (ddlEFactura) {
									ddlEFactura.selectedItem = _prvEFactura;
								}
								break;
							}
						}
					}
				});


				_zona = null;
				var zonaCodigo:String = proveedor.contacto.zonaIdCto;
				if (zonaCodigo) {
					for each (var zna:Zona in CatalogoFactory.getInstance().zonas) {
						if (zonaCodigo == zna.codigo) {
							_zona = zna;
							break;
						}
					}
				}
				
				_pais = null;
				var paisCodigo:String = proveedor.contacto.paisIdCto;
				for each (var p:Pais in CatalogoFactory.getInstance().paises) {
					if (paisCodigo == p.codigo) {
						_pais = p;
						break;
					}
				}

				_departamento = null;
				var deptoCodigo:String = proveedor.contacto.deptoIdCto;
				if (deptoCodigo) {
					for each (var depto:Departamento in CatalogoFactory.getInstance().departamentos) {
						if (deptoCodigo == depto.codigo) {
							_departamento = depto;
							break;
						}
					}
				}

				_giro = null;
				var giroCodigo:String = proveedor.contacto.girIdCto;
				if (giroCodigo) {
					for each (var gro:Giro in CatalogoFactory.getInstance().giros) {
						if (giroCodigo == gro.codigo) {
							_giro = gro;
							break;
						}
					}
				}

				proveedor.addEventListener("_savedProveedorOk", function():void {
					lblMsg.visible = true;

					var timer:Timer = new Timer(1000, 1);
					timer.addEventListener(TimerEvent.TIMER_COMPLETE, function(evt:Event):void {
						lblMsg.visible = false;
						resultMerge();
					});
					timer.start();
				});

				proveedor.addEventListener("_addedProveedorOk", function():void {
					lblMsg.visible = true;

					var timer:Timer = new Timer(1000, 1);
					timer.addEventListener(TimerEvent.TIMER_COMPLETE, function(evt:Event):void {
						lblMsg.visible = false;
						resultSave();
					});
					timer.start();
				});
				
				obtenerUltimoDisponible();

				dispatchEvent(new Event("_changeProveedor", true, true));
			}
			
			private function obtenerUltimoDisponible() {
				var proveedorObj:RemoteObject = new RemoteObject();
				proveedorObj.destination = "CreatingRpc";
				proveedorObj.channelSet = ServerConfig.getInstance().channelSet;
				proveedorObj.addEventListener(ResultEvent.RESULT, function(event:ResultEvent):void {
					var code:Number = new Number(event.result.toString());
					ultimoDisponible = (code + 1).toString();
					
				});
				proveedorObj.addEventListener(FaultEvent.FAULT, handleFault);					
				proveedorObj.showBusyCursor = true;				
				proveedorObj.getLastId();

			}
			
			private function handleFault(event:FaultEvent):void {
				var message:String = event.fault && event.fault.rootCause && event.fault.rootCause.cause ? event.fault.rootCause.cause.localizedMessage : null;
				if (!message) {
					message = event.message.toString();
				}				
				Alert.show(message, "Error", 4, null, null, StyleManager.getStyleManager(null).getStyleDeclaration('.icons32').getStyle('ErrorIcon'));
			}

			public function validateForm(evt:MouseEvent):void {
				var validatorErrorArray:Array = Validator.validateAll(validatorArr);

				var isValidForm:Boolean = validatorErrorArray.length == 0;
				if (isValidForm) {
					if (!proveedor.esNuevo) {
						proveedor.mergeProveedor();
					} else {
						proveedor.contacto.usuIdCto = Number(GeneralOptions.getInstance().loggedUser.codigo);
						proveedor.verificarDatosProveedor();
					}

				} else {
					/////////////////////////////////////
					// Voler a calcular los contactos. //
					/////////////////////////////////////

					var err:ValidationResultEvent;
					var resultXML:XML = <errors/>;
					for each (err in validatorErrorArray) {
						resultXML.appendChild(<error>{err.message}</error>);
					}
					
					var warningPnl:WarningPnl = new WarningPnl();
					warningPnl.warningText = "Los datos no son validos.";
					warningPnl.dataProvider = new XMLListCollection(resultXML.error);
					warningPnl.showButtons = true;
					warningPnl.showButtonDetails = false;
					
					var helpWindow2:TitleWindow = new TitleWindow();
					helpWindow2.title = "Errores";
					helpWindow2.width = 480;
					helpWindow2.visible = true;
					
					helpWindow2.addElement(warningPnl);
					warningPnl.addEventListener(CloseEvent.CLOSE, function (event:Event):void {
						PopUpManager.removePopUp(helpWindow2);
					});
					helpWindow2.addEventListener(CloseEvent.CLOSE, function (event:Event):void {
						PopUpManager.removePopUp(helpWindow2);
					});			
					PopUpManager.addPopUp(helpWindow2, parent, true);
					PopUpManager.centerPopUp(helpWindow2);			

				}
			}

			private function resultSave():void {
				var p:ProveedorDTO = new ProveedorDTO();
				p.codigo = proveedor.codigo;
				p.nombre = proveedor.nombre;

				dispatchEvent(new ProveedorEvent(ProveedorEvent.PROVEEDOR_NUEVO, null, p));
			}

			private function resultMerge():void {
				var p:ProveedorDTO = new ProveedorDTO();
				p.codigo = proveedor.codigo;
				p.nombre = proveedor.nombre;

				dispatchEvent(new ProveedorEvent(ClienteEvent.FINALIZAR_EDICION, null, p));
			}

			private function cancelValues(evt:MouseEvent):void {
				var p:ProveedorDTO = new ProveedorDTO();
				p.codigo = proveedor.codigo;
				p.nombre = proveedor.nombre;

				dispatchEvent(new ProveedorEvent(ClienteEvent.CANCELAR_EDICION, null, p));
			}

			private function showPanel():void {
				fname.setFocus();
			}

			private function buscarImagen():void {
				mFileReference.browse([imagesFilter]);
			}

			private function onError(event:IOErrorEvent):void {
				Alert.show("Error al subir la Imagen: " + String(event.errorID));
			}

			public function codigoNombreLabelFunction(item:Object):String {
				var label:String;
				if (item && item.hasOwnProperty("codigo")) {
					label = item.codigo;
				}
				if (item && item.hasOwnProperty("nombre")) {
					label += " - " + item.nombre;
				}
				return label;
			}

			protected function cmbZona_changeHandler(event:Event):void {
				_zona = cmbZona.selectedItem as Zona;
				if (_zona) {
					proveedor.contacto.zonaIdCto = _zona.codigo;
				} else {
					proveedor.contacto.zonaIdCto = null;
				}
			}

			protected function cmbDepartamento_changeHandler(event:Event):void {
				_departamento = cmbDepartamento.selectedItem as Departamento;
				if (_departamento) {
					proveedor.contacto.deptoIdCto = _departamento.codigo;
				} else {
					proveedor.contacto.deptoIdCto = null;
				}
			}

			protected function cmbGiro_changeHandler(event:Event):void {
				_giro = cmbGiro.selectedItem as Giro;
				if (_giro) {
					proveedor.contacto.girIdCto = _giro.codigo;
				} else {
					proveedor.contacto.girIdCto = null;
				}
			}

			protected function txtCelular_changeHandler(event:TextOperationEvent):void {
				telefono_Validator.required = txtCelular.text.length == 0;
			}

			protected function txtTelefono_changeHandler(event:TextOperationEvent):void {
				celular_Validator.required = txtTelefono.text.length == 0;

			}

			[Bindable(event = "_changeCliente")]
			public function hasPerm():Boolean {
				var loggedUser:Usuario = GeneralOptions.getInstance().loggedUser;
				if (loggedUser.esSupervisor() || loggedUser.permisoId == Usuario.USUARIO_ADMINISTRADOR || loggedUser.permisoId == Usuario.USUARIO_FACTURACION) {
					return true;
				}
				return proveedor.esNuevo;

			}
			
			protected function cmbPais_changeHandler(event:Event):void {
				_pais = cmbPais.selectedItem as Pais;
				if (_pais) {
					proveedor.contacto.paisIdCto = _pais.codigo;
				} else {
					proveedor.contacto.paisIdCto = null;
				}
				rut_stringValidator.validate();
				
			}
			
			protected function ddlIVA_changeHandler(event:IndexChangeEvent):void {
				_prvIvaInc =  ddlIVA.selectedItem as Object;
				if (_prvIvaInc) {
					proveedor.prvIvaInc = _prvIvaInc.value;
				} else {
					proveedor.prvIvaInc = "S";
				}
			}
			
			protected function ddlEfactura_changeHandler(event:IndexChangeEvent):void {
				_prvEFactura =  ddlEFactura.selectedItem as Object;
				if (_prvEFactura) {
					proveedor.facturaElectronica = _prvEFactura.value;
				} else {
					proveedor.facturaElectronica = "N";
				}
			}

			
			protected function fname_changeHandler(event:TextOperationEvent):void {
				proveedor.nombre = fname.text;
				proveedor.contacto.nombre = fname.text;
				
			}
			
			protected function ddlTipoDoc_changeHandler(event:IndexChangeEvent):void {
				var selectedItem:Object = ddlTipoDoc.selectedItem;
				
				proveedor.contacto.ctoDocumentoTipo = selectedItem.value as String;
				proveedor.contacto.ctoDocumentoSigla = selectedItem.label as String;
				proveedor.contacto.ctoDocumento = "";
			}

			
			protected function txtCodigo_changeHandler(event:TextOperationEvent):void {
				if (txtCodigo.text != null && txtCodigo.text.length > 0) {
					var code:Number = Number(txtCodigo.text);
					proveedor.codigo = code.toString();
					txtCodigo.text = code.toString();
				} else {
					proveedor.codigo = null;
				}
				
			}
			
		]]>
	</mx:Script>

	<mx:Component id="dropDownItemRenderer">
		<renderers:CodigoNombreItemRenderer />
	</mx:Component>


	<mx:StringValidator id="fname_stringValidator" source="{fname}" required="true" property="text" requiredFieldError="El 'Nombre' no puede quedar vacio." minLength="2"
						tooShortError="El 'Nombre' debe tener al menos 2 caracteres." />

	<mx:StringValidator id="razonSocial_Validator" source="{txtRazonSocial}" required="true" property="text" requiredFieldError="La 'Razon Social' no puede quedar vacia." />
	<mx:StringValidator id="localidad_Validator" source="{txtLocalidad}" required="true" property="text" requiredFieldError="Debe ingresar la 'Localidad'." />
	<mx:StringValidator id="direccion_Validator" source="{txtDireccion}" required="true" property="text" requiredFieldError="La 'Dirección' no puede quedar vacia." />

	<mx:StringValidator id="telefono_Validator" source="{txtTelefono}" required="{txtCelular.text.length == 0}" property="text"
						requiredFieldError="Debe ingresar 'Teléfono' y/o 'Celular', no pueden quedar ambos datos vacios." />
	<mx:StringValidator id="celular_Validator" source="{txtCelular}" required="{txtTelefono.text.length == 0}" property="text"
						requiredFieldError="Debe ingresar 'Teléfono' y/o 'Celular', no pueden quedar ambos datos vacios." />

	<mx:EmailValidator id="email_emailValidator1" source="{txtEmail1}" required="false" property="text" />
	<mx:EmailValidator id="email_emailValidator2" source="{txtEmail2}" required="false" property="text" />

	<mx:StringValidator id="departamento_Validator" source="{cmbDepartamento}" required="true" property="text" requiredFieldError="El 'Departamento' no puede quedar vacio." />

	<util:RutValidator id="rut_stringValidator" source="{txtRUT}" required="false" property="text"
					   tooShortError="El RUT es incorrecto." checkRut="{_pais.codigo == 'UY'}"/>

	<s:Label id="lblMsg" x="0" width="100%" bottom="45" color="red" fontWeight="bold" paddingBottom="5" textAlign="center" text="Grabación Exitosa" visible="false"
			 maxDisplayedLines="1" />

	<mx:VBox width="100%" height="100%" verticalGap="0">
		<s:HGroup width="100%" paddingTop="5" paddingLeft="5" paddingBottom="5" paddingRight="5">
			<s:Label fontSize="16" fontWeight="normal" text="Datos Generales" />
		</s:HGroup>
		<mx:HRule width="100%" />
		<mx:HBox width="100%" height="100%" horizontalAlign="left" verticalAlign="top">
			<s:Group width="100%" height="100%">
				<mx:Canvas width="100%" height="100%" label="Generales">
					<s:Form width="100%" height="100%" creationComplete="{txtCodigo.setFocus()}" maxWidth="890">
						<s:layout>
							<s:FormLayout gap="-12" />
						</s:layout>
						
						<s:Spacer height="10" />
						<s:FormItem width="100%" label="Código" styleName="ItemStyle">
							<s:VGroup width="100%">
								<s:HGroup width="100%" verticalAlign="middle">
									<s:TextInput id="txtCodigo" width="60" textAlign="right" text="{proveedor.codigo}" change="txtCodigo_changeHandler(event)" restrict="0-9" maxChars="16" enter="fname.setFocus()"
												 editable="{proveedor.esNuevo}" />
									<s:Label text="Nombre" />
									<s:TextInput id="fname" width="100%" text="{proveedor.contacto.nombre}" change="fname_changeHandler(event)"  maxChars="50" enter="txtTelefono.setFocus()" />
								</s:HGroup>
								<s:HGroup width="100%" verticalAlign="middle" visible="{proveedor.esNuevo}">
									<s:Label fontSize="13" text="Primero disponible después del último utilizado:" />
									<s:Label fontSize="13" text="{ultimoDisponible}" />
								</s:HGroup>
							</s:VGroup>
						</s:FormItem>

						<s:FormItem width="100%" label="Notas" styleName="ItemStyle">
							<s:TextArea id="txtNotas" width="100%" height="48" text="@{proveedor.contacto.ctoNotas}" maxChars="1024"/>
						</s:FormItem>

						<s:FormItem width="100%" label="Teléfono" styleName="ItemStyle">
							<s:HGroup width="100%" verticalAlign="middle">
								<s:TextInput id="txtTelefono" width="100%" change="txtTelefono_changeHandler(event)" text="@{proveedor.contacto.ctoTelefono}"
											 enter="txtFax.setFocus()" maxChars="50" />
								<s:Label text="Fax" />
								<s:TextInput id="txtFax" width="100%" text="@{proveedor.contacto.ctoFax}" enter="txtRazonSocial.setFocus()" maxChars="50"/>
							</s:HGroup>
						</s:FormItem>
						<s:FormItem width="100%" label="EFactura" styleName="ItemStyle">
							<s:DropDownList id="ddlEFactura" width="360" dataProvider="{lstEFactura}" textAlign="left" labelField="label" selectedItem="{_prvEFactura}" change="ddlEfactura_changeHandler(event)"/>
						</s:FormItem>
						<s:FormItem width="100%" label="Razón social" styleName="ItemStyle">
							<s:TextInput id="txtRazonSocial" width="100%" text="@{proveedor.contacto.ctoRSocial}" enter="txtRUT.setFocus()" maxChars="100"/>
						</s:FormItem>

						<s:FormItem width="100%" label="Tipo Documento" styleName="ItemStyle">
							<s:DropDownList id="ddlTipoDoc" width="100" dataProvider="{tipodDocList}" selectedItem="{_tipoDoc}" change="ddlTipoDoc_changeHandler(event)"/>
						</s:FormItem>
						<s:FormItem width="100%" label="RUT" styleName="ItemStyle">
							<s:TextInput id="txtRUT" width="46%" text="@{proveedor.contacto.ctoRUT}" enter="txtDireccion.setFocus()" restrict="0-9" maxChars="12" />
						</s:FormItem>
						<s:FormItem width="100%" label="{proveedor.contacto.ctoDocumentoSigla}" styleName="ItemStyle">
							<s:TextInput id="txtDocument" width="46%" text="@{proveedor.contacto.ctoDocumento}" enter="txtDireccion.setFocus()" restrict="0-9A-Z" maxChars="24" />
						</s:FormItem>

						<s:FormItem width="100%" label="Dirección" styleName="ItemStyle">
							<s:TextInput id="txtDireccion" width="100%" text="@{proveedor.contacto.ctoDireccion}" enter="txtLocalidad.setFocus()" maxChars="100"/>
						</s:FormItem>
						<s:FormItem width="100%" label="Localidad" styleName="ItemStyle">
							<s:TextInput id="txtLocalidad" width="100%" text="@{proveedor.contacto.ctoLocalidad}" enter="txtCelular.setFocus()" maxChars="40"/>
						</s:FormItem>
						<s:FormItem width="100%" label="Celular" styleName="ItemStyle">
							<s:TextInput id="txtCelular" width="46%" change="txtCelular_changeHandler(event)" text="@{proveedor.contacto.ctoCelular}" enter="txtWebpage.setFocus()"
										 restrict="0-9.-;," maxChars="50" />
						</s:FormItem>
						<s:FormItem width="100%" label="Página web" styleName="ItemStyle">
							<s:TextInput id="txtWebpage" width="100%" text="@{proveedor.contacto.ctoWeb}" enter="txtWebpage.setFocus()" maxChars="100"/>
						</s:FormItem>
						<s:FormItem width="100%" label="Canal youtube" styleName="ItemStyle">
							<s:TextInput id="txtCanalYoutube" width="100%" text="@{proveedor.canalYoutube}" enter="txtGoogleMaps.setFocus()" maxChars="50"/>
						</s:FormItem>
						<s:FormItem width="100%" label="Google maps" styleName="ItemStyle">
							<s:TextInput id="txtGoogleMaps" width="100%" text="@{proveedor.googleMaps}" enter="txtEmail1.setFocus()" maxChars="50"/>
						</s:FormItem>
						<s:FormItem width="100%" label="Correo 1" styleName="ItemStyle">
							<s:HGroup width="100%" verticalAlign="middle">
								<s:TextInput id="txtEmail1" width="100%" text="@{proveedor.contacto.ctoEmail1}" enter="txtEmail2.setFocus()" maxChars="50"/>
								<s:Label paddingLeft="25" text="Correo 2:" />
								<s:TextInput id="txtEmail2" width="100%" text="@{proveedor.contacto.ctoEmail2}" enter="txtDtoRecibo.setFocus()" maxChars="50"/>
							</s:HGroup>
						</s:FormItem>
						<s:FormItem width="100%" label="Dto. recibo" styleName="ItemStyle">
							<s:HGroup width="100%" verticalAlign="middle">
								<s:TextInput id="txtDtoRecibo" widthInChars="3" text="@{proveedor.descuentoRecibo}" enter="txtDto1.setFocus()" />
								<s:Label text="%" />
								<s:Label text="Dtos." paddingLeft="20" />
								<s:TextInput id="txtDto1" widthInChars="3" text="@{proveedor.prvDto1}" enter="txtDto2.setFocus()" />
								<s:Label text="%" />
								<s:Spacer width="10" />
								<s:TextInput id="txtDto2" widthInChars="3" text="@{proveedor.prvDto2}" enter="txtDto3.setFocus()" />
								<s:Label text="%" />
								<s:Spacer width="10" />
								<s:TextInput id="txtDto3" widthInChars="3" text="@{proveedor.prvDto3}" enter="cmbPais.setFocus()" />
								<s:Label text="%" />
							</s:HGroup>
						</s:FormItem>
						<s:FormItem width="100%" label="IVA" styleName="ItemStyle">
							<s:DropDownList id="ddlIVA" width="360" dataProvider="{lstFacturasIVA}" textAlign="left" labelField="label" selectedItem="{_prvIvaInc}" change="ddlIVA_changeHandler(event)"/>
						</s:FormItem>

						<s:FormItem width="100%" label="País" styleName="ItemStyle">
							<s:HGroup width="100%" verticalAlign="middle">
								<components:MyAutoComplete id="cmbPais" width="200" textAlign="left" change="cmbPais_changeHandler(event)"
														   dataProvider="{ CatalogoFactory.getInstance().paises }" labelField="nombre" matchType="anyPart"
														   prompt="Pais" allowNewValues="false" selectedItemStyleName="{ AutoComplete.STYLE_MAC_MAIL }"
														   allowDuplicates="false" allowMultipleSelection="false" allowEditingNewValues="false"
														   labelFunction="codigoNombreLabelFunction" backspaceAction="focus" next_focus="{cmbDepartamento}" selectedItem="{_pais}"
														   previous_focus="{txtEmail2}" dropDownItemRenderer="{ dropDownItemRenderer }" />
								<s:Spacer width="10" />
								<s:Label text="Departamento" />
								<components:MyAutoComplete id="cmbDepartamento" width="180" textAlign="left" change="cmbDepartamento_changeHandler(event)"
														   dataProvider="{ CatalogoFactory.getInstance().departamentos }" labelField="nombre" matchType="anyPart"
														   prompt="Departamento" allowNewValues="false" selectedItemStyleName="{ AutoComplete.STYLE_MAC_MAIL }"
														   allowDuplicates="false" allowMultipleSelection="false" allowEditingNewValues="false"
														   labelFunction="codigoNombreLabelFunction" backspaceAction="focus" next_focus="{cmbZona}" selectedItem="{_departamento}"
														   previous_focus="{cmbPais}" dropDownItemRenderer="{ dropDownItemRenderer }" />
								<s:Spacer width="10" />
								<s:Label text="Zona" />
								<components:MyAutoComplete id="cmbZona" width="200" textAlign="left" change="cmbZona_changeHandler(event)"
														   dataProvider="{ CatalogoFactory.getInstance().zonas }" labelField="nombre" matchType="anyPart" prompt="Zona"
														   allowNewValues="false" selectedItemStyleName="{ AutoComplete.STYLE_MAC_MAIL }" allowDuplicates="false"
														   allowMultipleSelection="false" allowEditingNewValues="false" labelFunction="codigoNombreLabelFunction"
														   backspaceAction="focus" next_focus="{cmbGiro}" selectedItem="{_zona}" previous_focus="{txtEmail2}"
														   dropDownItemRenderer="{ dropDownItemRenderer }" />
							</s:HGroup>
						</s:FormItem>
						<s:FormItem width="100%" label="Giro" styleName="ItemStyle">
							<components:MyAutoComplete id="cmbGiro" width="200" textAlign="left" change="cmbGiro_changeHandler(event)"
													   dataProvider="{ CatalogoFactory.getInstance().giros }" labelField="nombre" matchType="anyPart" prompt="Giro"
													   allowNewValues="false" selectedItemStyleName="{ AutoComplete.STYLE_MAC_MAIL }" allowDuplicates="false"
													   allowMultipleSelection="false" allowEditingNewValues="false" labelFunction="codigoNombreLabelFunction"
													   backspaceAction="focus" next_focus="{apply}" selectedItem="{_giro}" previous_focus="{cmbDepartamento}"
													   dropDownItemRenderer="{ dropDownItemRenderer }" />
						</s:FormItem>
					</s:Form>
				</mx:Canvas>
			</s:Group>
		</mx:HBox>
		<mx:ControlBar id="buttons" width="100%" height="54" horizontalAlign="center" verticalAlign="bottom" backgroundAlpha="1" contentBackgroundColor="0xF0F0F0"> 
			<s:Button id="apply" click="validateForm(event)" label="Guardar" styleName="aceptarButton" />
			<s:Button id="cancel" click="cancelValues(event)" label="Cerrar" styleName="cerrarButton" />
		</mx:ControlBar>
	</mx:VBox>
</mx:Canvas>
