<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:components="components.*" xmlns:facturacion="biz.fulltime.ui.facturacion.*" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  width="100%" height="100%" preinitialize="init()" creationComplete="creationCompleteHandler(event)" xmlns:recibos="biz.fulltime.ui.recibos.*">

	<fx:Script>
		<![CDATA[
			import biz.fulltime.conf.GeneralOptions;
			import biz.fulltime.conf.ServerConfig;
			import biz.fulltime.dto.CreditoInfo;
			import biz.fulltime.dto.DocumentoDTO;
			import biz.fulltime.dto.DocumentoQuery;
			import biz.fulltime.event.AbrirFacturaEvent;
			import biz.fulltime.event.FacturasGrabadasEvent;
			import biz.fulltime.event.FacturasPendientesEvent;
			import biz.fulltime.event.FilterEvent;
			import biz.fulltime.model.Cliente;
			import biz.fulltime.model.Comprobante;
			import biz.fulltime.model.Documento;
			import biz.fulltime.model.Moneda;
			import biz.fulltime.model.Usuario;
			import biz.fulltime.model.deudores.DocPendientesCliente;
			import biz.fulltime.ui.deudores.ListadoDeudoresCliente;
			import biz.fulltime.ui.forms.FrmFacturasGrabadas;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.CursorManager;
			import mx.managers.ISystemManager;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			
			import spark.components.TitleWindow;
			
			import util.CatalogoFactory;

			private static const DOCUMENTOS_POR_PAGINA:int = 20;

			[Bindable]
			private var _recibo:Documento;

			[Bindable]
			private var _pages:int = 0;

			[Bindable]
			private var _current:int = 1;

			private var _query:DocumentoQuery;

			private var remObj:RemoteObject;

			private var remObjQuery:RemoteObject;

			private var remObjCount:RemoteObject;

			private var _cargarRecibos:Boolean = false;
			
			[Bindable]
			private var recibos:ArrayCollection = new ArrayCollection();
			
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				_cargarRecibos = true; 				
				invalidateProperties();
			}

			public function init():void {
				remObj = new RemoteObject();
				remObj.destination = "CreatingRpc";
				remObj.channelSet = ServerConfig.getInstance().channelSet;
				remObj.showBusyCursor = true;
				remObj.addEventListener(ResultEvent.RESULT, result);
				remObj.addEventListener(FaultEvent.FAULT, onFault);

				remObjQuery = new RemoteObject();
				remObjQuery.destination = "CreatingRpc";
				remObjQuery.showBusyCursor = true;
				remObjQuery.channelSet = ServerConfig.getInstance().channelSet;
				remObjQuery.addEventListener(ResultEvent.RESULT, resultQuery);
				remObjQuery.addEventListener(FaultEvent.FAULT, onFault);

				remObjCount = new RemoteObject();
				remObjCount.destination = "CreatingRpc";
				remObjCount.showBusyCursor = true;
				remObjCount.channelSet = ServerConfig.getInstance().channelSet;
				remObjCount.addEventListener(ResultEvent.RESULT, resultCount);
				remObjCount.addEventListener(FaultEvent.FAULT, onFault);

			}

			private function closeHandler(event:Event):void {
				event.target.removeEventListener("close", closeHandler);
				PopUpManager.removePopUp(event.target as IFlexDisplayObject);
			}

			protected function cmdCancel_clickHandler(event:MouseEvent):void {
				dispatchEvent(new Event("_close_recibo"));
			}

			protected function dgRecibos_doubleClickHandler(event:MouseEvent):void {
				cargarRecibo();
			}

			protected function pnlRecibo_creationCompleteHandler(event:FlexEvent):void {
				pnlRecibo.addEventListener("_cancel_", cancel);
				pnlRecibo.addEventListener("_nuevo_recibo", nuevoDocumento);
				pnlRecibo.addEventListener("_saveF", nuevoDocumento);
			}

			private function cancel(evt:Event):void {
				viewStack.selectedIndex = 0;
			}

			private function nuevoDocumento(evt:Event):void {
				var oldComprobante:Comprobante = _recibo.comprobante;
				if (_recibo != null) {
					_recibo.removeEventListener("_changeCliente", obtenerDatosCliente);
				}
				_recibo = Documento.getNuevoDocumento(oldComprobante, true);
				_recibo.addEventListener("_changeCliente", obtenerDatosCliente);

				callLater(function():void {
					// Seleccionar la vista con la factura
					viewStack.selectedIndex = 2;
				});

			}

			
			protected function cmdNueva_clickHandler(event:MouseEvent):void {
				// Crear una nueva factura
				viewStack.selectedIndex = 1;

				callLater(function():void {
					tipoFactura.reset();
				});

			}

			protected function cmdEditar_clickHandler(event:MouseEvent):void {
				cargarRecibo();
			}

			/**
			 *  Al dar enter hacer lo mismo que al precionar el boton editar
			 */
			protected function dgRecibos_keyDownHandler(event:KeyboardEvent):void {
				// Editar una factura existente
				if (event.keyCode == Keyboard.ENTER) {
					cargarRecibo();
				} else if (event.keyCode == Keyboard.TAB) {
					event.preventDefault();
					cmdNueva.setFocus();
				}
			}
			
			public function abrirDocumento(docId:String):void {
				remObj.getDocumento(docId);
				
			}

			private function cargarRecibo():void {
				if (dgRecibos.selectedItem != null) {
					var _doc:DocumentoDTO = DocumentoDTO(dgRecibos.selectedItem);
					remObj.getDocumento(_doc.docId);
				}
			}
			

			protected function tipoFactura_creationCompleteHandler(event:FlexEvent):void {
				tipoFactura.addEventListener("next_step_", function():void {
					if (_recibo != null) {
						_recibo.removeEventListener("_changeCliente", obtenerDatosCliente);
					}

					var selectFacturaPnl:TipoFacturaPnl = event.target as TipoFacturaPnl;

					_recibo = Documento.getNuevoDocumento(Comprobante(selectFacturaPnl.tipoFactura));
					_recibo.addEventListener("_changeCliente", obtenerDatosCliente);

					callLater(function():void {
						viewStack.selectedIndex = 2;
					});
				});

				tipoFactura.addEventListener("previous_step_", function():void {
					viewStack.selectedIndex = 0;
				});

			}

			// Abrir una factura existente...
			private function result(event:ResultEvent):void {
				CursorManager.removeBusyCursor();
				
				if (_recibo != null) {
					_recibo.removeEventListener("_changeCliente", obtenerDatosCliente);
				}

				_recibo = event.result as Documento;
				
				// Cuando abro una factura nos fijamos si el cliente tiene facturas pendientes y/o limite de crÃ©dito excedido...
				if (_recibo.cliente) {
					_recibo.cliente.obtenerDocumentosPendientes();
				}

				viewStack.selectedIndex = 2;
			}
			
			private function obtenerDatosCliente(event:Event):void {
				var cliente:Cliente = _recibo.cliente;
			}

			private function queryDocumentos():void {
				_query.start = DOCUMENTOS_POR_PAGINA * (_current - 1);
				_query.limit = DOCUMENTOS_POR_PAGINA;
				_query.esRecibo = true;
				//_query.tieneSaldo = true;
				
				remObjQuery.queryDocumentos(_query);
			}
			
			private function resultQuery(event:ResultEvent):void {
				recibos = event.result as ArrayCollection;

				if (!dgRecibos) {
					return;
				}				
				callLater(function():void {
					if (dgRecibos.dataProvider.length > 0) {
						dgRecibos.setFocus();
						dgRecibos.selectedIndex = 0;
					}
				});

			}

			private function countDocumentos():void {
				_query.start = 0;
				_query.limit = DOCUMENTOS_POR_PAGINA;
				_query.esRecibo = true;
				//_query.tieneSaldo = true;
				
				remObjCount.countDocumentos(_query);
			}

			private function resultCount(event:ResultEvent):void {
				var count:Number = event.result as Number;
				_pages = count / DOCUMENTOS_POR_PAGINA;
				if (count % DOCUMENTOS_POR_PAGINA != 0) {
					_pages += 1;
				}
			}

			private function date_labelFunction(item:Object, column:GridColumn):String {
				var dateFormatter:DateFormatter = new DateFormatter();
				dateFormatter.formatString = "DD-MM-YYYY";

				return dateFormatter.format(item.fecha);
			}

			private function cliente_labelFunction(item:Object, column:GridColumn):String {
				return item.cliente.nombre;
			}

			private function moneda_labelFunction(item:Object, column:GridColumn):String {
				var moneda:String = item.moneda.codigo;
				var simbolo:String = "";
				for each (var m:Moneda in CatalogoFactory.getInstance().monedas) {
					if (m.codigo == moneda) {
						simbolo = m.simbolo;
						break;
					}
				}	
				return simbolo;
			}

			private function comprobante_labelFunction(item:Object, column:GridColumn):String {
				return item.comprobante.nombre;
			}

			private function comprobante_cod_labelFunction(item:Object, column:GridColumn):String {
				return item.comprobante.nombre;
			}

			private function pendiente_labelFunction(item:Object, column:GridColumn):String {
				return item.pendiente ? "NO" : "SI";
			}

			public function refrescar():void {
				if (remObjQuery) {
					_current = 1;
					queryDocumentos();
				}
				if (remObjCount) {
					_pages = 0;
					countDocumentos();
				}
			}

			protected function onAddedToStageHandler(event:Event):void {
				refrescar();
			}

			private function onFault(event:FaultEvent):void {
				Alert.show(event.fault.faultString, 'Error');
			}

			protected function pnlFilters_creationCompleteHandler(event:FlexEvent):void {
				pnlFilters.addEventListener(FilterEvent.FILTRAR_DOCUMENTOS, filtrarDocumentos);
				pnlFilters.addEventListener(FilterEvent.BORRAR_FILTROS, borrarFiltros);
			}

			private function filtrarDocumentos(event:FilterEvent):void {
				_query = event.docQuery as DocumentoQuery;

				_current = 1;

				_query.start = 0;
				_query.limit = DOCUMENTOS_POR_PAGINA;
				_query.esRecibo = true;
				//_query.tieneSaldo = true;

				remObjCount.countDocumentos(_query);
				remObjQuery.queryDocumentos(_query);
			}

			private function borrarFiltros(event:FilterEvent):void {
				_query = event.docQuery as DocumentoQuery;
				if (!_query) {
					_query = new DocumentoQuery();	
				}
				_query.start = 0;
				_query.limit = DOCUMENTOS_POR_PAGINA;
				_query.esRecibo = true;
				//_query.tieneSaldo = true;

				_current = 1;

				remObjCount.countDocumentos(_query);
				remObjQuery.queryDocumentos(_query);
			}
			

			//--------------------------------------------------------------------------
			//
			//  Overridden methods: UIComponent
			//
			//--------------------------------------------------------------------------

			/**us
			 *  @private
			 */
			override protected function commitProperties():void {
				super.commitProperties();

				if (_cargarRecibos) {
					_cargarRecibos = false;

					_query = new DocumentoQuery();
					_query.tieneSaldo = true;
					
					queryDocumentos();
					countDocumentos();
				}
			}
			
			protected function hasPerm():Boolean {
				if (GeneralOptions.getInstance().loggedUser.permisoId == Usuario.USUARIO_SUPERVISOR 
					|| GeneralOptions.getInstance().loggedUser.permisoId == Usuario.USUARIO_ADMINISTRADOR
					|| GeneralOptions.getInstance().loggedUser.permisoId == Usuario.USUARIO_FACTURACION) {
					
					return true;
				}
				
				return false;
			}
			
		]]>
	</fx:Script>

	<fx:Declarations>
		<s:ArrayList id="cols">
			<s:GridColumn width="85" dataField="fecha" headerText="FECHA" />
			<s:GridColumn width="240" dataField="comprobante" headerText="COMPROBANTE" labelFunction="comprobante_cod_labelFunction" />
			<s:GridColumn width="110" dataField="numero" headerText="SERIE Y NRO">
				<s:itemRenderer>
					<fx:Component>
						<s:DefaultGridItemRenderer textAlign="left">
							<fx:Script>
								<![CDATA[
									import biz.fulltime.dto.DocumentoDTO;
									override public function prepare(hasBeenRecycled:Boolean):void {
										if (data) {	
											var serie:String = DocumentoDTO(data).serie ? DocumentoDTO(data).serie : "";
											var numero:String = DocumentoDTO(data).numero ? DocumentoDTO(data).numero : "";
											
											label = serie + numero;
										}
										
									}
								]]>
							</fx:Script>
							
						</s:DefaultGridItemRenderer>
						
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
			<s:GridColumn dataField="cliente" headerText="CLIENTE" labelFunction="cliente_labelFunction"/>
			<s:GridColumn width="75" dataField="moneda" headerText="MONEDA" labelFunction="moneda_labelFunction" />
			<s:GridColumn width="100" dataField="total" headerText="TOTAL">
				<s:itemRenderer>
					<fx:Component>
						<s:DefaultGridItemRenderer textAlign="right">
							<fx:Script>
								<![CDATA[
									import biz.fulltime.dto.DocumentoDTO;
									
									import util.CatalogoFactory;
									
									override public function prepare(hasBeenRecycled:Boolean):void {
										if (data) {											
											if (DocumentoDTO(data).total) {
												label = outerDocument.nf_Espanol_Espanol.format(DocumentoDTO(data).total);
											} else {
												label = outerDocument.nf_Espanol_Espanol.format(0);
											}
										}
									}
								]]>
							</fx:Script>
						</s:DefaultGridItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
			<s:GridColumn width="100" dataField="saldo" headerText="PENDIENTE">
				<s:itemRenderer>
					<fx:Component>
						<s:DefaultGridItemRenderer textAlign="right">
							<fx:Script>
								<![CDATA[
									import biz.fulltime.dto.DocumentoDTO;
									
									import util.CatalogoFactory;
									
									override public function prepare(hasBeenRecycled:Boolean):void {
										if (data) {											
											if (DocumentoDTO(data).total) {
												label = outerDocument.nf_Espanol_Espanol.format(DocumentoDTO(data).saldo);
											} else {
												label = outerDocument.nf_Espanol_Espanol.format(0);
											}
										}
									}
								]]>
							</fx:Script>
						</s:DefaultGridItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>

			<s:GridColumn width="75" dataField="emitido" headerText="EMITIDO" >
				<s:itemRenderer>
					<fx:Component>
						<s:GridItemRenderer clipAndEnableScrolling="true">
							<fx:Script>
								<![CDATA[
									import biz.fulltime.dto.DocumentoDTO;
								]]>
							</fx:Script>
							<s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
								<s:CheckBox id="chbState" selected="{DocumentoDTO(data).emitido}" enabled="false"/>
							</s:HGroup>
						</s:GridItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:GridColumn>
		</s:ArrayList>
		
		<s:NumberFormatter id="nf_Espanol_Espanol" locale="es_ES" fractionalDigits="2"/>

	</fx:Declarations>


	<mx:ViewStack id="viewStack" width="100%" height="100%">
		<s:NavigatorContent show="onAddedToStageHandler(event)">
			<s:VGroup width="100%" height="100%" gap="0">
				<facturacion:FiltrosPnl id="pnlFilters" width="100%" creationComplete="pnlFilters_creationCompleteHandler(event)" modoRecibo="true"/>
				<s:Panel width="100%" height="100%" backgroundAlpha="0.0" title="Listado recibos">
					<s:VGroup width="100%" height="100%">
						<s:DataGrid id="dgRecibos" width="100%" height="100%"  doubleClick="dgRecibos_doubleClickHandler(event)" keyDown="dgRecibos_keyDownHandler(event)"
									dataProvider="{recibos}" sortableColumns="false" columns="{cols}" doubleClickEnabled="true" focusEnabled="true" >
						</s:DataGrid>

						<s:HGroup width="100%" horizontalAlign="center" verticalAlign="middle">
							<s:Button id="cmdFirst" width="32" height="24" cornerRadius="6" click="{_current=1; queryDocumentos()}" enabled="{_current&gt;1}"
												   styleName="firstButton" />
							<s:Button id="cmdPrevious" width="32" height="24" cornerRadius="6" click="{_current--; queryDocumentos()}" enabled="{_current&gt;1}"
												   styleName="previousButton" />
							<s:Label width="90" fontSize="16" paddingLeft="5" paddingRight="5" paddingTop="4" textAlign="center" verticalAlign="middle"
									 styleName="myLabel" text="{_current} de {_pages}"/>
							<s:Button id="cmdNext" width="32" height="24" cornerRadius="6" click="{_current++; queryDocumentos()}" enabled="{_current &lt; _pages}"
												   styleName="nextButton" />
							<s:Button id="cmdLast" width="32" height="24" cornerRadius="6" click="{_current = _pages; queryDocumentos()}"
												   enabled="{_current &lt; _pages}" styleName="lastButton" />
						</s:HGroup>
						<s:Spacer height="5" />

					</s:VGroup>

					<s:controlBarContent>
						<s:HGroup width="100%" horizontalAlign="right" paddingBottom="0" paddingTop="0" verticalAlign="middle">
							<mx:Image id="loader1" source="@Embed(source='assets/general/logo_oscuro.gif')" alpha=".5" scaleX=".25" scaleY=".25" />
							<s:Spacer width="100%" />
							
							<s:Button id="cmdNueva" click="cmdNueva_clickHandler(event)" styleName="nuevaButton" label="Nueva" focusEnabled="true"  toolTip="Crear una nueva factura" visible="{hasPerm()}"/>
							<s:Button id="cmdEditar" click="cmdEditar_clickHandler(event)" styleName="editarButton" label="Editar" focusEnabled="true" toolTip="Editar factura seleccionada"/>
						</s:HGroup>
					</s:controlBarContent>

				</s:Panel>
			</s:VGroup>
		</s:NavigatorContent>

		<s:NavigatorContent>
			<facturacion:TipoFacturaPnl id="tipoFactura" creationComplete="tipoFactura_creationCompleteHandler(event)" modoRecibo="true"/>
		</s:NavigatorContent>

		<s:NavigatorContent>
			<s:Group id="pnlDocumento" width="100%" height="100%">
				<recibos:RecibosPnl id="pnlRecibo" creationComplete="pnlRecibo_creationCompleteHandler(event)" recibo="{_recibo}" />
			</s:Group>
		</s:NavigatorContent>
		
	</mx:ViewStack>
</s:VGroup>
