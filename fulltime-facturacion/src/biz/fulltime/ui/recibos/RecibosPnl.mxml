<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:classes="com.hillelcoren.components.autoComplete.classes.*"
		 xmlns:componentes="componentes.*"
		 xmlns:components="biz.fulltime.ui.components.*"
		 xmlns:components1="components.*"
		 xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:loader="biz.fulltime.util.loader.*"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:recibocion="biz.fulltime.ui.recibocion.*"
		 xmlns:renderers="biz.fulltime.ui.renderers.*"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:util="biz.fulltime.util.*"
		 width="100%" height="100%" backgroundAlpha="0.85" backgroundColor="0xfafafa" creationComplete="onCreationComplete(event)" enabled="{!running}"
		 initialize="initializeHandler(event)">

	<fx:Script>
		<![CDATA[
			import biz.fulltime.conf.GeneralOptions;
			import biz.fulltime.conf.ServerConfig;
			import biz.fulltime.dto.DocumentoDTO;
			import biz.fulltime.dto.DocumentoQuery;
			import biz.fulltime.event.AbrirFacturaEvent;
			import biz.fulltime.event.ClienteEvent;
			import biz.fulltime.event.ListadoFacturasEvent;
			import biz.fulltime.model.Articulo;
			import biz.fulltime.model.Auditoria;
			import biz.fulltime.model.Cliente;
			import biz.fulltime.model.Comprobante;
			import biz.fulltime.model.CotizacionesModel;
			import biz.fulltime.model.CotizacionesMonedas;
			import biz.fulltime.model.Documento;
			import biz.fulltime.model.Iva;
			import biz.fulltime.model.LineaDocumento;
			import biz.fulltime.model.LineasDocumento;
			import biz.fulltime.model.Moneda;
			import biz.fulltime.model.SerieNumero;
			import biz.fulltime.model.Usuario;
			import biz.fulltime.model.VinculoDocumentos;
			import biz.fulltime.ui.components.HelpClientPnl;
			import biz.fulltime.ui.deudores.ListadoDeudoresCliente;
			import biz.fulltime.ui.documentosValores.FrmDocumentosValores;
			import biz.fulltime.ui.facturacion.FacturacionPnl;
			import biz.fulltime.ui.facturacion.FrmClaveSupervisora;
			import biz.fulltime.ui.forms.FrmLineasAuditoriaDoc;
			import biz.fulltime.ui.personas.ListadoFacturasPanel;
			
			import com.hillelcoren.components.AutoComplete;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.IFlexDisplayObject;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.events.CloseEvent;
			import mx.events.DropdownEvent;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.ISystemManager;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			
			import spark.components.TitleWindow;
			import spark.components.gridClasses.CellPosition;
			import spark.events.GridItemEditorEvent;
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			import spark.formatters.DateTimeFormatter;
			import spark.formatters.NumberFormatter;
			
			import util.CatalogoFactory;
			import util.DateUtil;
			import util.ErrorPanel;
			import util.Maths;

			private const WINDOW_WIDTH:Number = 640;
			
			private const WINDOW_HEIGHT:Number = 600;
			
			[Bindable]
			[Embed("/assets/general/exclamation.png")]
			public var mediaIcon:Class;

			[Bindable]
			[Embed(source="assets/general/Info.png")]
			public var iconSymbol:Class;

			[Bindable]
			public var serieReciboList:ArrayCollection = new ArrayCollection([
				{value:"C", label:"C"}, 
				{value:"A", label:"A"},
				{value:"P", label:"P"}
			]);

			
			private var _recibo:Documento;

			private var remObjSave:RemoteObject;

			private var remObjModify:RemoteObject;

			private var remObjBorrar:RemoteObject;

			private var remObjEmitir:RemoteObject;

			private var helpWindow:TitleWindow;

			private var _changeRecibo:Boolean;

			private var notas:String;

			private var error:ErrorPanel;

			[Bindable]
			private var _convirtiendo:Boolean = false;

			[Bindable]
			private var monedas:ArrayCollection = new ArrayCollection();

			[Bindable]
			private var running:Boolean = false;

			[Bindable]
			public var _modoVisualizacion:Boolean = false;

			[Bindable]
			public var tieneCambios:Boolean = false;

			[Bindable]
			public var tieneDescuentos:Boolean = false;

			[Bindable]
			public var tieneRF:Boolean = false;
			
			[Bindable]
			private var eMail:String;

			[Bindable]
			private var _usuarioAutorizante:String;

			[Bindable]
			private var tipoDoc:Object;

			[Bindable]
			private var saldoPendiente:BigDecimal = BigDecimal.ZERO;

			[Bindable]
			private var tieneVinculos:Boolean = false;

			[Bindable]
			private var monedasDistintas:Boolean = false;

			[Bindable]
			private var currentLine:VinculoDocumentos;

			private var creando_nuevo:Boolean = false; 

			private var cellPos:CellPosition;
			
			private var addVinculosEnabled:Boolean = false;
			
			private var remFacturasCliente:RemoteObject;
			
			private var map:Dictionary = new Dictionary();
			
			[Bindable]
			private var serieSelected:Object;
			
			[Bindable]
			public var isAster:Boolean = false; 

			private var fireEvents:Boolean = false;
			
			
			
			protected function initializeHandler(event:FlexEvent):void {
				// Guardar Documento
				remObjSave = getNewRemoteObject();
				remObjSave.addEventListener(ResultEvent.RESULT, resultSave);

				// Modificar Documento
				remObjModify = getNewRemoteObject();
				remObjModify.addEventListener(ResultEvent.RESULT, resultModify);

				// Borrar Documento
				remObjBorrar = getNewRemoteObject();
				remObjBorrar.addEventListener(ResultEvent.RESULT, resultBorrar);

				// Emitir Documento
				remObjEmitir = getNewRemoteObject();
				remObjEmitir.addEventListener(ResultEvent.RESULT, resultEmitir);

			}

			protected function cargarMonedas():void {
				monedas = new ArrayCollection();
				if (!isAster) { // Si es oficial el comprobante.
					for each (var m1:Moneda in CatalogoFactory.getInstance().monedas) {
						if (m1.nombre.indexOf("*") <= 0) {
							monedas.addItem(m1);
						}
					}
				} else {
					for each (var mda:Moneda in CatalogoFactory.getInstance().monedas) {
						if (mda.nombre.indexOf("*") > 0) {
							monedas.addItem(mda);
						}
					}
				}				
			}
			
			protected function onCreationComplete(event:FlexEvent):void {
				txtNumero.setFocus();

				if (CatalogoFactory.getInstance().parametrosAdministracion.parAdmFechaTrabado) {
					txtDate.disabledRanges = [{rangeEnd:CatalogoFactory.getInstance().parametrosAdministracion.parAdmFechaTrabado}];
				}
			}

			override protected function commitProperties():void {
				super.commitProperties();
				
				title = (tieneCambios ? "[*]" : "") + _recibo.comprobante.nombre.toUpperCase()

				if (_changeRecibo) {
					fireEvents = false;
					
					_changeRecibo = false;
					
					isAster = _recibo.comprobante.aster;
					
					tieneRF = _recibo.serie && _recibo.serie != "A" && _recibo.serie != "P";
					
					if (!_recibo.docRecNeto) {
						_recibo.docRecNeto = _recibo.total;
					}
					if (cmbMoney) {
						cmbMoney.clear();
					}

					// Si el comprobante no es aster, no mostrar las monedas aster. 
					cargarMonedas();
					
					if (!_recibo.docRecMda) {
						_recibo.docRecMda = _recibo.moneda;
					}

					_convirtiendo = false;

					// Setear el estado de la recibo
					this.currentState = "default";
					
					if (pnlFacturasVinculadas) {
						pnlFacturasVinculadas.enabled = _recibo.docId != null;
					}
					
					saldoPendiente = new BigDecimal(recibo.saldo);
					tieneVinculos = _recibo.tieneFaturasVincululadas();
					
					if (tieneVinculos) {
						var vinculo:VinculoDocumentos = _recibo.facturasVinculadas.getItemAt(0) as VinculoDocumentos;
						var doc:Documento = vinculo.factura;
						_recibo.moneda = doc.moneda;
						
						var facturasVinculadas:ArrayCollection = _recibo.facturasVinculadas;
						for each (var vin:VinculoDocumentos in facturasVinculadas) {
							var dscto:BigDecimal = vin.descuentoPorc ? new BigDecimal(vin.descuentoPorc) : BigDecimal.ZERO;
							var monto:BigDecimal = vin.monto ? new BigDecimal(vin.monto) : BigDecimal.ZERO;
							var neto:BigDecimal = vin.neto ? new BigDecimal(vin.neto) : null;
							
							if (!neto) {
								if (isAster) {
									neto = Maths.ONE_HUNDRED.subtract(dscto).multiply(monto).divideScaleRound(Maths.ONE_HUNDRED, 4, MathContext.ROUND_HALF_EVEN);
								}  else {
									neto = monto != null ? monto : BigDecimal.ZERO;
								}
							}
							
							vin.factura.saldo = new BigDecimal(vin.factura.saldo).setScale(4, MathContext.ROUND_HALF_EVEN).toString();
							
							if (!recibo.emitido) {						
								if (isAster) {
									vin.neto = neto.toString();
									vin.monto = monto.toString();
									if (vin.nuevo) {
										vin.factura.saldo = new BigDecimal(vin.factura.saldo).add(new BigDecimal(vin.monto)).setScale(4, MathContext.ROUND_HALF_EVEN).toString();
									} 
								} else {
									vin.neto = neto.toString();
									if (vin.nuevo) {
										vin.factura.saldo = new BigDecimal(vin.factura.saldo).add(new BigDecimal(vin.neto)).setScale(4, MathContext.ROUND_HALF_EVEN).toString();
									}									
								}
							} 
							
							if (isAster) {
								// Calcular el monto de descuento.
								var montoDto:BigDecimal = BigDecimal.ZERO;
								if ((Maths.ONE_HUNDRED.subtract(dscto.setScale(2, MathContext.ROUND_HALF_EVEN))).compareTo(BigDecimal.ZERO) != 0) { 
									montoDto = monto.multiply(dscto.setScale(2, MathContext.ROUND_HALF_EVEN)).divideScaleRound(Maths.ONE_HUNDRED, 2, MathContext.ROUND_HALF_EVEN);
								}
								vin.descuentoMonto = montoDto.toString();							
								
							} else {
								// Calcular el monto cancelado.
								vin.monto = vin.calcularMontoCancelado(dscto, null, neto, false).setScale(4, MathContext.ROUND_HALF_EVEN).toString();
								
								// Calcular el monto de descuento.
								vin.descuentoMonto = vin.calcularMontoDescuento(null, dscto, neto, isAster).setScale(4, MathContext.ROUND_HALF_EVEN).toString();
								
							}
						}						
						
						var netoTotal:BigDecimal = getNetoTotal();
						var montoTotal:BigDecimal = getMontoTotal();
						var desctoTotal:BigDecimal = getDescuentoTotal();
						var rentaTotal:BigDecimal = getRentaTotal();
						
						actualizarTotales(netoTotal, montoTotal, desctoTotal, rentaTotal);
					} 
					
					// Ponerle el título del recibo					
					title = _recibo.comprobante.nombre.toUpperCase();

					// Actualizar campo de cotizacion comercial.
					if (!_recibo.docTCC || new BigDecimal(_recibo.docTCC).compareTo(BigDecimal.ZERO) <= 0) {
						if (CatalogoFactory.getInstance().ultimaCotizacion) {
							_recibo.docTCC = new BigDecimal(CatalogoFactory.getInstance().ultimaCotizacion.toString()).setScale(4, MathContext.ROUND_HALF_EVEN).toString();
						} else {
							obtenerTipoCambio();
						}
					} else {
						_recibo.docTCC = new BigDecimal(_recibo.docTCC).setScale(4, MathContext.ROUND_HALF_EVEN).toString();
					}
					
					if (_recibo.docId != null) {
						callLater(function():void {
							obtenerFacturas("ASC");
							if (_recibo.facturasVinculadas.length < 1) {
								agregarVinculoVacio();	
							}
						});
					}

					// Los vendedores (junior, distribuidor, senior) solo pueden editar documentos que ellos crearon (Documento.usuarioId). 
					// Si no son creadores, entonces el documento aparece para solo lectura. 
					// Administradores y Supervisores pueden editar cualquier cosa.
					if (hasPerm()) {
						if (_recibo.nuevo) {
							_modoVisualizacion = false;
						} else {
							if (CatalogoFactory.getInstance().parametrosAdministracion.parAdmFechaTrabado && (DateUtil.compareDates(_recibo.fechaDoc, CatalogoFactory.getInstance().parametrosAdministracion.parAdmFechaTrabado) == -1)) {
								_modoVisualizacion = true;
							} else {
								_modoVisualizacion = !_recibo.permisosDocumentoUsuario.edicion;
							}
						}
					} else {
						_modoVisualizacion = true;
					}

					if (_recibo && _recibo.cliente) {
						_recibo.getDepartamento();
					}
					
					
					serieReciboList.removeAll();
					if (_recibo.comprobante.codigo != "32") { 
						serieReciboList.addItem({value:"C", label:"C"});
					}
					if (!isAster || _recibo.comprobante.codigo == "32") {
						serieReciboList.addItem({value:"A", label:"A"});
					}
					serieReciboList.addItem({value:"P", label:"P"});

					callLater(function():void {
						tieneCambios = false;
						
						serieSelected = serieReciboList.getItemAt(0);
						if (!_recibo.docId) { // Recibo nuevo
							if (txtNumero) {
								txtNumero.setFocus();
							}
							_recibo.serie = serieSelected.value;

						} else {
							if (dgVinculos && dgVinculos.dataProvider.length > 0) {
								dgVinculos.setFocus();
								dgVinculos.setSelectedCell(0, 0);	
							}
							if (!_recibo.serie) {
								_recibo.serie = serieSelected.value;
							}
							for each (var o:Object in serieReciboList)  {
								if (o.value == recibo.serie) {
									serieSelected = o;
								}
							}
						}						
					});
					
					fireEvents = true;
				}
				
				// Verificar monedas
				if (recibo.docRecMda && recibo.moneda) {					
					monedasDistintas = recibo.docRecMda.codigo != recibo.moneda.codigo;
				} else {
					monedasDistintas = false;
				}
				
			}

			private function resultModify(event:ResultEvent):void {
				if (creando_nuevo) {
					creando_nuevo = false;
					tieneCambios = false;
					running = false;
					
				} else {
					resultGuardarRecibo(event);
				}
				
			}

			protected function cmdGuardar_clickHandler(event:MouseEvent, close:Boolean = false):void {
				
				var alert:Alert;
				if (!_recibo.numero || recibo.numero.length == 0) {
					alert = Alert.show("El número no puede ser vacio.", "Error");
					alert.width = 400;
					alert.height = 200;
					
					txtNumero.setFocus();
					txtNumero.selectAll();
					return;
				}
				if (!_recibo.cliente) {
					alert = Alert.show("Debe seleccionar cliente.", "Error");
					alert.width = 400;
					alert.height = 200;
					
					cmbClient.setFocus();
					return;
				}
				
				var monto:String = "";
				try {
					var valor:BigDecimal = new BigDecimal(_recibo.docRecNeto);
					if (valor.compareTo(BigDecimal.ZERO) <= 0) {
						_recibo.docRecNeto = "";
					} else {
						_recibo.docRecNeto = valor.setScale(2).toString();
					}
					monto = _recibo.docRecNeto;
					
				} catch (error:Error) {
					_recibo.docRecNeto = "";
				}
				
				if (monto.length == 0) {
					alert = Alert.show("El monto debe ser mayor a cero.", "Error");
					alert.width = 400;
					alert.height = 200;
					
					txtTotal.setFocus();
					return;
				}

				
				guardarRecibo();
				
			}
			
			private function grabarFacturaOk(close:Boolean = false):void {
				// Guardar la recibo.
				var remObj:RemoteObject = getNewRemoteObject(true);

				if (close) {
					remObj.addEventListener(ResultEvent.RESULT, function(evt:ResultEvent):void {
						tieneCambios = false;
						running = false;

						error = new ErrorPanel();
						error.cornerRadius = 10;
						error.backgroundAlpha = .95;
						error.showButtons = false;
						error.type = 2;
						
						error.errorText = "El recibo ha sido GUARDADO.";
						
						PopUpManager.addPopUp(error, this, true);
						PopUpManager.centerPopUp(error);
						
						invalidateProperties();
						
						setTimeout(function():void {
							PopUpManager.removePopUp(error);
						}, 1500);
						
						dispatchEvent(new Event("_cancel_", true, true));	
					});
					
				} else {
					remObj.addEventListener(ResultEvent.RESULT, resultGuardarRecibo);
				}
				remObj.guardarDocumento(_recibo);

			}

			private function resultGuardarRecibo(event:ResultEvent):void {
				recibo = event.result as Documento;
				
				error = new ErrorPanel();
				error.cornerRadius = 10;
				error.backgroundAlpha = .95;
				error.showButtons = false;
				error.type = 2;

				error.errorText = "El recibo ha sido GUARDADO.";

				PopUpManager.addPopUp(error, this, true);
				PopUpManager.centerPopUp(error);

				tieneCambios = false;
				running = false;
				invalidateProperties();

				setTimeout(function():void {
						PopUpManager.removePopUp(error);
					}, 1500);
			}

			private function reloadDocumento(docId:String):void {
				var remObj:RemoteObject = getNewRemoteObject();
				remObj.addEventListener(ResultEvent.RESULT, function(evt:ResultEvent):void {
					recibo = evt.result as Documento;
				});
				remObj.getDocumento(docId);
			}

			private function obtenerClaveSupervisora(result:Function):void {
				if (helpWindow == null) {
					helpWindow = new TitleWindow();
					helpWindow.title = "Ingrese clave supervisora";
					helpWindow.width = 400;
					helpWindow.height = 220;

					var frmClaveSup:FrmClaveSupervisora = new FrmClaveSupervisora();

					PopUpManager.addPopUp(helpWindow, this, true);
					PopUpManager.centerPopUp(helpWindow);

					helpWindow.addEventListener(CloseEvent.CLOSE, cs_closeHandler);
					frmClaveSup.addEventListener(CloseEvent.CLOSE, cs_closeHandler);
					frmClaveSup.addEventListener("_claveSupOK", result);
					helpWindow.addElement(frmClaveSup);
				}
			}

			
			public function clear():void {
				if (cmbClient) {
					cmbClient.clear();
				}
			}

			[Bindable]
			public function get recibo():Documento {
				return _recibo;
			}

			public function set recibo(value:Documento):void {
				fireEvents = false;
				
				clear();

				if (_recibo) {
					_recibo.removeEventListener(PropertyChangeEvent.PROPERTY_CHANGE, changePropertyDoc);
				}
				_recibo = value;

				if (!_recibo.facturasVinculadas) {
					_recibo.facturasVinculadas = new ArrayCollection();
				}
				
				_recibo.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, changePropertyDoc);

				_changeRecibo = true;
				dispatchEvent(new Event("_changeDocumento"));
				invalidateProperties();
				
				currentState = "default";
				
				running = false;
				tieneCambios = false;
				fireEvents = true;
			}

			public function changePropertyDoc(evt:PropertyChangeEvent):void {
				if (fireEvents) {					
					if (evt.property != "descuentos" && evt.property != "descuentosPorc" && evt.property != "departamento") {
						tieneCambios = true;
					}
				}
			}

			private function resultSerieNumero(event:ResultEvent):void {
				var serie:SerieNumero = event.result as SerieNumero;
				if (serie) {
					_recibo.serie = serie.serie;
					_recibo.numero = serie.numero;
				}
			}

			private function capture_keyDownHandlerCliente(event:KeyboardEvent):void {
				if (event.keyCode == Keyboard.F1) {
					cmbClient_helpFTHandler();
				}
			}

			//
			// Seleccion de Cliente
			// 
			protected function cmbClient_helpFTHandler(event:Event = null):void {
				if (helpWindow == null) {
					helpWindow = new TitleWindow();
					helpWindow.title = "Clientes";
					helpWindow.width = 840;
					helpWindow.height = 620;

					var hlpPanel:HelpClientPnl = new HelpClientPnl();

					PopUpManager.addPopUp(helpWindow, this, true);
					PopUpManager.centerPopUp(helpWindow);

					helpWindow.addEventListener(CloseEvent.CLOSE, cliente_closeHandler);
					hlpPanel.addEventListener(CloseEvent.CLOSE, cliente_closeHandler);
					hlpPanel.addEventListener(ClienteEvent.CLIENTE_SELECCIONADO, clienteSeleccionado);

					helpWindow.addElement(hlpPanel);
				}
			}

			private function clienteSeleccionado(event:ClienteEvent):void {
				helpWindow.removeEventListener(CloseEvent.CLOSE, cliente_closeHandler);
				PopUpManager.removePopUp(helpWindow as IFlexDisplayObject);

				var cliente:Cliente = event.cliente;
				cmbClient.selectedItem = cliente;

				//
				// Cargar datos del Cliente.
				//
				if (cliente != null) {
					_recibo.tomarCamposDelCliente(cliente.codigo);
				}
				helpWindow = null;

				callLater(function():void {
					cmbClient.setFocus();
				});
			}

			private function cliente_closeHandler(event:Event):void {
				helpWindow.removeEventListener(CloseEvent.CLOSE, cliente_closeHandler);
				PopUpManager.removePopUp(helpWindow as IFlexDisplayObject);
				helpWindow = null;

				callLater(function():void {
					cmbClient.setFocus();
				});
			}

			private function confirm_closeHandler(event:Event):void {
				helpWindow.removeEventListener(CloseEvent.CLOSE, confirm_closeHandler);
				PopUpManager.removePopUp(helpWindow as IFlexDisplayObject);
				helpWindow = null;
			}

			private function guardarRecibo(auditoria:Auditoria = null):void {
				tieneCambios = false;
				running = true;

				_recibo.planPagos = null;
				_recibo.cuotasDocumento.cuotas = new ArrayCollection();
				_recibo.lineas.lineas = new ArrayCollection();
				
				// Agregar línea en tabla de pagos
				if (_recibo.docId) {
					_recibo.establecerFormaPago();				
				}				
				if (!_recibo.saldo) {
					_recibo.saldo = _recibo.docRecNeto;
				}
				
				var aux:ArrayCollection = new ArrayCollection();
				var facturasVinculadas:ArrayCollection = _recibo.facturasVinculadas;
				for each (var vinculo:VinculoDocumentos in facturasVinculadas) {
					if (vinculo.docIdVin1 && vinculo.docIdVin2) {
						if (!isAster) {
							vinculo.monto = vinculo.neto;	
						}
						aux.addItem(vinculo);
					}
				}
				_recibo.facturasVinculadas = aux;

				// Guardar errores para auditoría
				if (_recibo.nuevo) {
					remObjSave.altaRecibo(_recibo, auditoria);
				} else {
					remObjModify.modificar(_recibo, auditoria);
				}
				
				invalidateProperties();

			}

			private function closeHandler(event:Event):void {
				var ttlWnd:TitleWindow = event.target as TitleWindow;
				ttlWnd.removeEventListener(CloseEvent.CLOSE, closeHandler);
				PopUpManager.removePopUp(ttlWnd as IFlexDisplayObject);
			}

			private function resultSave(event:ResultEvent):void {
				var result:Documento = event.result as Documento;
				if (!recibo) {
					Alert.show("No se grabó correctamente el recibo", "Error");
					return;
				}
				error = new ErrorPanel();
				error.cornerRadius = 10;
				error.backgroundAlpha = .95;
				error.showButtons = false;
				error.type = 2;

				error.errorText = "RECIBO GUARDADO.";

				PopUpManager.addPopUp(error, this, true);
				PopUpManager.centerPopUp(error);

				setTimeout(function():void {
						PopUpManager.removePopUp(error);
					}, 1500);

				recibo = result;				
				recibo.nuevo = false;
				tieneCambios = false;
				running = false;
			}

			protected function cmdCancel_clickHandler(event:MouseEvent):void {
				if (tieneCambios && _recibo.permisosDocumentoUsuario.edicion && !_modoVisualizacion) {
					var alert:Alert = Alert.show("El recibo ha sido modificado.\n¿Desea guardar los cambios?", 
						"Guardar", Alert.YES + Alert.NO + Alert.CANCEL, null, confirmCloseHandler, iconSymbol);
					alert.width = 400;
					alert.height = 200;
				} else {
					dispatchEvent(new Event("_cancel_", true, true));
				}
			}

			protected function confirmCloseHandler(eventObj:CloseEvent):void {
				if (eventObj.detail == Alert.YES) {
					grabarFacturaOk(true);
				} else if (eventObj.detail == Alert.NO) {
					tieneCambios = false; // Se perderan los cambios
					invalidateProperties();
					dispatchEvent(new Event("_cancel_", true, true));
				}
			}

			public function codigoNombreLabelFunction(item:Object):String {
				var label:String = "";
				if (item && item.hasOwnProperty("codigo")) {
					label = item.codigo;
				}
				if (item && item.hasOwnProperty("nombre")) {
					label += " - " + item.nombre;
				}
				
				return label.toUpperCase();
			}

			public function clienteLabelFunction(item:Object):String {
				var client:Cliente = item as Cliente;

				var label:String;
				if (item && item.hasOwnProperty("codigo")) {
					label = item.codigo;
				}
				if (item && item.hasOwnProperty("nombre")) {
					label += " - " + item.nombre;
				}
				if (client && client.razonSocial != client.nombre) {
					label += " [" + client.razonSocial + "] ";
				}
				return label;
			}

			protected function cmbClient_changeHandler(event:Event):void {
				var cliente:Cliente = cmbClient.selectedItem;

				// Datos que vienen del cliente
				if (cliente && _recibo) {
					_recibo.tomarCamposDelCliente(cliente.codigo);
				}
			}

			private function cs_closeHandler(event:Event):void {
				helpWindow.removeEventListener(CloseEvent.CLOSE, cs_closeHandler);
				PopUpManager.removePopUp(helpWindow as IFlexDisplayObject);
				helpWindow = null;
			}

			private function resultBorrar(event:ResultEvent):void {
				dispatchEvent(new Event("_cancel_"));
			}

			protected function txtComments_keyDownHandler(event:KeyboardEvent):void {
				tieneCambios = true;
				invalidateProperties();
			}

			protected function cmdBorrar_clickHandler(event:MouseEvent):void {
				var alert:Alert = Alert.show("¿Esta seguro de BORRAR el recibo?", "Borrar recibo", 
					Alert.YES | Alert.NO, this, alertBorrarClickHandler, mediaIcon);
				alert.width = 400;
				alert.height = 200;
			}

			// Event handler function for displaying the selected Alert button.
			private function alertBorrarClickHandler(evt:CloseEvent):void {
				if (evt.detail == Alert.YES) {
					remObjBorrar.baja(_recibo);
				}
			}

			protected function cmdNuevo_clickHandler(event:MouseEvent):void {
				creando_nuevo = true;
				
				var t:BigDecimal = new BigDecimal(_recibo.docRecNeto);
				if (_recibo.cliente != null && t.compareTo(BigDecimal.ZERO) > 0) {
					guardarRecibo();
				} 
				dispatchEvent(new Event("_nuevo_recibo"));
			}

			private function obtenerTipoCambio():void {
				var remObjCotizaciones:RemoteObject = getNewRemoteObject();
				remObjCotizaciones.addEventListener(ResultEvent.RESULT, resultCotizaciones);
				remObjCotizaciones.getCotizacionHoy();
			}

			private function resultCotizaciones(event:ResultEvent):void {
				var result:CotizacionesMonedas = event.result as CotizacionesMonedas;

				var dolarCompra:BigDecimal = new BigDecimal(result.dolarCompra);
				var dolarVenta:BigDecimal = new BigDecimal(result.dolarVenta);
				var euroCompra:BigDecimal = new BigDecimal(result.euroCompra);
				var euroVenta:BigDecimal = new BigDecimal(result.euroVenta);

				var formatter:DateFormatter = new DateFormatter();
				formatter.formatString = 'DD-MM-YYYY';

				var _cotizaciones:XML =
					<cotizaciones>
						<fecha/>
						<dolarCompra value="0.0"/>
						<dolarVenta value="0.0"/>
						<euroCompra value="0.0"/>
						<euroVenta value="0.0"/>
						<euroCompraXDolar value="0.0"/>
						<euroVentaXDolar value="0.0"/>
					</cotizaciones>
					;

				_cotizaciones.fecha.@value = formatter.format(result.dia);
				_cotizaciones.dolarCompra.@value = dolarCompra.setScale(2, MathContext.ROUND_HALF_EVEN).toString();
				_cotizaciones.dolarVenta.@value = dolarVenta.setScale(2, MathContext.ROUND_UP).toString();
				_cotizaciones.euroCompra.@value = euroCompra.setScale(2, MathContext.ROUND_HALF_EVEN).toString();
				_cotizaciones.euroVenta.@value = euroVenta.setScale(2, MathContext.ROUND_UP).toString();
				_cotizaciones.euroCompraXDolar.@value = euroCompra.divideScaleRound(dolarCompra, 2, MathContext.ROUND_HALF_EVEN).toString();
				_cotizaciones.euroVentaXDolar.@value = euroVenta.divideScaleRound(dolarVenta, 2, MathContext.ROUND_UP).toString();

				CotizacionesModel.getInstance().cotizaciones = _cotizaciones;

				if (_recibo) {
					fireEvents = false;
					_recibo.docTCC = _cotizaciones.dolarVenta.@value;
					fireEvents = true;
				}
			}

			protected function txtRUT_changeHandler(event:TextOperationEvent):void {
				var value:String = txtRUT.text;
				if (value.length == 0 || value.length >= 12) {
					rut_stringValidator.validate();
				}
			}

			protected function cmdAgregar_clickHandler(event:MouseEvent = null):void {
				var cliente:Cliente = recibo.cliente;

				if (!cliente) {
					var alert:Alert = Alert.show("Cliente inexistente.", "Error");
					alert.width = 400;
					alert.height = 200;
					return;
				}
				var facPendWindow:TitleWindow = new TitleWindow();
				facPendWindow.title = "Facturas: " + cliente.nombre;
				facPendWindow.width = 920;
				facPendWindow.height = 640;
				facPendWindow.addEventListener(CloseEvent.CLOSE, function(event:CloseEvent):void {
						PopUpManager.removePopUp(facPendWindow as IFlexDisplayObject);
						facPendWindow = null;
					});

				var frmFacturas:ListadoFacturasPanel = new ListadoFacturasPanel();
				frmFacturas.filtros = recibo.facturasVinculadas;
				frmFacturas.cliente = cliente;
				frmFacturas.seleccionMultiple = true;
				frmFacturas.moneda = cmbMonedaVinculos.selectedItem as Moneda;
				frmFacturas.showCliente = false;
				frmFacturas.hasSaldoPendiente = true;
				frmFacturas.documentos = new ArrayCollection();
				
				var comprobantes:String = "2,4,5,6,7,8,9,19,20,22,98"; 
				if (isAster) { // RECIBOS ASTER
					if (recibo.serie == "C") {
						comprobantes = "4";
					}  
				} else { // RECIBOS OFICIALES
					if (recibo.serie == "A") {
						comprobantes = "7";
					} else if(recibo.serie == "C") {
						comprobantes = "9";
					} 
				}
				frmFacturas.obtenerFacturasVinculadas("ASC", comprobantes);

				PopUpManager.addPopUp(facPendWindow, Sprite(FlexGlobals.topLevelApplication), true);
				PopUpManager.centerPopUp(facPendWindow);

				frmFacturas.addEventListener(CloseEvent.CLOSE, function(evt:CloseEvent):void {
						PopUpManager.removePopUp(facPendWindow as IFlexDisplayObject);
						facPendWindow = null;
					});
				
				frmFacturas.addEventListener(ListadoFacturasEvent.FACTURAS_SELECTED, function(event:ListadoFacturasEvent):void {
					var facturas:Vector.<Object> = event.facturas as Vector.<Object>;
					
					for each (var doc:Object in facturas) {
						var factura:DocumentoDTO = doc as DocumentoDTO;
						
						if (factura != null) {
							var remObj:RemoteObject = getNewRemoteObject();
							remObj.addEventListener(ResultEvent.RESULT, function(evt:ResultEvent):void {
								var doc:Documento = evt.result as Documento;
								
								var vinculo:VinculoDocumentos = null;
								if (!event) {
									var rowIndex:int = dgVinculos.selectedCell.rowIndex;
									vinculo = (VinculoDocumentos) (recibo.facturasVinculadas.getItemAt(rowIndex)); 
									
									var ajusteS:BigDecimal;
									ajusteS = vinculo.neto && vinculo.neto.length > 0 ? new BigDecimal(vinculo.neto) : BigDecimal.ZERO;
									ajusteS = recibo.convertirMoneda(recibo.moneda, recibo.docRecMda, ajusteS);
									saldoPendiente = saldoPendiente.add(ajusteS);
								}
								
								vinculo = agregarVinculo(doc);
								
								running = false;
								currentState = "default";
								
								if (event) {
									var toRemove:ArrayCollection = new ArrayCollection();
									for each (var vinculo1:VinculoDocumentos in recibo.facturasVinculadas) {
										if (!vinculo1.factura.numero) {
											toRemove.addItem(vinculo1);
										}
									}
									for each (var vRemove:VinculoDocumentos in toRemove) {
										recibo.facturasVinculadas.removeItemAt(recibo.facturasVinculadas.getItemIndex(vRemove));
									}
									recibo.facturasVinculadas.addItem(vinculo);
								}
								updateTotalFacturasVinculadas();
								
								callLater(function():void {
									if (dgVinculos && dgVinculos.dataProvider.length > 0) {
										dgVinculos.setFocus();
										
										if (event) {
											dgVinculos.setSelectedCell(recibo.facturasVinculadas.length-1, 0);	
										}
									}
								});
							});
							remObj.getDocumento(factura.docId);
						}
					}

					PopUpManager.removePopUp(facPendWindow as IFlexDisplayObject);
					facPendWindow = null;
				}); 
					
				frmFacturas.addEventListener("facturaSeleccionada", function(evt:Event):void {
						var factura:DocumentoDTO = frmFacturas.selectedItem as DocumentoDTO;
						if (factura != null) {
							var remObj:RemoteObject = getNewRemoteObject();
							remObj.addEventListener(ResultEvent.RESULT, function(evt:ResultEvent):void {
									var doc:Documento = evt.result as Documento;

									var vinculo:VinculoDocumentos = null;
									if (!event) {
										var rowIndex:int = dgVinculos.selectedCell.rowIndex;
										vinculo = (VinculoDocumentos) (recibo.facturasVinculadas.getItemAt(rowIndex)); 
										
										var ajusteS:BigDecimal;
										if (isAster) {
											ajusteS = vinculo.neto && vinculo.neto.length > 0 ? new BigDecimal(vinculo.neto) : BigDecimal.ZERO;
										} else {
											ajusteS = vinculo.monto && vinculo.monto.length > 0 ? new BigDecimal(vinculo.monto) : BigDecimal.ZERO;
										}
										ajusteS = recibo.convertirMoneda(recibo.moneda, recibo.docRecMda, ajusteS);
										saldoPendiente = saldoPendiente.add(ajusteS);
									} 
									
									vinculo = agregarVinculo(doc);
									
									running = false;
									currentState = "default";
									
									if (event) {
										var toRemove:ArrayCollection = new ArrayCollection();
										for each (var vinculo1:VinculoDocumentos in recibo.facturasVinculadas) {
											if (!vinculo1.factura.numero) {
												toRemove.addItem(vinculo1);
											}
										}
										for each (var vRemove:VinculoDocumentos in toRemove) {
											recibo.facturasVinculadas.removeItemAt(recibo.facturasVinculadas.getItemIndex(vRemove));
										}
										recibo.facturasVinculadas.addItem(vinculo);
									}
									updateTotalFacturasVinculadas();

									callLater(function():void {
										if (dgVinculos && dgVinculos.dataProvider.length > 0) {
											dgVinculos.setFocus();
											
											if (event) {
												dgVinculos.setSelectedCell(recibo.facturasVinculadas.length-1, 0);	
											}
										}
									});
									
								});
							remObj.getDocumento(factura.docId);
						}

						PopUpManager.removePopUp(facPendWindow as IFlexDisplayObject);
						facPendWindow = null;

					});

				facPendWindow.addElement(frmFacturas);

				facPendWindow.closeButton.visible = true;

			}

			protected function dgVinculos_creationCompleteHandler(event:FlexEvent):void {
				callLater(function():void {
					if (!_recibo.docId) {
						if (txtNumero) {
							txtNumero.setFocus();
						}
					} else {
						if (dgVinculos && dgVinculos.dataProvider.length > 0) {
							dgVinculos.setFocus();
							dgVinculos.setSelectedCell(0, 0);	
						}
					}
				});
			}

			protected function dgVinculos_gridItemEditorSessionSaveHandler(event:GridItemEditorEvent):void {
				var vinculo:VinculoDocumentos = recibo.facturasVinculadas.getItemAt(event.rowIndex) as VinculoDocumentos;
				var monto:BigDecimal = (vinculo.monto && vinculo.monto.length > 0) ? new BigDecimal(vinculo.monto) : BigDecimal.ZERO;
				var neto:BigDecimal = (vinculo.neto && vinculo.neto.length > 0) ? new BigDecimal(vinculo.neto) : BigDecimal.ZERO;

				var dataField:String = event.column.dataField;
								
				if (event.columnIndex == 0) {
					var serie:String = vinculo.factura.serie;
					var numero:String = vinculo.factura.numero;

					saldoPendiente = saldoPendiente.add(monto);

					var serieNumero:String = (serie != null ? serie : "") + (numero != null ? numero : "");
					
					var cociente:BigDecimal;
					var neto_:String;
					
					var factura:DocumentoDTO = map[serieNumero];
					if (factura) {
						var remObj:RemoteObject = getNewRemoteObject();
						remObj.addEventListener(ResultEvent.RESULT, function(evt:ResultEvent):void {
							var doc:Documento = evt.result as Documento;
							
							var vinculo:VinculoDocumentos = new VinculoDocumentos();
							if (!event) {
								var rowIndex:int = dgVinculos.selectedCell.rowIndex;
								vinculo = (VinculoDocumentos) (recibo.facturasVinculadas.getItemAt(rowIndex)); 
								
								var monto:BigDecimal;
								if (isAster) {
									monto = vinculo.neto && vinculo.neto.length > 0 ? new BigDecimal(vinculo.neto) : BigDecimal.ZERO;
								} else {
									monto = vinculo.monto && vinculo.monto.length > 0 ? new BigDecimal(vinculo.monto) : BigDecimal.ZERO;
								}
								monto = recibo.convertirMoneda(recibo.moneda, recibo.docRecMda, monto);
								saldoPendiente = saldoPendiente.add(monto);
							} 
							
							vinculo = agregarVinculo(doc);
							
							updateTotalFacturasVinculadas();
						});

						remObj.getDocumento(factura.docId);
					}
					 
				} else {
					if (dataField == "descuentoPorc") {
						vinculo.cambioPorcDto(isAster);
					} else if (dataField == "descuentoMonto") {
						vinculo.cambioMontoDto(isAster);
					} else if (dataField == "neto") {
						vinculo.cambioMontoNeto(isAster);
					} else if (dataField == "monto") {
						vinculo.cambioMontoCancelado(isAster);
					} 

					vinculo.calcularRentaFinanciera(isAster, recibo.serie);
					updateTotalFacturasVinculadas();
					
					tieneCambios = true;
				}
			}
			
			public function borrarVinculo():void {
				var rowIndex:int = dgVinculos.selectedCell.rowIndex;

				_recibo.facturasVinculadas.removeItemAt(rowIndex);
				dgVinculos.invalidateDisplayList();

				callLater(function():void {
					var maxIndex:int = dgVinculos.dataProvider.length - 1;
					if (dgVinculos.dataProvider.length >= 0) {
						if (rowIndex == 0) {
							dgVinculos.setSelectedCell(rowIndex, 0);
						} else if (rowIndex > maxIndex) {
							dgVinculos.setSelectedCell(maxIndex, 0);
						} else {
							dgVinculos.setSelectedCell(rowIndex, 0);
						}
					}
				});

				updateTotalFacturasVinculadas();

				tieneCambios = true;
				invalidateProperties();
			}

			private function date_labelFunction(item:Object, column:GridColumn):String {
				var vinculo:VinculoDocumentos = item as VinculoDocumentos;
				if (vinculo.factura) {
					var formatter:DateFormatter = new DateFormatter();
					formatter.formatString = "DD-MM-YYYY";
					return formatter.format(vinculo.factura.fechaDoc);
				}
				return "";
			}

			private function moneda_labelFunction(item:Object, column:GridColumn):String {
				var vinculo:VinculoDocumentos = item as VinculoDocumentos;
				if (vinculo.factura && vinculo.factura.moneda) {
					return vinculo.factura.moneda.nombre;
				}
				return "";
			}

			private function saldo_labelFunction(item:Object, column:GridColumn):String {
				var vinculo:VinculoDocumentos = item as VinculoDocumentos;
				if (vinculo.docIdVin1) {
					var saldo:BigDecimal = new BigDecimal(vinculo.factura.saldo).setScale(2, MathContext.ROUND_HALF_EVEN);
					return nf_Espanol_Espanol.format(saldo);
				} 
				return "";
			}
			
			private function total_labelFunction(item:Object, column:GridColumn):String {
				var vinculo:VinculoDocumentos = item as VinculoDocumentos;
				if (vinculo.docIdVin1) {
					var total:BigDecimal = new BigDecimal(vinculo.factura.total).setScale(2, MathContext.ROUND_HALF_EVEN);
					return nf_Espanol_Espanol.format(total);
				} 
				return "";
			}

			private function updateTotalFacturasVinculadas():void {
				dgVinculos.dataProvider = recibo.facturasVinculadas;
				
				var presicion:int = 2;
				
				var netoTotal:BigDecimal = getNetoTotal();
				var montoTotal:BigDecimal = getMontoTotal();
				var desctoTotal:BigDecimal = getDescuentoTotal();
				var rentaTotal:BigDecimal = getRentaTotal();
				
				var monedaRecibo:Moneda = recibo.docRecMda;
				var monedaVinculos:Moneda = recibo.moneda;

				var total:BigDecimal = recibo.getDocRecNeto();
				
				var canceladoTotalMdaVinculos:BigDecimal = isAster ? netoTotal : netoTotal;
				var canceladoTotalMdaRecibo:BigDecimal = recibo.convertirMoneda(monedaVinculos, monedaRecibo, canceladoTotalMdaVinculos);
				
				var pendienteMdaRecibo:BigDecimal = total.subtract(canceladoTotalMdaRecibo).setScale(4, MathContext.ROUND_HALF_EVEN);
				
				saldoPendiente = recibo.convertirMoneda(monedaRecibo, monedaVinculos, pendienteMdaRecibo).setScale(presicion, MathContext.ROUND_HALF_EVEN);
				
				tieneVinculos = recibo.tieneFaturasVincululadas();
				recibo.docVinculado = tieneVinculos ? "S" : "N";
				recibo.saldo = saldoPendiente ? saldoPendiente.toString() : BigDecimal.ZERO.toString();
				
				fireEvents = false;
				// En comprobantes aster calculo el descuento y porcentage de descuento.
				if (isAster) {
					var totalMdaVinculos:BigDecimal = netoTotal.add(desctoTotal);
					
					recibo.descuentos = desctoTotal.setScale(presicion, MathContext.ROUND_HALF_EVEN).toString();
					recibo.descuentosPorc = totalMdaVinculos.numberValue() > 0 ? desctoTotal.multiply(Maths.ONE_HUNDRED)
						.divideRound(totalMdaVinculos, MathContext.ROUND_HALF_EVEN).toString() : "0.00";
					recibo.total = montoTotal.setScale(presicion, MathContext.ROUND_HALF_EVEN).toString();

				} else {
					recibo.descuentos = BigDecimal.ZERO.toString();
					recibo.descuentosPorc = BigDecimal.ZERO.toString();
				}
				recibo.docRenFin = rentaTotal.toString();
				fireEvents = true;
				
				actualizarTotales(netoTotal, montoTotal, desctoTotal, rentaTotal);
			}
			
			private function actualizarTotales(netoTotal:BigDecimal, montoTotal:BigDecimal, desctoTotal:BigDecimal, rentaTotal:BigDecimal):void {
				var monedaRecibo:Moneda = recibo.docRecMda;
				var monedaVinculos:Moneda = recibo.moneda;

				var montoNetoMdaRecibo:BigDecimal = recibo.convertirMoneda(monedaVinculos, monedaRecibo, netoTotal);
				var pendienteMdaRecibo:BigDecimal = recibo.convertirMoneda(monedaVinculos, monedaRecibo, saldoPendiente).setScale(2, MathContext.ROUND_HALF_EVEN);
				
				var buffer:String = "";
				buffer += "Total cancelado " + (monedaVinculos ? monedaVinculos.simbolo + " " : "") + nf_Espanol_Espanol.format(montoTotal.numberValue());
				buffer += " | Dto. " + (monedaVinculos ? monedaVinculos.simbolo + " " : "") + nf_Espanol_Espanol.format(desctoTotal.numberValue());
				
				if (isAster) { 
					buffer += " - " + nf_Espanol_Espanol.format(recibo.descuentosPorc) + "%";
					buffer += " | Neto " + (monedaVinculos ? monedaVinculos.simbolo + " " : "") + nf_Espanol_Espanol.format(netoTotal.numberValue()) + "";
				} else {
					buffer += " | Vinculado " + (monedaVinculos ? monedaVinculos.simbolo + " " : "") + nf_Espanol_Espanol.format( netoTotal.numberValue());
					if (monedaRecibo.codigo != monedaVinculos.codigo) {
						buffer += " (" + monedaRecibo.simbolo + " " +  nf_Espanol_Espanol.format(montoNetoMdaRecibo.numberValue()) + ")";
					}
				}
				
				if (tieneRF) {
					buffer += " | R.F. " + (monedaVinculos ? monedaVinculos.simbolo + " " : "") + nf_Espanol_Espanol.format(rentaTotal.numberValue());
				}
				
				if (monedaRecibo.codigo != monedaVinculos.codigo) {
					lblSaldoPendiente.text = "Saldo pendiente " + (monedaVinculos ? monedaVinculos.simbolo + " " : "") 
						+ nf_Espanol_Espanol.format(saldoPendiente.numberValue())
						+ " (" + monedaRecibo.simbolo + " " + nf_Espanol_Espanol.format(pendienteMdaRecibo.numberValue()) + ")";
				} else {
					lblSaldoPendiente.text = "Saldo pendiente " + (monedaVinculos ? monedaVinculos.simbolo + " " : "") 
						+ nf_Espanol_Espanol.format(saldoPendiente.numberValue());
				}
				
				lblMontoTotal.text = buffer;
				lblMontoTotal.setStyle("color", "#330000");
				
				tieneDescuentos = desctoTotal.numberValue() > 0;

			}
			
			protected function dgVinculos_keyDownHandler(event:KeyboardEvent):void {
				cellPos = dgVinculos.selectedCell;
				
				if (event.keyCode == Keyboard.ENTER) {
					var count:int = 0;
					var columns:ArrayCollection = new ArrayCollection(dgVinculos.columns.toArray());
					for each (var col:GridColumn in columns) {
						if (col.visible) {
							count++;
						}
					}
					var maxCol:int = columns.length - 2;
					var maxRow:int = dgVinculos.dataProvider.length - 1;

					var colIndex:int;
					var rowIndex:int;
					if (cellPos == null) {
						colIndex = dgVinculos.editorColumnIndex;
						rowIndex = dgVinculos.editorRowIndex
					} else {
						var i:int = 1;
						while (!columns[cellPos.columnIndex + i].visible) {
							i++;
						}
						colIndex = cellPos.columnIndex + i;
						rowIndex = cellPos.rowIndex;
					}
					if (colIndex > maxCol) {
						colIndex = 1;
						if (rowIndex == maxRow) {
							if (maxRow + 2 > 10) {
								var alert:Alert = Alert.show("Se pueden agregar un máximo de 10 vínculos.");
								alert.width = 400;
								alert.height = 200;

							} else {
								agregarVinculoVacio();
							}
						} else {
							rowIndex += 1;
							currentLine = dgVinculos.dataProvider.getItemAt(rowIndex) as VinculoDocumentos;
						}
					}
					dgVinculos.setSelectedCell(rowIndex, colIndex);
					
				} else if (event.keyCode == Keyboard.F1) { // Se presiono la tecla 'F1'
					if (!recibo.emitido) {
						cmdAgregar_clickHandler();
					}
					
					event.preventDefault();
					
				} else if ((event.keyCode >= Keyboard.A && event.keyCode <= Keyboard.Z) || 
						(event.keyCode >= Keyboard.NUMBER_0 && event.keyCode <= Keyboard.NUMBER_9) || 
						(event.keyCode >= Keyboard.NUMPAD_0 && event.keyCode <= Keyboard.NUMPAD_9) || 
						event.keyCode == Keyboard.NUMPAD_DECIMAL || event.keyCode == Keyboard.PERIOD) {
					
					if ((dgVinculos.columns.getItemAt(cellPos.columnIndex) as GridColumn).editable) {
						dgVinculos.startItemEditorSession(cellPos.rowIndex, cellPos.columnIndex);
					}
				}
			}
			
			private function agregarVinculo(factura:Documento):VinculoDocumentos {
				var vinculo:VinculoDocumentos = new VinculoDocumentos();

				var monedaRecibo:Moneda = recibo.docRecMda;
				var monedaVinculos:Moneda = recibo.moneda; 
				
				var saldoPendienteMdaVinculos:BigDecimal = recibo.convertirMoneda(monedaRecibo, monedaVinculos, saldoPendiente);
				var totalFactura:BigDecimal = new BigDecimal(factura.total).setScale(4, MathContext.ROUND_HALF_EVEN);
				var saldoFactura:BigDecimal = new BigDecimal(factura.saldo).setScale(4, MathContext.ROUND_HALF_EVEN);
				
				var montoCancelado:BigDecimal = totalFactura.subtract(saldoFactura);
				var descuentoPorc:BigDecimal = factura.cuotasDocumento
					? factura.cuotasDocumento.calcularPorcentageDescuento(recibo.fechaDoc, montoCancelado, factura.cliente.categCliId)
					: BigDecimal.ZERO;
				
				vinculo.docIdVin1 = factura.docId;
				vinculo.docIdVin2 = recibo.docId;
				vinculo.factura = factura;
				vinculo.recibo = recibo;
				
				var descuento:BigDecimal = saldoFactura.multiply(descuentoPorc.divideScaleRound(Maths.ONE_HUNDRED, 4, MathContext.ROUND_HALF_EVEN));

				saldoFactura = saldoFactura.subtract(descuento);

				var montoNeto:BigDecimal = new BigDecimal(Math.min(saldoFactura.numberValue(), saldoPendienteMdaVinculos.numberValue()).toString());
				var montoDto:BigDecimal = vinculo.calcularMontoDescuento(null, descuentoPorc, montoNeto, isAster);
				var montoCancela:BigDecimal = vinculo.calcularMontoCancelado(null, montoDto, montoNeto, isAster);

				vinculo.descuentoPorc = descuentoPorc.setScale(2, MathContext.ROUND_HALF_EVEN).toString();
				vinculo.descuentoMonto = montoDto.toString();
				vinculo.neto = montoNeto.toString();
				vinculo.monto = montoCancela.toString();									
				vinculo.calcularRentaFinanciera(isAster, recibo.serie);
				
				return vinculo;
			}

			private function agregarVinculoVacio():void {
				var vinculo:VinculoDocumentos = new VinculoDocumentos();
				vinculo.docIdVin1 = null;
				vinculo.docIdVin2 = recibo.docId;
				vinculo.monto = null;
				vinculo.factura = new Documento();

				recibo.facturasVinculadas.addItem(vinculo);

				actualizarVinculos(vinculo, recibo.facturasVinculadas.length - 1);
			}

			private function actualizarVinculos(vinculo:VinculoDocumentos, index:int):void {
				updateTotalFacturasVinculadas();
				currentLine = vinculo;
				tieneCambios = true;
				invalidateProperties();
				
				callLater(function():void {
					var row:int = index;
					var col:int = 0;
					dgVinculos.setSelectedCell(row, col);
					
					callLater(function():void {
						dgVinculos.setFocus();
					});
				});
				
			}

			protected function cmdEmitir_clickHandler(event:MouseEvent):void {
				running = true;
				remObjEmitir.emitirRecibo(recibo);
			}

			private function resultEmitir(event:ResultEvent):void {
				recibo = event.result as Documento;
			}
			
			public function obtenerFacturas(orden:String = null):void {
				if (!remFacturasCliente) {
					remFacturasCliente = getNewRemoteObject(false);
					remFacturasCliente.addEventListener(ResultEvent.RESULT, resultFacturasPendientes);
				}
				
				var moneda:Moneda = cmbMonedaVinculos.selectedItem as Moneda;
				var cliente:Cliente = recibo.cliente;
				
				if (moneda && cliente) {
					var _docQuery:DocumentoQuery = new DocumentoQuery();
					_docQuery.start = 0;
					_docQuery.limit = 16;
					_docQuery.pendiente = false;
					_docQuery.cliente = cliente.codigo;
					_docQuery.moneda = moneda.codigo;
					_docQuery.tieneSaldo = true;
					_docQuery.orden = orden;
					_docQuery.comprobantes = "2,4,5,6,7,8,9,19,20,22,98";
					
					remFacturasCliente.queryDocumentos(_docQuery);
				} else {
					map = new Dictionary();
				}
				
			}
			
			private function resultFacturasPendientes(event:ResultEvent):void {
				var facturasPendientes:ArrayCollection = event.result as ArrayCollection;
				
				map = new Dictionary();
				for each (var doc:DocumentoDTO in facturasPendientes.toArray())  {
					map[doc.serieNumero] = doc;
				}
			}

			private function onFault(event:FaultEvent):void {
				map = new Dictionary();
				Alert.show(event.fault.faultString, 'Error');
			}
			
			public function getNetoTotal():BigDecimal {
				var netoTotal:BigDecimal = BigDecimal.ZERO;
				for each (var vinculo:VinculoDocumentos in recibo.facturasVinculadas) {
					if (vinculo.neto != null && vinculo.neto.length > 0) {
						netoTotal = netoTotal.add(new BigDecimal(vinculo.neto));
					}
				}				
				return netoTotal.setScale(4, MathContext.ROUND_HALF_EVEN);
			}

			public function getMontoTotal():BigDecimal {
				var montoTotal:BigDecimal = BigDecimal.ZERO;
				for each (var vinculo:VinculoDocumentos in recibo.facturasVinculadas) {
					if (vinculo.monto != null && vinculo.monto.length > 0) {
						montoTotal = montoTotal.add(new BigDecimal(vinculo.monto));
					}
				}				
				return montoTotal.setScale(4, MathContext.ROUND_HALF_EVEN);
			}

			public function getRentaTotal():BigDecimal {
				var rentaTotal:BigDecimal = BigDecimal.ZERO;
				for each (var vinculo:VinculoDocumentos in recibo.facturasVinculadas) {
					if (vinculo.vinRtaFin != null && vinculo.vinRtaFin.length > 0) {
						rentaTotal = rentaTotal.add(new BigDecimal(vinculo.vinRtaFin));
					}
				}				
				return rentaTotal.setScale(4, MathContext.ROUND_HALF_EVEN);
			}

			public function getDescuentoTotal():BigDecimal {
				var dtoTotal:BigDecimal = BigDecimal.ZERO;

				for each (var vinculo:VinculoDocumentos in recibo.facturasVinculadas) {
					var desc:String = vinculo.descuentoPorc;
					var monto_:String = vinculo.neto;
					
					var desto:BigDecimal = desc ? new BigDecimal(desc).setScale(4, MathContext.ROUND_HALF_EVEN) : BigDecimal.ZERO;
					var monto:BigDecimal = monto_ ? new BigDecimal(monto_).setScale(4, MathContext.ROUND_HALF_EVEN) : BigDecimal.ZERO;
					if ((Maths.ONE_HUNDRED.subtract(desto)).compareTo(BigDecimal.ZERO) != 0) { 
						var montoLinea:BigDecimal = monto.multiply(desto).divideScaleRound(Maths.ONE_HUNDRED.subtract(desto), 4, MathContext.ROUND_HALF_EVEN).setScale(4, MathContext.ROUND_HALF_EVEN);
						dtoTotal =  dtoTotal.add(montoLinea);
					}
				}
				
				return dtoTotal.setScale(4, MathContext.ROUND_HALF_EVEN);
			}
			
			protected function cmdAgregarVinculos_clickHandler(event:MouseEvent):void {
				// TODO Auto-generated method stub
			}
			
			protected function cmdCrearNotaCredito_clickHandler(event:MouseEvent):void {				
				var cmp:Comprobante = new Comprobante();
				for each (var comprobante:Comprobante in CatalogoFactory.getInstance().comprobantes)  {
					if (comprobante.codigo == "28") {
						cmp = comprobante; 	
						break;
					}
				}
				var art:Articulo = new Articulo();
				for each (var articulo:Articulo in CatalogoFactory.getInstance().articulos)  {
					if (articulo.codigo == "DESCUENTO") {
						art = articulo;
						break;
					}
				}	
				var iva:Iva = new Iva();
				iva.tasa = "22";
				art.iva = iva;
				
				var dtf:DateTimeFormatter = new DateTimeFormatter();
				dtf.setStyle("locale", "es-ES");
				dtf.dateTimePattern = "dd-MM-yyyy";
				
				var docVin:Documento = Documento.getNuevoDocumento(cmp);
				docVin.tomarCamposDelCliente(recibo.cliente.codigo);
				docVin.docTCC = recibo.docTCC;
				
				// Seteo el recibo que lo genera como el processId
				docVin.processId = recibo.docId;
				
				var razonCFERef:String = "";
				
				LineasDocumento(docVin.lineas).lineas.removeAll();
				
				var index:int = 0;
				for each (var vinculo:VinculoDocumentos in recibo.facturasVinculadas) {
					var desto:BigDecimal = vinculo.descuentoPorc && vinculo.descuentoPorc.length > 0 ? new BigDecimal(vinculo.descuentoPorc) : BigDecimal.ZERO;
					var monto:BigDecimal = new BigDecimal(vinculo.neto ? vinculo.neto : vinculo.monto);
					
					if (!monto || !desto) continue;
					
					var montoLinea:BigDecimal = monto;
					if ((Maths.ONE_HUNDRED.subtract(desto)).compareTo(BigDecimal.ZERO) != 0) { 
						montoLinea = monto.multiply(desto).divideScaleRound(Maths.ONE_HUNDRED.subtract(desto), 4, MathContext.ROUND_HALF_EVEN);
					}
					razonCFERef += vinculo.factura.numero + "\n"; 

					if (vinculo.monto != null && vinculo.monto.length > 0) {
						var precio:BigDecimal = montoLinea.divideScaleRound(new BigDecimal("1.22"), 4, MathContext.ROUND_HALF_EVEN);
						var concepto:String = recibo.serie + recibo.numero + ", dto:" + desto.setScale(2).toString() + "% en factura " + vinculo.factura.serie + vinculo.factura.numero;
						if (concepto.length > 50) {
							concepto = concepto.substr(0, 50);
						}
						
						// Guardo datos en la línea para el momento de dar el alta crear los vínculos
						var notas:String = recibo.docId + "|" + recibo.serie + "|" + recibo.numero + "|" + dtf.format(recibo.fechaDoc) + "|" + montoLinea.toString() + "\n";
						notas += vinculo.factura.docId + "|" + vinculo.factura.serie + "|" + vinculo.factura.numero + "|" + desto.setScale(2).toString() + "|" + vinculo.monto;
						
						// Agregar una linea vacia al documento
						var lineaDoc:LineaDocumento = new LineaDocumento();
						lineaDoc.documento = docVin;
						lineaDoc.numeroLinea = index;
						lineaDoc.cantidad = "1";
						lineaDoc.articulo = art;
						lineaDoc.concepto = concepto;
						lineaDoc.notas = notas;
						lineaDoc.precio = precio.setScale(4, MathContext.ROUND_HALF_EVEN).toString();
						lineaDoc.costo = precio.multiply(new BigDecimal(".64")).setScale(4, MathContext.ROUND_HALF_EVEN).toString();

						LineasDocumento(docVin.lineas).lineas.addItem(lineaDoc);
						
						// moneda de la nota de crédito debe ser la misma de las facturas vinculadas.
						if (index == 0) {
							docVin.moneda = vinculo.factura.moneda;
						}
						// Indice de la línea
						index++;
					}
				}
				
				docVin.indGlobalCFERef = "G";
				docVin.razonCFERef = razonCFERef;
				docVin.update();
				
				abrirNotaCreditoFinanciera(docVin);
			}
			
			private function abrirNotaCreditoFinanciera(doc:Documento, reload:Boolean = true):void {
				var facWindow:TitleWindow = new TitleWindow();
				facWindow.title = "Nota de crédito financiera";
				facWindow.width = 1120;
				facWindow.height = 718;
				
				facWindow.addEventListener(CloseEvent.CLOSE, closeHandlerNCF);
				
				var frmFactura:FacturacionPnl = new FacturacionPnl();
				frmFactura.factura = doc;
				frmFactura.showNuevo = false;
				frmFactura.showGuardar = false;
				frmFactura.showEMail = false;
				frmFactura.obtenerTipoCambioFiscal(new Date());
				frmFactura.tieneCambios = false;
				
				frmFactura.modoVentana = true;
								
				frmFactura.addEventListener("_cancel_", function():void {
					facWindow.removeEventListener(CloseEvent.CLOSE, closeHandlerNCF);
					PopUpManager.removePopUp(facWindow as IFlexDisplayObject);
					
					//TODO: Volver a cargar el documento
					if (reload) {
						reloadDocumento(_recibo.docId);
					}
					
				});
				
				PopUpManager.addPopUp(facWindow, DisplayObject(FlexGlobals.topLevelApplication), true);
				PopUpManager.centerPopUp(facWindow);
				
				facWindow.addElement(frmFactura);
				facWindow.closeButton.visible = false;
				
			}
			
			private function closeHandlerNCF(event:Event):void {
				var titleWin:TitleWindow = event.target as TitleWindow;
				titleWin.removeEventListener(CloseEvent.CLOSE, closeHandler);
				PopUpManager.removePopUp(titleWin as IFlexDisplayObject);
				
				//TODO: Volver a cargar el documento
				reloadDocumento(_recibo.docId);
			}
			
			protected function cmdAuditoria_clickHandler(event:MouseEvent):void {
				var remAuditoria:RemoteObject = getNewRemoteObject(); 
				remAuditoria.addEventListener(ResultEvent.RESULT, function(evt:ResultEvent):void {
					var lineasAuditoria:ArrayCollection = evt.result as ArrayCollection;
					if (lineasAuditoria && lineasAuditoria.length > 0) {
						var helpWindow:TitleWindow = new TitleWindow();
						helpWindow.width = 840;
						helpWindow.height = 460;
						helpWindow.title = "Auditoría | " + (_recibo.serie ? _recibo.serie : "") + (_recibo.numero ? (_recibo.numero + " | ") : "") + _recibo.comprobante.nombre;
						
						var parent:Sprite;
						var sm:ISystemManager = ISystemManager(FlexGlobals.topLevelApplication.systemManager);
						// no types so no dependencies
						var mp:Object = sm.getImplementation("mx.managers.IMarshallPlanSystemManager");
						if (mp && mp.useSWFBridge()) {
							parent = Sprite(sm.getSandboxRoot());
						} else {
							parent = Sprite(FlexGlobals.topLevelApplication);
						}
						
						var lineasAudPanel:FrmLineasAuditoriaDoc = new FrmLineasAuditoriaDoc();
						lineasAudPanel.lineas = lineasAuditoria;
						var closeHandler:Function = function closeHandler(event:CloseEvent):void {
							PopUpManager.removePopUp(helpWindow as IFlexDisplayObject);
						}
						
						lineasAudPanel.addEventListener(CloseEvent.CLOSE, closeHandler);
						helpWindow.addEventListener(CloseEvent.CLOSE, closeHandler);
						
						helpWindow.addElement(lineasAudPanel);
						PopUpManager.addPopUp(helpWindow, parent, true);
						PopUpManager.centerPopUp(helpWindow);
					} else {
						var alert:Alert = Alert.show("'" + (_recibo.serie ? _recibo.serie : "") + (_recibo.numero ? _recibo.numero : " | ") + _recibo.comprobante.nombre + "' no tiene auditoría.", "Información");
						alert.width = 400;
						alert.height = 200;
					}
					
				});
				
				if (_recibo.docId) {
					remAuditoria.getLineasAuditoria(_recibo.docId);
				}				
			}


			protected function ddlSerie_changeHandler(event:IndexChangeEvent):void {
				serieSelected = ddlSerie.selectedItem as Object;
				_recibo.serie = serieSelected ? serieSelected.value : "";
				
				tieneRF = _recibo.serie && _recibo.serie.length > 0 && _recibo.serie != "A" && _recibo.serie != "P";
			}
			
			protected function cmdMostrarFacturasPendientes_clickHandler(event:MouseEvent):void {
				var facPendWindow:TitleWindow = new TitleWindow();
				facPendWindow.title = "Facturas Pendientes: " + recibo.cliente.nombre;
				facPendWindow.width = 860;
				facPendWindow.height = 600;
				
				var frmListadoDeudores:ListadoDeudoresCliente = new ListadoDeudoresCliente();
				
				var docPendientes:ArrayCollection = new ArrayCollection();
				docPendientes.addItem(_recibo.cliente.documentsPendientes);
				
				frmListadoDeudores.dataProvider = docPendientes;
				frmListadoDeudores.codigoCliente = recibo.cliente.codigo;
				
				var parent:Sprite;
				var sm:ISystemManager = ISystemManager(FlexGlobals.topLevelApplication.systemManager);

				var mp:Object = sm.getImplementation("mx.managers.IMarshallPlanSystemManager");
				if (mp && mp.useSWFBridge()) {
					parent = Sprite(sm.getSandboxRoot());
				} else {
					parent = Sprite(FlexGlobals.topLevelApplication);
				}
				
				PopUpManager.addPopUp(facPendWindow, parent, true);
				PopUpManager.centerPopUp(facPendWindow);
				
				frmListadoDeudores.addEventListener(CloseEvent.CLOSE, function(event:CloseEvent):void {
					PopUpManager.removePopUp(facPendWindow as IFlexDisplayObject);
					facPendWindow = null;
				});
				
				facPendWindow.addElement(frmListadoDeudores);
				
				facPendWindow.closeButton.visible = false;
			}
			
			protected function cmdAbrirNotaCredito_clickHandler(event:MouseEvent):void {
				if (!recibo.notaCreditoFinanciera) {
					dispatchEvent(new AbrirFacturaEvent(AbrirFacturaEvent.ABRIR_DOCUMENTO, recibo.processId));
					
				} else {
					abrirNotaCreditoFinanciera(recibo.notaCreditoFinanciera, false);
				}
			}			
			
			protected function cmdDocumentos_clickHandler(event:MouseEvent):void {
				var facPendWindow:TitleWindow = new TitleWindow();
				facPendWindow.title = "Documentos y Valores";
				facPendWindow.width = 720;
				facPendWindow.height = 500;
				
				var frmDocumentosValores:FrmDocumentosValores = new FrmDocumentosValores();
				frmDocumentosValores.recibo = _recibo;

				var parent:Sprite;
				var sm:ISystemManager = ISystemManager(FlexGlobals.topLevelApplication.systemManager);
				
				// no types so no dependencies
				var mp:Object = sm.getImplementation("mx.managers.IMarshallPlanSystemManager");
				if (mp && mp.useSWFBridge()) {
					parent = Sprite(sm.getSandboxRoot());
				} else {
					parent = Sprite(FlexGlobals.topLevelApplication);
				}
				
				PopUpManager.addPopUp(facPendWindow, parent, true);
				PopUpManager.centerPopUp(facPendWindow);
				
				frmDocumentosValores.addEventListener(CloseEvent.CLOSE, function(event:CloseEvent):void {
					PopUpManager.removePopUp(facPendWindow as IFlexDisplayObject);
					facPendWindow = null;
				});
				
				frmDocumentosValores.addEventListener("save_documentos_y_valores", function(event:Event):void {
					guardarRecibo();
				});
				
				facPendWindow.addElement(frmDocumentosValores);
				
				facPendWindow.closeButton.visible = false;
			}
			
			protected function txtDate_changeHandler(event:CalendarLayoutChangeEvent):void {
				recibo.fechaDoc = event.newDate;
			}
			
			protected function cmdFinalizar_clickHandler(event:MouseEvent):void {
				var docId:String = _recibo.docId;
				
				var remObjR:RemoteObject = getNewRemoteObject();
				remObjR.addEventListener(ResultEvent.RESULT, function(evt:ResultEvent):void {
					recibo = evt.result as Documento;
				});
				remObjR.finalizarRecibo(_recibo);
				
			}
			
			protected function cmbMoney_changeHandler(event:Event):void {
				recibo.docRecMda = cmbMoney.selectedItem as Moneda;
				recibo.moneda = cmbMoney.selectedItem as Moneda; 	
				
				monedasDistintas = false;
			}
			
			protected function txtTotal_changeHandler(event:Event):void {
				recibo.docRecNeto = txtTotal.text;
				recibo.saldo = txtTotal.text;

				if (!isAster) {
					var monedaVinculos:Moneda = cmbMonedaVinculos.selectedItem;
					var monedaDocRecNeto:Moneda = cmbMoney.selectedItem;
					
					var docReciboNeto:BigDecimal = recibo.getDocRecNeto();
					var docReciboTotal:BigDecimal = BigDecimal.ZERO;
					if (recibo.total && recibo.total.length > 0) {
						docReciboTotal = new BigDecimal(recibo.total); 
					}
					
					if (monedaDocRecNeto.codigo == monedaVinculos.codigo) {
						recibo.total = recibo.docRecNeto;
						
					} else {
						var total:BigDecimal = recibo.convertirMoneda(monedaDocRecNeto, monedaVinculos, recibo.getDocRecNeto());
						recibo.total = total.setScale(2, MathContext.ROUND_HALF_EVEN).toString();
					}
					txtTotalVinculado.text = recibo.total;
					
					updateTotalFacturasVinculadas();
				}			
			}
						
			protected function txtTotalVinculado_changeHandler(event:Event):void {
				recibo.total = txtTotalVinculado.text;
				var monedaVinculos:Moneda = cmbMonedaVinculos.selectedItem;
				var monedaDocRecNeto:Moneda = cmbMoney.selectedItem;
				
				var docReciboNeto:BigDecimal = recibo.getDocRecNeto();
				var docReciboTotal:BigDecimal = BigDecimal.ZERO;
				if (recibo.total && recibo.total.length > 0) {
					docReciboTotal = new BigDecimal(recibo.total); 
				}
				
				if (monedaVinculos.codigo == Moneda.PESOS || monedaVinculos.codigo == Moneda.PESOS_ASTER) {
					recibo.docTCC = docReciboTotal.divideRound(docReciboNeto, MathContext.ROUND_HALF_EVEN).toString(); 	
				}
				if (monedaVinculos.codigo == Moneda.DOLARES || monedaVinculos.codigo == Moneda.DOLARES_ASTER) {
					if (docReciboTotal.compareTo(BigDecimal.ZERO) > 0) {
						recibo.docTCC = docReciboNeto.divideRound(docReciboTotal, MathContext.ROUND_HALF_EVEN).toString();
					} else {
						recibo.docTCC = BigDecimal.ZERO.toString();
					}
				}
				
				txtTipoCambio.text = recibo.docTCC;
			}
			
			protected function cmbMonedaVinculos_changeHandler(event:Event):void {
				var monedaVinculos:Moneda = cmbMonedaVinculos.selectedItem;
				var monedaTotal:Moneda = cmbMoney.selectedItem;
				monedasDistintas = monedaTotal.codigo != monedaVinculos.codigo;
				
				if (monedaTotal.codigo == monedaVinculos.codigo) {
					recibo.total = recibo.docRecNeto;
				} else {
					txtTotalVinculado.enabled = true;
					var total:BigDecimal = recibo.convertirMoneda(monedaTotal, monedaVinculos, recibo.getDocRecNeto());
					recibo.total = total.setScale(2, MathContext.ROUND_HALF_EVEN).toString();
				}
				txtTotalVinculado.text = recibo.total;

			}
			
			protected function txtTipoCambio_changeHandler(event:Event):void {
				var monedaVinculos:Moneda = cmbMonedaVinculos.selectedItem;
				var monedaRecibo:Moneda = cmbMoney.selectedItem;
				
				var total:BigDecimal = recibo.convertirMoneda(monedaRecibo, monedaVinculos, recibo.getDocRecNeto());
				recibo.total = total.setScale(2, MathContext.ROUND_HALF_EVEN).toString();
				txtTotalVinculado.text = recibo.total;
			}
			
			protected function txtDate_closeHandler(event:DropdownEvent):void {
				cmdGuardar.setFocus();	
			}
			
			protected function hasPerm():Boolean {
				if (GeneralOptions.getInstance().loggedUser.esSupervisor()
					|| GeneralOptions.getInstance().loggedUser.permisoId == Usuario.USUARIO_ADMINISTRADOR
					|| GeneralOptions.getInstance().loggedUser.permisoId == Usuario.USUARIO_FACTURACION) {
					
					return true;
				}
				
				return false;
			}
			
			protected function cmdEMail_clickHandler(event:MouseEvent):void {
				var pjRecibo:PrintJobReciboA4= new PrintJobReciboA4(false);
				pjRecibo.documento = this._recibo;
				pjRecibo.createEmailImage();
			}
			
			protected function cmdActualizar_clickHandler(event:MouseEvent):void {
				var remObjActualizar:RemoteObject = getNewRemoteObject();
				remObjActualizar.addEventListener(ResultEvent.RESULT, function(event:ResultEvent):void {
					Alert.show("Actualización finalizada");
				});
				remObjActualizar.actualizarRecibosWithNCF();
			}
			
			private function getNewRemoteObject(showBusyCursor:Boolean = true):RemoteObject {
				var remObj:RemoteObject = new RemoteObject();
				remObj.destination = "CreatingRpc";
				remObj.showBusyCursor = showBusyCursor;
				remObj.channelSet = ServerConfig.getInstance().channelSet;
				remObj.addEventListener(FaultEvent.FAULT, handleFault);
				
				return remObj;
			}

			protected function cmdImprimir_clickHandler(event:MouseEvent):void {
				imprimir();
			}
			
			private function imprimir():void {					
				var pjFactura:PrintJobReciboA4 = new PrintJobReciboA4();
				pjFactura.documento = this._recibo;
				pjFactura.forzarRemitos = true;
				pjFactura.print_vias = [PrintJobReciboA4.VIA_CLIENTE];
				pjFactura.print();			
			}			
			
			public function handleFault(event:FaultEvent):void {
				var message:String = (event.fault && event.fault.rootCause) 
					? (event.fault.rootCause.cause ? event.fault.rootCause.cause.message : "") 
					: null;
				if (!message) {
					message = event.message.toString();
				}				
				Alert.show(message, "Error", 4, null, null, StyleManager.getStyleManager(null).getStyleDeclaration('.icons32').getStyle('ErrorIcon'));
				
				running = false;
				creando_nuevo = false
				
				_convirtiendo = false;
				currentState = "default";
			}
			
		]]>

	</fx:Script>

	<fx:Declarations>
		<fx:Component id="dropDownItemRenderer">
			<renderers:CodigoNombreItemRenderer/>
		</fx:Component>

		<util:RutValidator id="rut_stringValidator" checkRut="true" maxLength="12" minLength="12" property="text" required="false" source="{txtRUT}"
						   tooShortError="Número de RUT inválido."/>
		<s:NumberFormatter id="nf_Espanol_Espanol" fractionalDigits="2" locale="es_ES"/>
		
	</fx:Declarations>

	<s:states>
		<s:State name="default"/>
		<s:State name="cargando"/>
	</s:states>

	<s:VGroup includeIn="cargando" width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
		<loader:LoadComponent/>
	</s:VGroup>

	<s:Group excludeFrom="cargando" width="100%" height="100%">		
		<s:Rect visible="{recibo.emitido}" x="408" y="7" width="186" height="36">
			<s:fill>
				<s:LinearGradient rotation="90">
					<s:GradientEntry alpha="0.23" color="0xFFFFFF" ratio="0.2"/>
					<s:GradientEntry alpha="0.32" color="0xFFFFFF" ratio="0.48"/>
					<s:GradientEntry alpha="0.63" color="0xFFFFFF" ratio="0.48001"/>
				</s:LinearGradient>
			</s:fill>
			<s:stroke>
				<s:LinearGradientStroke rotation="90" weight="3">
					<s:GradientEntry alpha="0.70" color="0xFF0000" ratio="0.4"/>
					<s:GradientEntry alpha="0.40" color="0xFA0000" ratio="0.965"/>
					<s:GradientEntry alpha="0.30" color="0xFF0000" ratio="0.9651"/>
				</s:LinearGradientStroke>
			</s:stroke>
		</s:Rect>
		<s:Label visible="{recibo.emitido}" left="440" top="15" width="120" color="#ff0000" fontSize="24" text="Emitido" textAlign="center"/>

		<s:VGroup excludeFrom="cargando" width="100%" height="100%">
			<s:VGroup width="100%" height="100%">
				<s:HGroup id="pnlHeader" width="100%" gap="5">
					<s:Panel width="120" minHeight="0" styleName="pnlInterno" title="SERIE">
						<s:HGroup width="100%" horizontalAlign="center">
							<s:DropDownList id="ddlSerie" width="100%" height="36" change="ddlSerie_changeHandler(event)" dataProvider="{serieReciboList}"
											enabled="{!_modoVisualizacion &amp;&amp; !recibo.emitido &amp;&amp; !tieneVinculos}" fontSize="18"
											labelField="label" selectedItem="{serieSelected}"/>
						</s:HGroup>
					</s:Panel>
					<s:Panel width="180" minHeight="0" styleName="pnlInterno" title="NÚMERO">
						<s:HGroup width="100%" horizontalAlign="center">
							<s:TextInput id="txtNumero" width="100%" height="36"
										 enabled="{!_modoVisualizacion &amp;&amp; !recibo.emitido &amp;&amp; !tieneVinculos}" enter="{txtTipoCambio.setFocus()}"
										 fontSize="18" paddingRight="15" text="@{recibo.numero}" textAlign="right"/>
						</s:HGroup>
					</s:Panel>
					<s:HGroup visible="{!recibo.docId}" width="100%" height="60" horizontalAlign="center" verticalAlign="middle">
						<s:Label fontSize="14" fontStyle="italic" text="Para agregar facturas vinculadas debe guardar el recibo."/>
					</s:HGroup>
				
					<s:Panel width="180" minHeight="0" styleName="pnlInterno" title="FECHA">
						<s:HGroup width="100%" horizontalAlign="center">
							<mx:DateField id="txtDate" width="100%" change="txtDate_changeHandler(event)" close="txtDate_closeHandler(event)"
										  enabled="{!_modoVisualizacion &amp;&amp; !recibo.emitido}" focusEnabled="false" fontFamily="Helvetica" fontSize="18"
										  formatString="DD/MM/YYYY" locale="es" paddingLeft="10" selectedDate="{recibo.fechaDoc}" yearNavigationEnabled="true"/>
						</s:HGroup>
					</s:Panel>
				</s:HGroup>
	
				<s:HGroup width="100%" height="100%">
					<s:VGroup width="30%" height="100%">
						<s:VGroup width="100%" height="100%" gap="5" horizontalAlign="right">
							<s:HGroup width="100%" enabled="{hasPerm()}" gap="0" horizontalAlign="right" paddingTop="5">
								<s:Panel width="120" minHeight="0" styleName="pnlInterno" title="T.C.COMERCIAL">
									<s:HGroup width="100%" horizontalAlign="center">
										<components1:MyTextInput id="txtTipoCambio" width="100%" height="36" change="txtTipoCambio_changeHandler(event)"
																 enabled="{!tieneVinculos}" enter="{cmbMoney.setFocus()}" fontSize="16"
																 permitirNegativos="false" text="@{recibo.docTCC}" textAlign="right"/>
									</s:HGroup>
								</s:Panel>
								<s:Spacer width="100%"/>
								<s:Panel width="180" minHeight="0" styleName="pnlInterno" title="MONEDA">
									<s:HGroup width="100%" horizontalAlign="center">
										<components:MyAutoComplete id="cmbMoney" width="100%" height="36" allowDuplicates="false" allowEditingNewValues="false"
																   allowMultipleSelection="false" allowNewValues="false" backspaceAction="focus"
																   change="cmbMoney_changeHandler(event)" dataProvider="{ monedas }"
																   dropDownItemRenderer="{ dropDownItemRenderer }" dropDownRowCount="{monedas.length}"
																   enabled="{!tieneVinculos}" fontSize="16" labelField="nombre"
																   labelFunction="codigoNombreLabelFunction" matchType="anyPart" next_focus="{txtTotal}"
																   previous_focus="{txtTipoCambio}" selectedItem="{recibo.docRecMda}"
																   selectedItemStyleName="{ AutoComplete.STYLE_MAC_MAIL }" textAlign="left"/>
									</s:HGroup>
								</s:Panel>
								<s:Panel width="120" minHeight="0" styleName="pnlInterno" title="{isAster ? 'NETO' : 'TOTAL' }">
									<s:HGroup width="100%" horizontalAlign="center">
										<components1:MyTextInput id="txtTotal" width="100%" height="36" change="txtTotal_changeHandler(event)"
																 enabled="{!tieneVinculos}" enter="{cmbClient.setFocus()}" fontSize="16"
																 permitirNegativos="false" text="{recibo.docRecNeto}" textAlign="right"/>
									</s:HGroup>
								</s:Panel>
							</s:HGroup>
	
							<s:HGroup width="100%" gap="0">
								<s:Panel width="100%" minHeight="0" styleName="pnlInterno" title="R.U.T COMPRADOR">
									<s:HGroup width="100%" horizontalAlign="center">
										<s:TextInput id="txtRUT" width="100%" height="36" change="txtRUT_changeHandler(event)" editable="true"
													 enabled="{!_modoVisualizacion &amp;&amp; !recibo.emitido}" fontSize="18" maxChars="12" paddingLeft="12"
													 prompt="No tiene" restrict="0-9" text="@{recibo.rut}" textAlign="left"/>
									</s:HGroup>
								</s:Panel>
							</s:HGroup>
	
							<s:Panel width="100%" height="100%" minHeight="0" styleName="pnlInterno" title="DATOS CLIENTE">
								<s:HGroup width="100%" horizontalAlign="center">
									<s:Form width="100%" enabled="{hasPerm()}" textAlign="right">
										<s:layout>
											<s:FormLayout gap="-12"/>
										</s:layout>

										<s:FormItem width="100%" label="Cliente">
											<s:HGroup width="100%" gap="3" verticalAlign="middle">
												<components:MyAutoComplete id="cmbClient" width="100%" allowDuplicates="false" allowEditingNewValues="false"
																		   allowMultipleSelection="false" allowNewValues="false" backspaceAction="focus"
																		   change="cmbClient_changeHandler(event)"
																		   dataProvider="{ CatalogoFactory.getInstance().clientes }"
																		   dropDownItemRenderer="{ dropDownItemRenderer }" dropDownRowCount="10"
																		   dropDownWidth="480" enabled="{!tieneVinculos}"
																		   keyDown="capture_keyDownHandlerCliente(event)" labelField="nombre"
																		   labelFunction="clienteLabelFunction" matchType="anyPart"
																		   next_focus="{txtRazonSocial}" prompt="Ingrese cliente"
																		   selectedItem="{recibo.cliente}"
																		   selectedItemStyleName="{ AutoComplete.STYLE_MAC_MAIL }" textAlign="left"/>

												<components1:IconButton width="28" height="26" click="cmdMostrarFacturasPendientes_clickHandler(event)"
																		enabled="{recibo.cliente &amp;&amp; recibo.cliente.documentsPendientes}"
																		styleName="moneyButton" toolTip="Facturas Pendientes"/>

											</s:HGroup>
										</s:FormItem>
										<s:FormItem width="100%" label="Razón social">
											<s:TextInput id="txtRazonSocial" width="100%" editable="{!_modoVisualizacion}" enabled="{!tieneVinculos}"
														 enter="{txtDate.setFocus();txtDate.open();}" maxChars="128" prompt="Ingrese razón social"
														 text="@{recibo.razonSocial}" textAlign="left"/>
										</s:FormItem>
										<s:FormItem width="100%" label="Departamento">
											<s:TextInput id="txtDpto" width="100%" editable="false" enabled="{!tieneVinculos}" enter="{txtDirection.setFocus()}"
														 maxChars="40" prompt="Departamento" text="@{recibo.departamento}" textAlign="left"/>
										</s:FormItem>
										<s:FormItem width="100%" label="Dirección">
											<s:TextInput id="txtDirection" width="100%" editable="false" enabled="{!tieneVinculos}" enter="{txtRUT.setFocus()}"
														 maxChars="100" prompt="Dirección" text="@{recibo.direccion}" textAlign="left"/>
										</s:FormItem>
									</s:Form>
								</s:HGroup>
							</s:Panel>
						</s:VGroup>	
					</s:VGroup>
	
					<s:VGroup width="100%" height="100%" paddingTop="5">
						<s:Panel id="pnlFacturasVinculadas" width="100%" height="100%" enabled="{recibo.docId != null}" styleName="pnlInterno"
								 title="FACTURAS VINCULADAS">
							<s:VGroup width="100%" height="100%" gap="0">
								<s:HGroup width="100%">
									<s:Panel width="180" minHeight="0" styleName="pnlInterno" title="MONEDA VINCULOS">
										<s:HGroup width="100%" horizontalAlign="center">
											<components:MyAutoComplete id="cmbMonedaVinculos" width="100%" height="36" allowDuplicates="false"
																	   allowEditingNewValues="false" allowMultipleSelection="false" allowNewValues="false"
																	   backspaceAction="focus" change="cmbMonedaVinculos_changeHandler(event)"
																	   dataProvider="{ monedas }" dropDownItemRenderer="{ dropDownItemRenderer }"
																	   dropDownRowCount="{monedas.length}" enabled="{!tieneVinculos &amp;&amp; hasPerm()}"
																	   fontSize="14" labelField="nombre" labelFunction="codigoNombreLabelFunction"
																	   matchType="anyPart" selectedItem="@{recibo.moneda}"
																	   selectedItemStyleName="{ AutoComplete.STYLE_MAC_MAIL }" textAlign="left"/>
										</s:HGroup>
									</s:Panel>
									<s:Panel width="180" minHeight="0" styleName="pnlInterno" title="{isAster ? 'NETO' : 'TOTAL' }">
										<s:HGroup width="100%" horizontalAlign="center" paddingBottom="10">
											<components1:MyTextInput id="txtTotalVinculado" width="100%" height="36"
																	 change="txtTotalVinculado_changeHandler(event)"
																	 enabled="{!tieneVinculos &amp;&amp; monedasDistintas &amp;&amp; hasPerm()}" fontSize="16"
																	 permitirNegativos="false" text="{recibo.total}" textAlign="right"/>
										</s:HGroup>
									</s:Panel>
								</s:HGroup>
	
								<s:DataGrid id="dgVinculos" width="100%" height="100%" creationComplete="dgVinculos_creationCompleteHandler(event)"
											dataProvider="{recibo.facturasVinculadas}" editable="{hasPerm()}" fontSize="10"
											gridItemEditorSessionSave="dgVinculos_gridItemEditorSessionSaveHandler(event)"
											keyDown="dgVinculos_keyDownHandler(event)" selectionMode="singleCell" sortableColumns="false">
									
									<s:columns>
										<s:ArrayList>
											<s:GridColumn width="80" editable="{!recibo.emitido &amp;&amp; hasPerm()}" headerText="S/N" resizable="false"
														  sortable="false">
												<s:itemEditor>
													<fx:Component>
														<s:GridItemEditor>
															<fx:Script>
																<![CDATA[
																	import biz.fulltime.model.Articulo;
																	import biz.fulltime.model.LineaDocumento;
																	import biz.fulltime.model.VinculoDocumentos;
																	
																	import mx.events.FlexEvent;
																	
																	import spark.components.DataGrid;
																	import spark.events.TextOperationEvent;
																	
																	import util.CatalogoFactory;
																	
																	override public function get value():Object {
																		return txtSerieNumero.text;
																	}
																	
																	// Override the setter to initialize the TextInput control
																	// with the cell data.
																	override public function set value(newValue:Object):void {
																		txtSerieNumero.text = newValue as String;
																	}
																	
																	override public function set data(value:Object):void {
																		super.data = value;
																		var vinculoFactura:VinculoDocumentos = VinculoDocumentos(value);
																		
																		if (vinculoFactura && vinculoFactura.factura) {
																			if (!vinculoFactura.factura.serie) {
																				vinculoFactura.factura.serie = "";
																			}
																			if (!vinculoFactura.factura.numero) {
																				vinculoFactura.factura.numero = "";
																			}																				
																			txtSerieNumero.text = vinculoFactura.factura.serie + vinculoFactura.factura.numero;
																			txtSerieNumero.selectAll();
																			
																		} else {
																			txtSerieNumero.text = "";
																			//txtSerieNumero.selectAll();
																			
																		}
																	}
																	
																	// Override setFocus() to shift focus to the NumericStepper.
																	override public function setFocus():void {
																		txtSerieNumero.setFocus();
																	}

																	
																	protected function txtSerieNumero_changeHandler(event:TextOperationEvent):void {
																		var text:String = txtSerieNumero.text;
																		
																		var count:int = txtSerieNumero.text.length;
																		var index:int = 0;
																		
																		var serie:String = "";
																		var numero:String = "";
																		
																		for (; index < count; index++) {
																			serie = text.substr(index, 1); 
																			if( !isNaN( Number(serie) ) ) {
																				break;
																			}
																		}
																		
																		serie = (count > 0 ? text.substring(0, index) : "");
																		numero = (count > 0 ? text.substring(index) : "");
																		
																		var vinculoFactura:VinculoDocumentos = VinculoDocumentos(data);
																		if (!vinculoFactura.factura.comprobante) {
																			vinculoFactura.factura.serie = serie;
																			vinculoFactura.factura.numero = numero;
																		}																	
																		
																	}
																	
																]]>
															</fx:Script>
															<s:TextInput id="txtSerieNumero" width="100%" height="100%"
																		 change="txtSerieNumero_changeHandler(event)" restrict="0-9a-zA-Z"/> 
														</s:GridItemEditor>
													</fx:Component>
												</s:itemEditor>
												<s:itemRenderer>
													<fx:Component>
														<s:DefaultGridItemRenderer fontSize="12" textAlign="left">
															<fx:Script>
																<![CDATA[
																	import biz.fulltime.model.VinculoDocumentos;
																	
																	override public function prepare(hasBeenRecycled:Boolean):void {
																		if (!data) {
																			return;
																		}
																		var vinculoFactura:VinculoDocumentos = VinculoDocumentos(data);
																		
																		var serie:String = vinculoFactura.factura.serie;
																		var numero:String = vinculoFactura.factura.numero;
																		label = (serie ? serie : "") + (numero ? numero : "");
																	}
																]]>
															</fx:Script>
														</s:DefaultGridItemRenderer>
													</fx:Component>
												</s:itemRenderer>
											</s:GridColumn>
	
											<s:GridColumn dataField="factura" editable="false" headerText="COMPROBANTE" resizable="false" sortable="false">
												<s:itemRenderer>
													<fx:Component>
														<s:DefaultGridItemRenderer fontSize="12" textAlign="left">
															<fx:Script>
																<![CDATA[
																	import biz.fulltime.model.VinculoDocumentos;
	
																	override public function prepare(hasBeenRecycled:Boolean):void {
																		if (!data) {
																			return;
																		}
																		var vinculoFactura:VinculoDocumentos = VinculoDocumentos(data);
	
																		if (vinculoFactura.docIdVin1 != null) {
																			label = vinculoFactura.factura.comprobante ? vinculoFactura.factura.comprobante.nombre : "";
																		} else {
																			label = "";
																		}
																	}
																]]>
															</fx:Script>
														</s:DefaultGridItemRenderer>
													</fx:Component>
												</s:itemRenderer>
											</s:GridColumn>
	
											<s:GridColumn width="78" dataField="factura.fecha" editable="false" headerText="FECHA"
														  labelFunction="date_labelFunction">
												<s:itemRenderer>
													<fx:Component>
														<s:DefaultGridItemRenderer fontSize="12" textAlign="left"/>
													</fx:Component>
												</s:itemRenderer>
											</s:GridColumn>
	
											<s:GridColumn width="78" dataField="factura.moneda" editable="false" headerText="MONEDA"
														  labelFunction="moneda_labelFunction" resizable="false">
												<s:itemRenderer>
													<fx:Component>
														<s:DefaultGridItemRenderer fontSize="12" textAlign="left"/>
													</fx:Component>
												</s:itemRenderer>
											</s:GridColumn>
											
											<s:GridColumn width="80" dataField="factura.total" editable="false" headerText="TOTAL"
														  labelFunction="total_labelFunction">
												<s:itemRenderer>
													<fx:Component>
														<s:DefaultGridItemRenderer fontSize="12" textAlign="right"/>
													</fx:Component>
												</s:itemRenderer>
											</s:GridColumn>

											<s:GridColumn width="80" dataField="factura.saldo" editable="false" headerText="SALDO"
														  labelFunction="saldo_labelFunction" resizable="false">
												<s:itemRenderer>
													<fx:Component>
														<s:DefaultGridItemRenderer fontSize="12" textAlign="right"/>
													</fx:Component>
												</s:itemRenderer>
											</s:GridColumn>

											<s:GridColumn visible="{recibo.serie != 'A'}" width="60" dataField="descuentoPorc"
														  editable="{!recibo.emitido &amp;&amp; hasPerm()}" headerText="DESCUENTO"
														  itemEditor="biz.fulltime.ui.forms.DGNumberEditor">
												<s:itemRenderer>
													<fx:Component>
														<s:DefaultGridItemRenderer fontSize="12" textAlign="right">
															<fx:Script>
																<![CDATA[
																	import biz.fulltime.model.VinculoDocumentos;
																	
																	override public function prepare(hasBeenRecycled:Boolean):void {
																		if (!data) {
																			return;
																		}
																		var desc:String = VinculoDocumentos(data).descuentoPorc;
																		var descuento:BigDecimal = new BigDecimal(desc ? desc : "0").setScale(2, MathContext.ROUND_HALF_EVEN);
																		
																		label = outerDocument.nf_Espanol_Espanol.format(descuento) + "%";
																		
																		setStyle("color",  VinculoDocumentos(data).cambios["descuentoPorc"] ? "#ff0000" : "#003300");
																	}
																]]>
															</fx:Script>
														</s:DefaultGridItemRenderer>
													</fx:Component>
												</s:itemRenderer>
											</s:GridColumn>

											<s:GridColumn visible="{recibo.serie != 'A'}" width="70" dataField="descuentoMonto"
														  editable="{!recibo.emitido &amp;&amp; hasPerm()}" headerText="M.DESCUENTO"
														  itemEditor="biz.fulltime.ui.forms.DGNumberEditor">
												<s:itemRenderer>
													<fx:Component>
														<s:DefaultGridItemRenderer fontSize="12" textAlign="right">
															<fx:Script>
																<![CDATA[
																	import biz.fulltime.model.VinculoDocumentos;
																	
																	import util.Maths;
																	
																	override public function prepare(hasBeenRecycled:Boolean):void {
																		if (!data) {
																			return;
																		}
																		var montoDto_:String = VinculoDocumentos(data).descuentoMonto;
																		var montoDto:BigDecimal = montoDto_ ? new BigDecimal(montoDto_).setScale(4, MathContext.ROUND_HALF_EVEN) : BigDecimal.ZERO;

																		label = outerDocument.nf_Espanol_Espanol.format(montoDto);
																		
																		setStyle("color",  VinculoDocumentos(data).cambios["descuentoMonto"] ? "#ff0000" : "#003300");
																	}
																]]>
															</fx:Script>
														</s:DefaultGridItemRenderer>
													</fx:Component>
												</s:itemRenderer>
											</s:GridColumn>

											<s:GridColumn width="90" dataField="neto" editable="{!recibo.emitido &amp;&amp; hasPerm()}"
														  headerText="{isAster ? 'M.NETO' : 'M.VINCULADO'}" itemEditor="biz.fulltime.ui.forms.DGNumberEditor">
												<s:itemRenderer>
													<fx:Component>
														<s:DefaultGridItemRenderer fontSize="12" textAlign="right">
															<fx:Script>
																<![CDATA[
																	import biz.fulltime.model.VinculoDocumentos;
	
																	override public function prepare(hasBeenRecycled:Boolean):void {
																		if (!data)  return;
																		
																		var n:String = VinculoDocumentos(data).neto;
																		var neto:BigDecimal = new BigDecimal(n ? n : "0").setScale(2, MathContext.ROUND_HALF_EVEN);
																		
																		label = outerDocument.nf_Espanol_Espanol.format(neto);
																		
																		setStyle("color",  VinculoDocumentos(data).cambios["neto"] ? "#ff0000" : "#000000");
																	}
																]]>
															</fx:Script>
														</s:DefaultGridItemRenderer>
													</fx:Component>
												</s:itemRenderer>
											</s:GridColumn>
											
											<s:GridColumn width="70" dataField="monto" editable="{!recibo.emitido &amp;&amp; hasPerm()}" headerText="M.CANCELA"
														  itemEditor="biz.fulltime.ui.forms.DGNumberEditor">
												<s:itemRenderer>
													<fx:Component>
														<s:DefaultGridItemRenderer fontSize="12" textAlign="right">
															<fx:Script>
																<![CDATA[
																	import biz.fulltime.model.VinculoDocumentos;
																	
																	override public function prepare(hasBeenRecycled:Boolean):void {
																		if (!data) return;
																		
																		var m:String = VinculoDocumentos(data).monto;
																		var monto:BigDecimal = new BigDecimal(m ? m : "0").setScale(2, MathContext.ROUND_HALF_EVEN);
																		label = outerDocument.nf_Espanol_Espanol.format(monto);

																		setStyle("color",  VinculoDocumentos(data).cambios["cancela"] ? "#ff0000" : "#000000");
																	}
																]]>
															</fx:Script>
														</s:DefaultGridItemRenderer>
													</fx:Component>
												</s:itemRenderer>
											</s:GridColumn>

											
											<s:GridColumn visible="{tieneRF}" width="70" editable="false" headerText="RENTA FINANCIERA">
												<s:itemRenderer>
													<fx:Component>
														<s:DefaultGridItemRenderer fontSize="12" textAlign="right">
															<fx:Script>
																<![CDATA[
																	import biz.fulltime.model.VinculoDocumentos;
																	
																	override public function prepare(hasBeenRecycled:Boolean):void {
																		if (!data) {
																			return;
																		}																		
																		label = outerDocument.nf_Espanol_Espanol.format(VinculoDocumentos(data).vinRtaFin);
																	}
																]]>
															</fx:Script>
														</s:DefaultGridItemRenderer>
													</fx:Component>
												</s:itemRenderer>
											</s:GridColumn>

	
											<s:GridColumn visible="{!recibo.emitido &amp;&amp; hasPerm()}" width="34" headerText="" rendererIsEditable="true">
												<s:itemRenderer>
													<fx:Component>
														<s:GridItemRenderer>
															<fx:Script>
																<![CDATA[
																	import biz.fulltime.model.VinculoDocumentos;
	
																	import mx.controls.Alert;
																	import mx.events.CloseEvent;
	
																	protected function cmdRemove_clickHandler(event:MouseEvent):void {
																		var vinculoFactura:VinculoDocumentos = VinculoDocumentos(data);
	
																		if (vinculoFactura.docIdVin1 != null) {
																			var serieNumero:String = VinculoDocumentos(data).factura.serie + VinculoDocumentos(data).factura.numero;
																			var alert:Alert = Alert.show("¿Esta usted seguro de quitar factura " + serieNumero + "?", "Borrar Vínculo", Alert.YES + Alert.NO, null, myCloseHandler);
																			alert.width = 400;
																			alert.height = 200;
																			
																		} else {
															 				this.outerDocument.borrarVinculo();
																		}
																	}
	
																	private function myCloseHandler(event:CloseEvent):void {
																		if (event.detail == Alert.YES) {
																			this.outerDocument.borrarVinculo();
																		}
																	}
																	
																]]>
															</fx:Script>
	
															<s:VGroup width="100%" height="100%" creationComplete="cmdRemove.setFocus()" horizontalAlign="center"
																	  paddingLeft="2" verticalAlign="middle">
																<s:Button id="cmdRemove" width="100%" height="100%" click="cmdRemove_clickHandler(event)"
																		  focusEnabled="false" icon="@Embed('/assets/general/trash.png')" toolTip="Quitar"/>
															</s:VGroup>
														</s:GridItemRenderer>
													</fx:Component>
												</s:itemRenderer>
											</s:GridColumn>
	
										</s:ArrayList>
									</s:columns>
								</s:DataGrid>
								<s:HGroup width="100%" height="36" horizontalAlign="right" paddingBottom="2" paddingLeft="5" paddingRight="5"
										  verticalAlign="middle">
									<s:Label id="lblSaldoPendiente" fontSize="14"/>
									<s:Spacer width="100%"/>
									<s:Label id="lblMontoTotal" fontSize="14" text="Monto total"/>
								</s:HGroup>
							</s:VGroup>
	
							<s:controlBarContent>
								<s:HGroup width="100%" horizontalAlign="right" paddingBottom="0" paddingTop="0" verticalAlign="middle">
									<s:Spacer width="100%"/>
									<s:Button id="cmdAgregar" visible="{!recibo.emitido &amp;&amp; hasPerm()}" width="140" label="Agregar vinculo"
											  click="cmdAgregar_clickHandler(event)" enabled="{saldoPendiente.numberValue() &gt; 0}" focusEnabled="true"
											  styleName="textButton" toolTip="Agregar factura"/>
								</s:HGroup>
							</s:controlBarContent>
	
						</s:Panel>
					</s:VGroup>
	
				</s:HGroup>
			</s:VGroup>
			<s:HGroup width="100%" gap="0">
				<s:Panel width="100%" styleName="pnlInterno" title="NOTAS DEL COMPROBANTE">
					<s:VGroup width="100%" height="100" gap="0">
						<s:TextArea id="txtComments" width="100%" height="100%" minHeight="0" borderAlpha="0" contentBackgroundAlpha=".78"
									editable="{!_modoVisualizacion &amp;&amp; !recibo.emitido}" fontSize="14" keyDown="txtComments_keyDownHandler(event)"
									maxChars="1024" text="@{recibo.notas}"/>
					</s:VGroup>
				</s:Panel>
			</s:HGroup>
		</s:VGroup>
	</s:Group>

	<s:controlBarContent>
		<s:HGroup width="100%" horizontalAlign="right" paddingBottom="0" paddingTop="0" verticalAlign="middle">
			<components1:IconButton id="cmdAuditoria" visible="{recibo.docId != null}" label="Auditoría" click="cmdAuditoria_clickHandler(event)"
									includeInLayout="{recibo.docId != null}" styleName="trackingButton" toolTip="Líneas auditoría"/>
			<s:Button id="cmdDocumentos" visible="true" label="Documentos" click="cmdDocumentos_clickHandler(event)" focusEnabled="false" styleName="nuevoButton"
					  toolTip="Documentos"/>

			<s:Spacer width="100%"/>
			<components1:IconButton id="cmdImprimir" label="Imprimir" click="cmdImprimir_clickHandler(event)" styleName="imprimirButton"
									toolTip="Imprimir documento"/>
			<s:Spacer width="10"/>

			<mx:Image id="loader1" alpha=".5" scaleX=".25" scaleY=".25" source="@Embed(source='assets/general/logo_oscuro.gif')"/>
			
			<s:Spacer width="100%"/>

			<s:Button id="cmdNuevo" visible="{!_modoVisualizacion }" label="Nuevo" click="cmdNuevo_clickHandler(event)" focusEnabled="false"
					  includeInLayout="{!_modoVisualizacion}" styleName="nuevoButton" toolTip="Nuevo recibo"/>

			<s:Button id="cmdAbrirNotaCredito" visible="{!isAster &amp;&amp; recibo.emitido &amp;&amp; recibo.processId &amp;&amp; recibo.serie != 'A'}"
					  label="Visualizar NCF" click="cmdAbrirNotaCredito_clickHandler(event)" enabled="{tieneDescuentos}" focusEnabled="false"
					  styleName="verButton" toolTip="Visualizar N/C 36 Financiera"/>
			<s:Button id="cmdCrearNotaCredito" visible="{!isAster &amp;&amp; recibo.emitido &amp;&amp; !recibo.processId &amp;&amp; recibo.serie != 'A'}"
					  label="Nota Crédito" click="cmdCrearNotaCredito_clickHandler(event)" enabled="{tieneDescuentos}" focusEnabled="false"
					  styleName="nuevoButton" toolTip="Generar N/C 36 Financiera"/>
			
			<s:Button id="cmdBorrar" visible="false" label="Eliminar" click="cmdBorrar_clickHandler(event)"
					  enabled="{!tieneVinculos &amp;&amp; !recibo.nuevo &amp;&amp; !recibo.emitido}" focusEnabled="false" includeInLayout="false"
					  styleName="trashButton" toolTip="Borrar documento"/>
			<s:Button id="cmdGuardar" visible="{hasPerm()}" label="Guardar" click="cmdGuardar_clickHandler(event)"
					  enabled="{!recibo.emitido &amp;&amp; tieneCambios}" focusEnabled="false" styleName="saveButton" toolTip="Guardar documento"/>
			
			<s:Button id="cmdEmitir" visible="{!_modoVisualizacion &amp;&amp; !recibo.nuevo}" label="Emitir" click="cmdEmitir_clickHandler(event)"
					  enabled="{(!recibo.emitido &amp;&amp; tieneVinculos) || (recibo.serie == 'P')}" focusEnabled="false"
					  includeInLayout="{!_modoVisualizacion &amp;&amp; !recibo.nuevo}" styleName="emitirButton" toolTip="Emitir"/>

			<s:Button id="cmdEMail" label="Email" click="cmdEMail_clickHandler(event)" focusEnabled="false" styleName="eMailButton" toolTip="Enviar por eMail"/>
			
			<s:Spacer width="5"/>

			<s:Spacer width="10"/>
			<s:Button id="cmdCancel" label="Cerrar" click="cmdCancel_clickHandler(event)" focusEnabled="false" styleName="cancelarButton" toolTip="Cerrar"/>
		</s:HGroup>
	</s:controlBarContent>

</s:Panel>
