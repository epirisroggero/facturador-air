<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:s="library://ns.adobe.com/flex/spark"
		 width="100%" height="100%">

	<fx:Script>
		<![CDATA[
			import mx.events.CloseEvent;

			[Bindable]
			private var _errorText:String = "Mostrar información basica del error.";

			[Bindable]
			private var _detailsText:String = "Mas información";

			private var _type:int = 0;

			private var _showButtons:Boolean = false;

			private var _cornerRadius:int = 0;

			private var _backgroundAlpha:Number = 0.16;
			
			private var _mostrarDetalles:Boolean;
			
			[Bindable]
			public var textColor:uint = 0x333333;

			[Bindable]
			public function get mostrarDetalles():Boolean {
				return _mostrarDetalles;
			}

			public function set mostrarDetalles(value:Boolean):void {
				_mostrarDetalles = value;
			}

			[Bindable]
			public function get backgroundAlpha():Number {
				return _backgroundAlpha;
			}

			public function set backgroundAlpha(value:Number):void {
				_backgroundAlpha = value;
			}

			[Bindable]
			public function get cornerRadius():int {
				return _cornerRadius;
			}

			public function set cornerRadius(value:int):void {
				_cornerRadius = value;
			}

			[Bindable]
			public function get showButtons():Boolean {
				return _showButtons;
			}

			public function set showButtons(value:Boolean):void {
				_showButtons = value;
			}

			[Bindable]
			public function get type():int {
				return _type;
			}

			public function set type(value:int):void {
				_type = value;

				dispatchEvent(new Event("changeType"));
			}

			public function get detailsText():String {
				return _detailsText;
			}

			public function set detailsText(value:String):void {
				_detailsText = value;
			}

			public function get errorText():String {
				return _errorText;
			}

			public function set errorText(value:String):void {
				_errorText = value;
			}

			protected function button1_clickHandler(event:MouseEvent):void {
				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
			}

			protected function button2_clickHandler(event:MouseEvent):void {
				var button:ToggleButton = event.target as ToggleButton;
				
				mostrarDetalles = button.selected;

				groupDetails.visible = mostrarDetalles;
				groupDetails.includeInLayout = mostrarDetalles;

				button.toolTip = mostrarDetalles ? "Ocultar Detalles" : "Mostrar Detalles";
				button.label = mostrarDetalles ? "<< Detalles" : "Detalles >>";

			}

			[Bindable(event = "changeType")]
			private function getSource():Class {
				switch (type) {
					case 0: {
						return StyleManager.getStyleManager(null).getStyleDeclaration('.icons32').getStyle('ErrorIcon');
					}
					case 1: {
						return StyleManager.getStyleManager(null).getStyleDeclaration('.icons32').getStyle('WarningIcon');
					}
					case 2: {
						return StyleManager.getStyleManager(null).getStyleDeclaration('.icons32').getStyle('InformationIcon');
					}
					default: {
						return null

					}
				}

			}
		]]>
	</fx:Script>


	<s:BorderContainer id="errorPnl" width="100%" height="100%" backgroundAlpha="{backgroundAlpha}" backgroundColor="#CCCCCC" cornerRadius="{cornerRadius}" borderAlpha="0">
		<s:VGroup width="100%" height="100%" styleName="pntLineasVenta">
			<s:HGroup width="100%" height="90" paddingLeft="20" paddingRight="20" verticalAlign="middle">
				<mx:Image id="imgError" width="32" height="32" source="{getSource()}" />

				<s:Label width="100%" text="{_errorText}" maxDisplayedLines="3" styleName="myLabel" color="{textColor}" fontSize="16"/>
			</s:HGroup>
			<s:HGroup id="groupDetails" width="100%" height="160" paddingBottom="0" paddingLeft="10" paddingRight="10" paddingTop="0" includeInLayout="{mostrarDetalles}" visible="{mostrarDetalles}">
				<s:Scroller width="100%" height="100%">
					<s:viewport>
						<s:Group width="100%" height="100%">
							<s:TextArea width="100%" height="100%" text="{_detailsText}" editable="false" />
						</s:Group>
					</s:viewport>
				</s:Scroller>
			</s:HGroup>
			<s:HGroup width="100%" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" visible="{showButtons}" includeInLayout="{showButtons}">
				<s:Spacer width="100%" />
				<s:Button click="button1_clickHandler(event)" label="Cerrar" toolTip="Cerrar" width="100" styleName="textButton"/>
				<s:ToggleButton id="btnDetails" click="button2_clickHandler(event)" label="Detalles >>" toolTip="Mostrar detalles" selected="false" height="28" styleName="textToggleButton"/>
			</s:HGroup>
		</s:VGroup>
	</s:BorderContainer>

</s:Group>
